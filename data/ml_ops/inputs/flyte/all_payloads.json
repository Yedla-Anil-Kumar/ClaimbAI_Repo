{
  "cicd_policy_gates": {
    "metric_id": "cicd.policy_gates_band",
    "required_checks": [
      "pytest",
      "integration-tests",
      "bandit",
      "trivy",
      "bias_check",
      "data_validation"
    ],
    "workflow_files": [
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/publish.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/update_site.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/single-binary.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/lint.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/create_release.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/go_generate.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/checks.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/dependency-review.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/sandbox.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/stale.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/contributors.yaml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flyteidl-release.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flytectl-install.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/integration.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/unit-tests.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flytectl-release.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flyteidl-checks.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/upgrade_automation.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flyteidl-buf-publish.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/codespell.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/helm-charts.yaml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/validate-helm-charts.yaml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/component_docker_build.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/tests.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/publish-images.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/selfassign.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/generate_flyte_manifest.yml"
    ],
    "workflow_yaml": [
      "name: Build & Push Docker Image\n\non:\n  workflow_call:\n    inputs:\n      component:\n        description: \"Component Name\"\n        required: true\n        type: string\n      dockerfile:\n        description: \"Dockerfile name\"\n        required: true\n        type: string\n      version:\n        description: \"Version of image\"\n        required: true\n        type: string\n      push:\n        description: \"Push to registry\"\n        required: true\n        type: boolean\n      before-build:\n        description: \"Script to run before build\"\n        required: false\n        type: string\n    secrets:\n      FLYTE_BOT_USERNAME:\n        required: true\n      FLYTE_BOT_PAT:\n        required: true\njobs:\n  push-github:\n    name: Push to Github Registry\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: '0'\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Login to GitHub Container Registry\n        if: ${{ inputs.push }}\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: \"${{ secrets.FLYTE_BOT_USERNAME }}\"\n          password: \"${{ secrets.FLYTE_BOT_PAT }}\"\n      - name: Prepare Image Tags\n        id: tags\n        uses: docker/metadata-action@v3\n        with:\n          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.component }}\n          tags: |\n            type=raw,value=latest\n            type=raw,value=${{ inputs.version }}\n            type=sha,format=long,prefix=\n      - name: Before Build\n        run: ${{ inputs.before-build }}\n      - name: Build and Push Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ${{ inputs.dockerfile }}\n          platforms: linux/arm64,linux/amd64\n          push: ${{ inputs.push }}\n          tags: ${{ steps.tags.outputs.tags }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n",
      "name: Update version in flyte.org\non:\n  push:\n    tags:\n      - 'v[0-9]+.[0-9]+.[0-9]+'\n\n\njobs:\n  repository-dispatch:\n    name: Repository Dispatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch version\n        id: bump\n        run: |\n          # from refs/tags/v1.2.3 get 1.2.3\n          VERSION=$(echo $GITHUB_REF | sed 's#.*/v##')\n          echo \"::set-output name=version::$VERSION\"\n      - name: Create an event for the release\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.FLYTE_BOT_PAT }}\n          repository: flyteorg/flyteorg.github.io\n          event-type: release\n          client-payload: '{\"tag\": \"${{ steps.bump.outputs.version }}\"}'\n",
      "name: Build & Push Flyte Single Binary Images\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - rc/*\n      - \"release-v**\"\n  workflow_dispatch:\n\njobs:\n  test-bootstrap:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          working-directory: docker/sandbox-bundled/bootstrap\n      - name: Check formatting\n        working-directory: docker/sandbox-bundled/bootstrap\n        run: |\n          make check-fmt\n      - name: Test\n        working-directory: docker/sandbox-bundled/bootstrap\n        run: |\n          make test\n\n  build-and-push-single-binary-image:\n    runs-on: ubuntu-latest\n    needs: [test-bootstrap]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Setup Golang caches\n        uses: actions/cache@v4\n        with:\n          path: |\n            /root/.cache/go-build\n            /root/go/pkg/mod\n          key: ${{ runner.os }}-golang-${{ hashFiles('go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-golang-\n      - name: Set versions\n        id: set_version\n        run: |\n          # TODO: Find a better way to determine the flyteconsole version\n          echo \"FLYTECONSOLE_VERSION=$(yq eval '.flyteconsole.image.tag' charts/flyte-core/values.yaml)\" >> $GITHUB_ENV\n          echo \"FLYTE_VERSION=${{ github.sha }}\" >> $GITHUB_ENV\n      - name: Prepare Image Names\n        id: image-names\n        uses: docker/metadata-action@v3\n        with:\n          # list of Docker images to use as base name for tags\n          images: |\n            ghcr.io/${{ github.repository_owner }}/flyte-binary\n          tags: |\n            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}\n            type=sha,format=long\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Setup destination directories for image tarballs\n        run: |\n          mkdir -p docker/sandbox-bundled/images/tar/{arm64,amd64}\n      - name: Export ARM64 Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: linux/arm64\n          tags: flyte-binary:sandbox\n          build-args: |\n            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}\n            FLYTE_VERSION=${{ env.FLYTE_VERSION }}\n          file: Dockerfile\n          outputs: type=docker,dest=docker/sandbox-bundled/images/tar/arm64/flyte-binary.tar\n      - name: Export AMD64 Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: linux/amd64\n          tags: flyte-binary:sandbox\n          build-args: |\n            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}\n            FLYTE_VERSION=${{ env.FLYTE_VERSION }}\n          file: Dockerfile\n          outputs: type=docker,dest=docker/sandbox-bundled/images/tar/amd64/flyte-binary.tar\n      - name: Upload single binary image\n        uses: actions/upload-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Login to GitHub Container Registry\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: \"${{ secrets.FLYTE_BOT_USERNAME }}\"\n          password: \"${{ secrets.FLYTE_BOT_PAT }}\"\n      - name: Build and push Image\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: linux/arm64, linux/amd64\n          tags: ${{ steps.image-names.outputs.tags }}\n          build-args: |\n            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}\n            FLYTE_VERSION=${{ env.FLYTE_VERSION }}\n          file: Dockerfile\n          push: true\n\n  sandbox-bundled-functional-tests:\n    runs-on: ubuntu-latest\n    env:\n      FLYTESNACKS_PRIORITIES: \"P0\"\n      FLYTESNACKS_VERSION: \"\"\n    timeout-minutes: 60\n    needs: [build-and-push-single-binary-image]\n    steps:\n      - name: Set latest Flytesnacks release\n        if: ${{ env.FLYTESNACKS_VERSION == '' }}\n        run: |\n          FLYTESNACKS_VERSION=\"$(curl --silent https://api.github.com/repos/flyteorg/flytesnacks/releases/latest | jq -r .tag_name)\"\n          echo \"FLYTESNACKS_VERSION=${FLYTESNACKS_VERSION}\" >> ${GITHUB_ENV}\n      - name: Checkout\n        uses: actions/checkout@v4\n      - uses: actions/download-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: image=moby/buildkit:master\n          buildkitd-flags: \"--allow-insecure-entitlement security.insecure\"\n      - name: Build sandbox image for functional tests\n        uses: docker/build-push-action@v6\n        with:\n          context: docker/sandbox-bundled\n          load: true\n          allow: \"security.insecure\"\n          tags: flyte-sandbox-bundled:local\n      # Without this, the GHA runner is under disk pressure and evicts all the pods.\n      # Buildx cache uses roughly 50% (7gb) of the GHA runner's disk (14gb).\n      - name: Prune Docker Buildx cache to reclaim storage\n        run: docker buildx prune --all --force\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.12\"\n      - uses: unionai/flytectl-setup-action@v0.0.3\n      - name: Setup sandbox\n        run: |\n          mkdir -p ~/.flyte/sandbox\n          cat << EOF > ~/.flyte/sandbox/config.yaml\n          task_resources:\n            defaults:\n              cpu: \"0\"\n              memory: \"0\"\n            limits:\n              cpu: \"0\"\n              memory: \"0\"\n          EOF\n          flytectl demo start --image flyte-sandbox-bundled:local --imagePullPolicy Never\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install uv\n          uv pip install --system flytekit==1.15.0 flytekitplugins-deck-standard==1.15.0 \"numpy<2.0.0\" pyarrow pandas\n          uv pip freeze\n      - name: Checkout flytesnacks\n        uses: actions/checkout@v4\n        with:\n          repository: flyteorg/flytesnacks\n          path: flytesnacks\n          ref: ${{ env.FLYTESNACKS_VERSION }}\n      - name: Register specific tests\n        run: |\n          flytekit_version=$(pip show flytekit | grep -i version | awk '{ print $2 }')\n          while read -r line;\n          do\n              pyflyte -vv --config ./boilerplate/flyte/end2end/functional-test-config.yaml \\\n                  register \\\n                  --project flytesnacks \\\n                  --domain development \\\n                  --image cr.flyte.org/flyteorg/flytekit:py3.12-${flytekit_version} \\\n                  --version ${{ env.FLYTESNACKS_VERSION }} \\\n                  flytesnacks/$line;\n          done < flytesnacks/flyte_tests.txt\n      - name: Install Pytest\n        run: |\n          pip install pytest\n      - name: End2End\n        run: |\n          make end2end_execute\n\n  sandbox-bundled-offloaded-functional-tests:\n    runs-on: ubuntu-latest\n    env:\n      FLYTESNACKS_PRIORITIES: \"P0\"\n      FLYTESNACKS_VERSION: \"\"\n    timeout-minutes: 60\n    needs: [build-and-push-single-binary-image]\n    steps:\n      - name: Set latest Flytesnacks release\n        if: ${{ env.FLYTESNACKS_VERSION == '' }}\n        run: |\n          FLYTESNACKS_VERSION=\"$(curl --silent https://api.github.com/repos/flyteorg/flytesnacks/releases/latest | jq -r .tag_name)\"\n          echo \"FLYTESNACKS_VERSION=${FLYTESNACKS_VERSION}\" >> ${GITHUB_ENV}\n      - name: Checkout\n        uses: actions/checkout@v4\n      - uses: actions/download-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: image=moby/buildkit:master\n          buildkitd-flags: \"--allow-insecure-entitlement security.insecure\"\n      - name: Build sandbox image for functional tests\n        uses: docker/build-push-action@v6\n        with:\n          context: docker/sandbox-bundled\n          load: true\n          allow: \"security.insecure\"\n          tags: flyte-sandbox-bundled:local\n      # Without this, the GHA runner is under disk pressure and evicts all the pods.\n      # Buildx cache uses roughly 50% (7gb) of the GHA runner's disk (14gb).\n      - name: Prune Docker Buildx cache to reclaim storage\n        run: docker buildx prune --all --force\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.12\"\n      - uses: unionai/flytectl-setup-action@v0.0.3\n      - name: Setup sandbox\n        run: |\n          mkdir -p ~/.flyte/sandbox\n          cat << EOF > ~/.flyte/sandbox/config.yaml\n          propeller:\n            literal-offloading-config:\n              enabled: true\n              min-size-in-mb-for-offloading: 0.000001\n          task_resources:\n            defaults:\n              cpu: \"0\"\n              memory: \"0\"\n            limits:\n              cpu: \"0\"\n              memory: \"0\"\n          EOF\n          flytectl demo start --image flyte-sandbox-bundled:local --imagePullPolicy Never\n        # By setting min-size-in-mb-for-offloading to 0.000001, we ensure that all tasks are offloaded.\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install uv\n          uv pip install --system flytekit flytekitplugins-deck-standard \"numpy<2.0.0\" pyarrow pandas\n          uv pip freeze\n      - name: Checkout flytesnacks\n        uses: actions/checkout@v4\n        with:\n          repository: flyteorg/flytesnacks\n          path: flytesnacks\n          ref: ${{ env.FLYTESNACKS_VERSION }}\n      - name: Register specific tests\n        run: |\n          flytekit_version=$(pip show flytekit | grep -i version | awk '{ print $2 }')\n          while read -r line;\n          do\n              pyflyte -vv --config ./boilerplate/flyte/end2end/functional-test-config.yaml \\\n                  register \\\n                  --project flytesnacks \\\n                  --domain development \\\n                  --image cr.flyte.org/flyteorg/flytekit:py3.12-${flytekit_version} \\\n                  --version ${{ env.FLYTESNACKS_VERSION }} \\\n                  flytesnacks/$line;\n          done < flytesnacks/flyte_tests.txt\n      - name: Install Pytest\n        run: |\n          pip install pytest\n      - name: End2End\n        run: |\n          make end2end_execute\n\n  build-and-push-sandbox-bundled-image:\n    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n    runs-on: ubuntu-latest\n    needs: [build-and-push-single-binary-image]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - uses: actions/download-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: image=moby/buildkit:master\n          buildkitd-flags: \"--allow-insecure-entitlement security.insecure\"\n      - name: Set version\n        id: set_version\n        run: |\n          echo \"FLYTE_SANDBOX_VERSION=${{ github.sha }}\" >> $GITHUB_ENV\n      - name: Prepare Image Names\n        id: image-names\n        uses: docker/metadata-action@v3\n        with:\n          # list of Docker images to use as base name for tags\n          images: |\n            ghcr.io/${{ github.repository_owner }}/flyte-sandbox-bundled\n          tags: |\n            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}\n            type=sha,format=long,\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: \"${{ secrets.FLYTE_BOT_USERNAME }}\"\n          password: \"${{ secrets.FLYTE_BOT_PAT }}\"\n      - name: Build and push multi-arch image\n        uses: docker/build-push-action@v6\n        with:\n          context: docker/sandbox-bundled\n          allow: \"security.insecure\"\n          platforms: linux/arm64, linux/amd64\n          tags: ${{ steps.image-names.outputs.tags }}\n          build-args: \"FLYTE_SANDBOX_VERSION=${{ env.FLYTE_SANDBOX_VERSION }}\"\n          push: true\n",
      "name: Lint\n\non:\n  workflow_call:\n    inputs:\n      component:\n        required: true\n        type: string\njobs:\n  lint:\n    name: Run Lint\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ${{ inputs.component }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: ${{ inputs.component }}/go.mod\n      - name: Lint\n        run: make install && make lint\n"
    ],
    "evidence": {
      "present_flags": {
        "pytest": false,
        "integration": false,
        "bandit": false,
        "trivy": false,
        "bias": false,
        "data_validation": false
      },
      "schedules": [
        "on:\n  schedule",
        "cron: \"0 0 * * *\"",
        "on:\n  schedule",
        "cron: '0 12 * * 1'"
      ],
      "deploy_jobs": [
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "Release",
        "release",
        "release",
        "Release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "Release",
        "deploy",
        "deploy",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release"
      ],
      "environments": []
    },
    "rubric": "5 if all required checks exist and run before deploy; 4 if most present; 3 if partial; 2 minimal; 1 if missing."
  },
  "registry_governance_readiness": {
    "metric_id": "registry_governance_readiness_band",
    "evidence": {
      "codeowners_present": true,
      "deploy_jobs": [
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "Release",
        "release",
        "release",
        "Release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "Release",
        "deploy",
        "deploy",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release",
        "release"
      ],
      "environments": [],
      "policy_gates": {
        "pytest": false,
        "integration": false,
        "bandit": false,
        "trivy": false,
        "bias": false,
        "data_validation": false
      }
    },
    "rubric": {
      "5": "CODEOWNERS + prod environment gating + security tests + explicit promote steps",
      "4": "prod env + policy gates present",
      "3": "some gates or envs",
      "2": "weak hints only",
      "1": "no governance indicators"
    }
  },
  "artifact_lineage_readiness": {
    "metric_id": "artifact_lineage_readiness_band",
    "evidence": {
      "image_digests": [],
      "unpinned_images": [
        "image: test:test",
        "image: \"cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: flyte-binary:sandbox",
        "image: bitnami/postgresql:sandbox",
        "image: moby/buildkit:sandbox",
        "image: registry:sandbox",
        "image: kubernetesui/dashboard:sandbox",
        "image: docker.io/bitnami/minio:sandbox",
        "image: docker.io/bitnami/os-shell:sandbox",
        "image: envoyproxy/envoy:sandbox",
        "image: cr.flyte.org/flyteorg/flyteagent:1.15.3",
        "image: docker.io/bitnami/postgresql:sandbox",
        "image: docker.io/bitnami/os-shell:sandbox",
        "image: moby/buildkit:sandbox",
        "image: registry:sandbox",
        "image: kubernetesui/dashboard:sandbox",
        "image: docker.io/bitnami/minio:sandbox",
        "image: docker.io/bitnami/os-shell:sandbox",
        "image: envoyproxy/envoy:sandbox",
        "image: docker.io/bitnami/postgresql:sandbox",
        "image: docker.io/bitnami/os-shell:sandbox",
        "image: \"cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: flyte-binary:sandbox",
        "image: bitnami/postgresql:sandbox",
        "image: moby/buildkit:sandbox",
        "image: registry:sandbox",
        "image: kubernetesui/dashboard:sandbox",
        "image: docker.io/bitnami/minio:sandbox",
        "image: docker.io/bitnami/os-shell:sandbox",
        "image: envoyproxy/envoy:sandbox",
        "image: docker.io/bitnami/postgresql:sandbox",
        "image: docker.io/bitnami/os-shell:sandbox",
        "image: registry.ingress.ktensorgym.us-east-1.k8s.flyteorg.net/sdk:latest",
        "image: \"postgres:10.1",
        "image: \"minio/minio:edge",
        "image: postgres:10.1",
        "image: flyteadmin:test",
        "image: flyteadmin:test",
        "image: flyteadmin:test",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v0.0.24",
        "image: localhost:30000/flyteagent:example",
        "image: pingsutw/backend-plugin-system:v1",
        "image: \"cr.flyte.org/flyteorg/flytecopilot:v0.0.15",
        "image: cr.flyte.org/flyteorg/datacatalog:v1.0.51",
        "image: cr.flyte.org/flyteorg/datacatalog:v1.0.51",
        "image: cr.flyte.org/flyteorg/flytepropeller:v1.1.116",
        "image: cr.flyte.org/flyteorg/flytepropeller:v1.1.116",
        "image: cr.flyte.org/flyteorg/flyteadmin:v1.1.118",
        "image: ecr.flyte.org/ubuntu/postgres:13-21.04_beta",
        "image: cr.flyte.org/flyteorg/flyteadmin:v1.1.118",
        "image: cr.flyte.org/flyteorg/flyteadmin:v1.1.118",
        "image: cr.flyte.org/flyteorg/flyteadmin:v1.1.118",
        "image: cr.flyte.org/flyteorg/flyteadmin:v1.1.118",
        "image: cr.flyte.org/flyteorg/flytepropeller:v1.1.116",
        "image: cr.flyte.org/flyteorg/flytescheduler:v0.6.49",
        "image: cr.flyte.org/flyteorg/flytescheduler:v0.6.49",
        "image: ecr.flyte.org/bitnami/minio:2021.10.13-debian-10-r0",
        "image: ecr.flyte.org/ubuntu/postgres:13-21.04_beta",
        "image: \"cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"postgres:15-alpine",
        "image: \"cr.flyte.org/flyteorg/flyte-binary:latest",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteconsole:v1.20.1",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteconsole:v1.20.1",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteconsole:v1.20.1",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteconsole:v1.20.1",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytepropeller:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteadmin:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flyteconsole:v1.20.1",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/datacatalog:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: \"cr.flyte.org/flyteorg/flytescheduler:v1.16.0-b4",
        "image: cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4",
        "image: \"kubernetesui/dashboard:v2.2.0",
        "image: \"ecr.flyte.org/bitnami/minio:2021.10.13-debian-10-r0",
        "image: \"ecr.flyte.org/ubuntu/postgres:13-21.04_beta",
        "image: \"cr.flyte.org/flyteorg/flyteagent:1.15.3",
        "image: \"ghcr.io/flyteorg/flytecopilot:v0.0.15",
        "image: \"683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:0.90-2-cpu-py3",
        "image: \"683313688378.dkr.ecr.us-east-1.amazonaws.com/sagemaker-xgboost:1.0-1-cpu-py3",
        "image: myflyteimage:abc123",
        "image: myflyteimage:abc123",
        "image: myflytecontainer:abc123",
        "image: myflytecontainer:abc123",
        "image: myflytecontainer:abc123",
        "image: myflytecontainer:abc123",
        "image: myflytecontainer:abc123",
        "image: myflytecontainer:abc123"
      ],
      "sbom": [],
      "signing": [],
      "k8s_probes": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete-connector.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/dev.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteadmin/script/integration/k8s/integration.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/templates/redis/statefulset.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/admin/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/console/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyteconnector/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyteconnector/templates/connector/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-sandbox/templates/buildkit/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-sandbox/templates/proxy/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/templates/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-deps/templates/redis/statefulset.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox-binary/flyte_sandbox_binary_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_controlplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_aws_scheduler_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_controlplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox/flyte_sandbox_deps_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/connector/flyte_connector_helm_generated.yaml"
      ]
    },
    "rubric": {
      "5": "images pinned by digest + signing/SBOM + probes",
      "4": "pinned images + either signing or SBOM",
      "3": "some pinning, missing supply-chain pieces",
      "2": "unpinned images dominate",
      "1": "no integrity signals"
    }
  },
  "monitoring_readiness": {
    "metric_id": "monitoring_coverage_readiness_band",
    "evidence": {
      "rule_files": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/Makefile",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyte-single-binary-local.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete-connector.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/dev.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytestdlib/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytestdlib/flytestdlib.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytestdlib/.goreleaser.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.1.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.0-rc0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.10.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.1-rc0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/service/agent.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-eks-override.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-eks.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-keycloak-idp-flyteclients-without-browser.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-sandbox.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/clusterresourcesync/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/propeller/webhook.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/propeller/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/eks-production.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/eks-starter.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/productionizing/schedules.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/flyte_agents/developing_agents.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/2995-performance-benchmarking.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/0000-runtime-workflow-control-using-signalling.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/RFC-5659-execution-concurrency.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/test/flyte_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox-binary/flyte_sandbox_binary_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_dataplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_controlplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_dataplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_aws_scheduler_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_controlplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/stats/prometheus/flytepropeller-dashboard.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/stats/prometheus/flyteuser-dashboard.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/stats/prometheus/flyteadmin-dashboard.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/validate-helm-charts.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/stats/flyteuser.dashboard.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/stats/flyteadmin.dashboard.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/stats/flytepropeller.dashboard.py"
      ],
      "rule_snippets": [
        "export REPOSITORY=flyte\ninclude boilerplate/flyte/end2end/Makefile\ninclude boilerplate/flyte/golang_test_targets/Makefile\n\ndefine PIP_COMPILE\npip-compile $(1) --upgrade --verbose --resolver=backtracking --annotation-style=line\nendef\n\nGIT_VERSION := $(shell git describe --tags --long --match \"v*\" --first-parent)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nTIMESTAMP := $(shell date '+%Y-%m-%d')\nPACKAGE ?=github.com/flyteorg/flyte/flytestdlib\nLD_FLAGS=\"-s -w -X $(PACKAGE)/version.Version=$(GIT_VERSION) -X $(PACKAGE)/version.Build=$(GIT_HASH) -X $(PACKAGE)/version.BuildTime=$(TIMESTAMP)\"\nTMP_BUILD_DIR := .tmp_build\n\n.PHONY: cmd/single/dist\ncmd/single/dist: export FLYTECONSOLE_VERSION ?= latest\ncmd/single/dist:\n\tscript/get_flyteconsole_dist.sh\n\n.PHONY: compile\ncompile: cmd/single/dist\n\tgo build -tags console -v -o flyte -ldflags=$(LD_FLAGS) ./cmd/\n\tmv ./flyte ${GOPATH}/bin/ || echo \"Skipped copying 'flyte' to ${GOPATH}/bin\"\n\n.PHONY: linux_compile\nlinux_compile: cmd/single/dist\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0  go build -tags console -v -o /artifacts/flyte -ldflags=$(LD_FLAGS) ./cmd/\n\n.PHONY: update_boilerplate\nupdate_boilerplate:\n\t@boilerplate/update.sh\n\n.PHONY: helm\nhelm: ## Generate K8s Manifest from Helm Charts.\n\tbash script/generate_helm.sh\n\tmake -C docker/sandbox-bundled manifests\n\n.PHONY: release_automation\nrelease_automation:\n\tmkdir -p release\n\tbash script/release.sh\n\tbash script/generate_config_docs.sh\n\t$(MAKE) -C docker/sandbox-bundled manifests\n\n.PHONY: deploy_sandbox\ndeploy_sandbox:\n\tbash script/deploy.sh\n\n.PHONY: install-piptools\ninstall-piptools: ## Install pip-tools\n\tpip install -U pip-tools\n\n.PHONY: install-conda-lock\ninstall-conda-lock:\n\tpip install conda-lock\n\n.PHONY: conda-lock\nconda-lock: install-conda-lock\n\tconda-lock -f monodocs-environment.yaml --without-cuda \\\n\t\t--lockfile monodocs-environment.lock.yaml \\\n\t\t--platform=osx-64 --platform=osx-arm64 --platform=linux-64\n\n.PHONY: stats\nstats:\n\t@generate-dashboard -o deployment/stats/prometheus/flytepropeller-dashboard.json stats/flytepropeller.dashboard.py\n\t@generate-dashboard -o deployment/stats/prometheus/flyteadmin-dashboard.json stats/flyteadmin.dashboard.py\n\t@generate-dashboard -o deployment/stats/prometheus/flyteuser-dashboard.json stats/flyteuser.dashboard.py\n\n.PHONY: prepare_artifacts\nprepare_artifacts:\n\tbash script/prepare_artifacts.sh\n\n.PHONE: helm_update\nhelm_update: ## Update helm charts' dependencies.\n\thelm dep update ./charts/flyte/\n\n.PHONY: helm_install\nhelm_install: ## Install helm charts\n\thelm install flyte --debug ./charts/flyte -f ./charts/flyte/values.yaml --create-namespace --namespace=flyte\n\n.PHONY: helm_upgrade\nhelm_upgrade: ## Upgrade helm charts\n\thelm upgrade flyte --debug ./charts/flyte -f ./charts/flyte/values.yaml --create-namespace --namespace=flyte\n\n# Used in CI\n.PHONY: docs\ndocs:\n\tmake -C docs clean html SPHINXOPTS=-W\n\n$(TMP_BUILD_DIR):\n\tmkdir $@\n\n$(TMP_BUILD_DIR)/conda-lock-image: docs/Dockerfile.conda-lock | $(TMP_BUILD_DIR)\n\tdocker buildx build --load --platform=linux/amd64 --build-arg USER_UID=$$(id -u) --build-arg USER_GID=$$(id -g) -t flyte-conda-lock:latest -f docs/Dockerfile.conda-lock .\n\ttouch $(TMP_BUILD_DIR)/conda-lock-image\n\nmonodocs-environment.lock.yaml: monodocs-environment.yaml $(TMP_BUILD_DIR)/conda-lock-image\n\tdocker run --platform=linux/amd64 --rm --pull never -v ./:/flyte flyte-conda-lock:latest lock --file monodocs-environment.yaml --lockfile monodocs-environment.lock.yaml\n\n$(TMP_BUILD_DIR)/dev-docs-image: docs/Dockerfile.docs monodocs-environment.lock.yaml | $(TMP_BUILD_DIR)\n\tdocker buildx build --load --platform=linux/amd64 --build-arg USER_UID=$$(id -u) --build-arg USER_GID=$$(id -g) -t flyte-dev-docs:latest -f docs/Dockerfile.docs .\n\ttouch $(TMP_BUILD_DIR)/dev-docs-image\n\n# Build docs in docker container for local development\n.PHONY: dev-docs\ndev-docs: $(TMP_BUILD_DIR)/dev-docs-image\n\tbash script/local_build_docs.sh\n\n.PHONY: help\nhelp: SHELL := /bin/sh\nhelp: ## List available commands and their usage\n\t@awk 'BEGIN {FS = \":.*?##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\\nTargets:\\n\"} /^[0-9a-zA-Z_-]+:.*?##/ { printf \"  \\033[36m%-20s\\033[0m %s\\n\", $$1, $$2 } ' $(MAKEFILE_LIST)\n\n.PHONY: setup_local_dev\nsetup_local_dev: ## Sets up k3d cluster with Flyte dependencies for local development\n\t@bash script/setup_local_dev.sh\n\n# This builds the flyte binary image for whatever architecture you're on. Don't push this image to the official\n# registry because we need those to be multi-arch.\n.PHONY: build_native_flyte\nbuild_native_flyte: FLYTECONSOLE_VERSION := latest\nbuild_native_flyte:\n\tdocker build \\\n\t--build-arg FLYTECONSOLE_VERSION=$(FLYTECONSOLE_VERSION) \\\n\t--tag flyte-binary:native .\n\n.PHONY: go-tidy\ngo-tidy:\n\tgo mod tidy\n\tmake -C datacatalog go-tidy\n\tmake -C flyteadmin go-tidy\n\tmake -C flyteidl go-tidy\n\tmake -C flytepropeller go-tidy\n\tmake -C flyteplugins go-tidy\n\tmake -C flytestdlib go-tidy\n\tmake -C flytecopilot go-tidy\n\tmake -C flytectl go-tidy\n\n.PHONY: lint-helm-charts\nlint-helm-charts:\n\t# This pressuposes that you have act installed\n\tact pull_request -W .github/workflows/validate-helm-charts.yaml --container-architecture linux/amd64 -e charts/event.json\n\n.PHONY: spellcheck\nspellcheck:\n\tact pull_request --container-architecture linux/amd64 -W .github/workflows/codespell.yml\n\n.PHONY: clean\nclean: ## Remove the HTML files related to the Flyteconsole and Makefile\n\trm -rf cmd/single/dist .tmp_build\n",
        "# This is a sample configuration file for running single-binary Flyte locally against\n# a sandbox.\nadmin:\n  # This endpoint is used by flytepropeller to talk to admin\n  # and artifacts to talk to admin,\n  # and _also_, admin to talk to artifacts\n  endpoint: localhost:30080\n  insecure: true\n\ncatalog-cache:\n  endpoint: localhost:8081\n  insecure: true\n  type: datacatalog\n\ncluster_resources:\n  standaloneDeployment: false\n  templatePath: $HOME/.flyte/sandbox/cluster-resource-templates\n\nlogger:\n  show-source: true\n  level: 5\n\npropeller:\n  create-flyteworkflow-crd: true\n  kube-config: $HOME/.flyte/sandbox/kubeconfig\n  rawoutput-prefix: s3://my-s3-bucket/data\n  literal-offloading-config:\n    enabled: true\n\nserver:\n  kube-config: $HOME/.flyte/sandbox/kubeconfig\n\nwebhook:\n  certDir: $HOME/.flyte/webhook-certs\n  localCert: true\n  secretName: flyte-sandbox-webhook-secret\n  serviceName: flyte-sandbox-local\n  servicePort: 9443\n\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - K8S-ARRAY\n      - connector-service\n      - echo\n    default-for-task-types:\n      - container: container\n      - container_array: K8S-ARRAY\n\nplugins:\n  logs:\n    kubernetes-enabled: true\n    kubernetes-template-uri: http://localhost:30080/kubernetes-dashboard/#/log/{{.namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\n    cloudwatch-enabled: false\n    stackdriver-enabled: false\n  k8s:\n    default-env-vars:\n      - FLYTE_AWS_ENDPOINT: http://flyte-sandbox-minio.flyte:9000\n      - FLYTE_AWS_ACCESS_KEY_ID: minio\n      - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage\n    image-pull-policy: Always # Helps in better iteration of flytekit changes\n  k8s-array:\n    logs:\n      config:\n        kubernetes-enabled: true\n        kubernetes-template-uri: http://localhost:30080/kubernetes-dashboard/#/log/{{.namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\n        cloudwatch-enabled: false\n        stackdriver-enabled: false\n\ndatabase:\n  postgres:\n    username: postgres\n    password: postgres\n    host: 127.0.0.1\n    port: 30001\n    dbname: flyte\n    options: \"sslmode=disable\"\nstorage:\n  type: stow\n  stow:\n    kind: s3\n    config:\n      region: us-east-1\n      disable_ssl: true\n      v2_signing: true\n      endpoint: http://localhost:30002\n      auth_type: accesskey\n      access_key_id: minio\n      secret_key: miniostorage\n  container: my-s3-bucket\n  limits:\n    maxDownloadMBs: 1000\n\ntask_resources:\n  defaults:\n    cpu: 500m\n    memory: 500Mi\n  limits:\n    cpu: 4\n    memory: 4Gi\n",
        "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: flyte\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox\n  namespace: flyte\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\n---\napiVersion: v1\nautomountServiceAccountToken: true\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\nsecrets:\n- name: flyte-sandbox-minio\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyteconnector\n    helm.sh/chart: flyteconnector-v0.1.10\n  name: flyteconnector\n  namespace: flyte\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nrules:\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - kubernetes-dashboard-key-holder\n  - kubernetes-dashboard-certs\n  - kubernetes-dashboard-csrf\n  resources:\n  - secrets\n  verbs:\n  - get\n  - update\n  - delete\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - kubernetes-dashboard-settings\n  resources:\n  - configmaps\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - heapster\n  - dashboard-metrics-scraper\n  resources:\n  - services\n  verbs:\n  - proxy\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - heapster\n  - 'http:heapster:'\n  - 'https:heapster:'\n  - dashboard-metrics-scraper\n  - http:dashboard-metrics-scraper\n  resources:\n  - services/proxy\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-cluster-role\n  namespace: flyte\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  - resourcequotas\n  - secrets\n  - serviceaccounts\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - create\n  - delete\n  - get\n  - list\n  - patch\n  - update\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n  - delete\n  - patch\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  - podtemplates\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - flyte.lyft.com\n  resources:\n  - flyteworkflows\n  verbs:\n  - create\n  - delete\n  - deletecollection\n  - get\n  - list\n  - patch\n  - post\n  - update\n  - watch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - create\n  - get\n  - list\n- apiGroups:\n  - admissionregistration.k8s.io\n  resources:\n  - mutatingwebhookconfigurations\n  verbs:\n  - create\n  - get\n  - list\n  - patch\n  - update\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard-readonly\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - configmaps\n  - endpoints\n  - persistentvolumeclaims\n  - pods\n  - replicationcontrollers\n  - replicationcontrollers/scale\n  - serviceaccounts\n  - services\n  - nodes\n  - persistentvolumeclaims\n  - persistentvolumes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - bindings\n  - events\n  - limitranges\n  - namespaces/status\n  - pods/log\n  - pods/status\n  - replicationcontrollers/status\n  - resourcequotas\n  - resourcequotas/status\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apps\n  resources:\n  - daemonsets\n  - deployments\n  - deployments/scale\n  - replicasets\n  - replicasets/scale\n  - statefulsets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - autoscaling\n  resources:\n  - horizontalpodautoscalers\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - batch\n  resources:\n  - cronjobs\n  - jobs\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - extensions\n  resources:\n  - daemonsets\n  - deployments\n  - deployments/scale\n  - ingresses\n  - networkpolicies\n  - replicasets\n  - replicasets/scale\n  - replicationcontrollers/scale\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - policy\n  resources:\n  - poddisruptionbudgets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  - ingresses\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - storage.k8s.io\n  resources:\n  - storageclasses\n  - volumeattachments\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - clusterrolebindings\n  - clusterroles\n  - roles\n  - rolebindings\n  verbs:\n  - get\n  - list\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: flyte-sandbox-kubernetes-dashboard\nsubjects:\n- kind: ServiceAccount\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-cluster-role-binding\n  namespace: flyte\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: flyte-sandbox-cluster-role\nsubjects:\n- kind: ServiceAccount\n  name: flyte-sandbox\n  namespace: flyte\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard-readonly\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: flyte-sandbox-kubernetes-dashboard-readonly\nsubjects:\n- kind: ServiceAccount\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  namespace.yaml: |\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: '{{ namespace }}'\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-cluster-resource-templates\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  000-core.yaml: |\n    admin:\n      endpoint: localhost:8089\n      insecure: true\n    catalog-cache:\n      endpoint: localhost:8081\n      insecure: true\n      type: datacatalog\n    cluster_resources:\n      standaloneDeployment: false\n      templatePath: /etc/flyte/cluster-resource-templates\n    logger:\n      show-source: true\n      level: 5\n    propeller:\n      create-flyteworkflow-crd: true\n    webhook:\n      certDir: /var/run/flyte/certs\n      localCert: true\n      secretName: flyte-sandbox-webhook-secret\n      serviceName: flyte-sandbox-webhook\n      servicePort: 443\n    flyte:\n      admin:\n        disableClusterResourceManager: false\n        disableScheduler: false\n        disabled: false\n        seedProjects:\n        - flytesnacks\n        seedProjectsWithDetails:\n        - description: Default project setup.\n          name: flytesnacks\n      dataCatalog:\n        disabled: false\n      propeller:\n        disableWebhook: false\n        disabled: false\n  001-plugins.yaml: |\n    tasks:\n      task-plugins:\n        default-for-task-types:\n          container: container\n          container_array: k8s-array\n          sidecar: sidecar\n        enabled-plugins:\n        - container\n        - sidecar\n        - k8s-array\n        - connector-service\n        - echo\n    plugins:\n      logs:\n        kubernetes-enabled: true\n        kubernetes-template-uri: http://localhost:30080/kubernetes-dashboard/#/log/{{.namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\n        cloudwatch-enabled: false\n        stackdriver-enabled: false\n      k8s:\n        co-pilot:\n          image: \"cr.flyte.org/flyteorg/flytecopilot:v1.16.0-b4\"\n      k8s-array:\n        logs:\n          config:\n            kubernetes-enabled: true\n            kubernetes-template-uri: http://localhost:30080/kubernetes-dashboard/#/log/{{.namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\n            cloudwatch-enabled: false\n            stackdriver-enabled: false\n      connector-service:\n        defaultConnector:\n          defaultTimeout: 10s\n          endpoint: k8s://flyteconnector.flyte:8000\n          insecure: true\n          timeouts:\n            GetTask: 10s\n            ListAgents: 3s\n  002-database.yaml: |\n    database:\n      postgres:\n        username: postgres\n        host: flyte-sandbox-postgresql\n        port: 5432\n        dbname: flyte\n        options: \"sslmode=disable\"\n  003-storage.yaml: |\n    propeller:\n      rawoutput-prefix: s3://my-s3-bucket/data\n    storage:\n      type: stow\n      stow:\n        kind: s3\n        config:\n          region: us-east-1\n          disable_ssl: true\n          v2_signing: true\n          endpoint: http://flyte-sandbox-minio.flyte:9000\n          auth_type: accesskey\n      container: my-s3-bucket\n  100-inline-config.yaml: |\n    plugins:\n      k8s:\n        default-env-vars:\n        - FLYTE_AWS_ENDPOINT: http://flyte-sandbox-minio.flyte:9000\n        - FLYTE_AWS_ACCESS_KEY_ID: minio\n        - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage\n        - FLYTE_PLATFORM_URL: 'flyte-sandbox-grpc.flyte:8089'\n        - FLYTE_PLATFORM_INSECURE: true\n    storage:\n      signedURL:\n        stowConfigOverride:\n          endpoint: http://localhost:30002\n    task_resources:\n      defaults:\n        cpu: 500m\n        ephemeralStorage: 0\n        gpu: 0\n        memory: 1Gi\n      limits:\n        cpu: 0\n        ephemeralStorage: 0\n        gpu: 0\n        memory: 0\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-config\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  config.yml: |-\n    health:\n      storagedriver:\n        enabled: true\n        interval: 10s\n        threshold: 3\n    http:\n      addr: :5000\n      debug:\n        addr: :5001\n        prometheus:\n          enabled: false\n          path: /metrics\n      headers:\n        X-Content-Type-Options:\n        - nosniff\n    log:\n      fields:\n        service: registry\n    storage:\n      cache:\n        blobdescriptor: inmemory\n    version: 0.1\nkind: ConfigMap\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry-config\n  namespace: flyte\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: flyte-sandbox-extra-cluster-resource-templates\n  namespace: flyte\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: flyte-sandbox-extra-config\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  envoy.yaml: |\n    admin:\n        access_log_path: /dev/stdout\n    static_resources:\n        listeners:\n            - address:\n                  socket_address:\n                      address: 0.0.0.0\n                      port_value: 8000\n              filter_chains:\n                  - filters:\n                        - name: envoy.filters.network.http_connection_manager\n                          typed_config:\n                              \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                              stat_prefix: ingress_http\n                              codec_type: AUTO\n                              upgrade_configs:\n                                  - upgrade_type: websocket\n                              route_config:\n                                  name: local_route\n                                  virtual_hosts:\n                                      - name: backend\n                                        domains:\n                                            - \"*\"\n                                        routes:\n                                            - match:\n                                                  path: \"/\"\n                                              redirect:\n                                                  path_redirect: \"/console/\"\n                                            - match:\n                                                  prefix: \"/.well-known\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/__webpack_hmr\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/api\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/callback\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/config\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/console\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/healthcheck\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/login\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/logout\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/me\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/oauth2\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/v1\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/flyteidl.service.AdminService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.AuthMetadataService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.DataProxyService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.IdentityService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/grpc.health.v1.Health\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.SignalService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  path: \"/kubernetes-dashboard\"\n                                              redirect:\n                                                  path_redirect: \"/kubernetes-dashboard/\"\n                                            - match:\n                                                  prefix: \"/kubernetes-dashboard/\"\n                                              route:\n                                                  cluster: kubernetes-dashboard\n                                                  prefix_rewrite: /\n                                            - match:\n                                                  path: \"/minio\"\n                                              redirect:\n                                                  path_redirect: \"/minio/\"\n                                            - match:\n                                                  prefix: \"/minio/\"\n                                              route:\n                                                  cluster: minio\n                                                  prefix_rewrite: /\n                              http_filters:\n                                  - name: envoy.filters.http.router\n                                    typed_config:\n                                      \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n        clusters:\n            - name: flyte\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              load_assignment:\n                  cluster_name: flyte\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-http\n                                          port_value: 8088\n            - name: flyte_grpc\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              http2_protocol_options: {}\n              load_assignment:\n                  cluster_name: flyte_grpc\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-grpc\n                                          port_value: 8089\n            - name: kubernetes-dashboard\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              load_assignment:\n                  cluster_name: kubernetes-dashboard\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-kubernetes-dashboard\n                                          port_value: 80\n            - name: minio\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              load_assignment:\n                  cluster_name: minio\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-minio\n                                          port_value: 9001\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-proxy-config\n  namespace: flyte\n---\napiVersion: v1\ndata: null\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: kubernetes-dashboard-settings\n  namespace: flyte\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-config-secret\n  namespace: flyte\nstringData:\n  012-database-secrets.yaml: |\n    database:\n      postgres:\n        password: \"postgres\"\n  013-storage-secrets.yaml: |\n    storage:\n      stow:\n        config:\n          access_key_id: \"minio\"\n          secret_key: \"miniostorage\"\ntype: Opaque\n---\napiVersion: v1\ndata:\n  haSharedSecret: RVMxNzVuQnh4aHJ0Y3hNVg==\n  proxyPassword: \"\"\n  proxyUsername: \"\"\nkind: Secret\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry-secret\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard-certs\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\ndata:\n  root-password: bWluaW9zdG9yYWdl\n  root-user: bWluaW8=\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\ndata:\n  postgres-password: cG9zdGdyZXM=\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n  name: flyte-sandbox-postgresql\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\ndata:\n  username: User\nkind: Secret\nmetadata:\n  name: flyteconnector\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: kubernetes-dashboard-csrf\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: kubernetes-dashboard-key-holder\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry\n  namespace: flyte\nspec:\n  ports:\n  - name: http-5000\n    nodePort: 30000\n    port: 5000\n    protocol: TCP\n    targetPort: 5000\n  selector:\n    app: docker-registry\n    release: flyte-sandbox\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-grpc\n  namespace: flyte\nspec:\n  ports:\n  - name: grpc\n    nodePort: null\n    port: 8089\n    targetPort: grpc\n  selector:\n    app.kubernetes.io/component: flyte-binary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: flyte-sandbox\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-http\n  namespace: flyte\nspec:\n  ports:\n  - name: http\n    nodePort: null\n    port: 8088\n    targetPort: http\n  selector:\n    app.kubernetes.io/component: flyte-binary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: flyte-sandbox\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: kubernetes-dashboard\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n    kubernetes.io/cluster-service: \"true\"\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nspec:\n  ports:\n  - name: http\n    port: 80\n    targetPort: http\n  selector:\n    app.kubernetes.io/component: kubernetes-dashboard\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: kubernetes-dashboard\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\nspec:\n  externalTrafficPolicy: Cluster\n  ports:\n  - name: minio-api\n    nodePort: 30002\n    port: 9000\n    targetPort: minio-api\n  - name: minio-console\n    port: 9001\n    targetPort: minio-console\n  selector:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: minio\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n  name: flyte-sandbox-postgresql\n  namespace: flyte\nspec:\n  externalTrafficPolicy: Cluster\n  ports:\n  - name: tcp-postgresql\n    nodePort: 30001\n    port: 5432\n    targetPort: tcp-postgresql\n  selector:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: postgresql\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n    service.alpha.kubernetes.io/tolerate-unready-endpoints: \"true\"\n  name: flyte-sandbox-postgresql-hl\n  namespace: flyte\nspec:\n  clusterIP: None\n  ports:\n  - name: tcp-postgresql\n    port: 5432\n    targetPort: tcp-postgresql\n  publishNotReadyAddresses: true\n  selector:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: postgresql\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-proxy\n  namespace: flyte\nspec:\n  ports:\n  - name: http\n    nodePort: 30080\n    port: 8000\n    protocol: TCP\n  selector:\n    app.kubernetes.io/component: proxy\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: flyte-sandbox\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox-webhook\n  namespace: flyte\nspec:\n  ports:\n  - name: webhook\n    port: 443\n    targetPort: webhook\n  selector:\n    app.kubernetes.io/component: flyte-binary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: flyte-sandbox\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    projectcontour.io/upstream-protocol.h2c: grpc\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyteconnector\n    helm.sh/chart: flyteconnector-v0.1.10\n  name: flyteconnector\n  namespace: flyte\nspec:\n  ports:\n  - appProtocol: TCP\n    name: connector-grpc\n    port: 8000\n    protocol: TCP\n    targetPort: connector-grpc\n  selector:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: flyteconnector\n  type: ClusterIP\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-db-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  capacity:\n    storage: 1Gi\n  hostPath:\n    path: /var/lib/flyte/storage/db\n  storageClassName: manual\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-minio-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  capacity:\n    storage: 1Gi\n  hostPath:\n    path: /var/lib/flyte/storage/minio\n  storageClassName: manual\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-db-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: manual\n  volumeName: flyte-sandbox-db-storage\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-minio-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: manual\n  volumeName: flyte-sandbox-minio-storage\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.0\n    helm.sh/chart: flyte-binary-v0.1.10\n  name: flyte-sandbox\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: flyte-binary\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: flyte-sandbox\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        checksum/cluster-resource-templates: 6fd9b172465e3089fcc59f738b92b8dc4d8939360c19de8ee65f68b0e7422035\n        checksum/configuration: 4f72be5281dcae442947c45ddc4a22827158587627d1913be0dbf30c42131172\n        checksum/configuration-secret: 09216ffaa3d29e14f88b1f30af580d02a2a5e014de4d750b7f275cc07ed4e914\n      labels:\n        app.kubernetes.io/component: flyte-binary\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/name: flyte-sandbox\n    spec:\n      containers:\n      - args:\n        - start\n        - --config\n        - /etc/flyte/config.d/*.yaml\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: flyte-binary:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          httpGet:\n            path: /healthcheck\n            port: http\n          initialDelaySeconds: 30\n        name: flyte\n        ports:\n        - containerPort: 8088\n          name: http\n        - containerPort: 8089\n          name: grpc\n        - containerPort: 9443\n          name: webhook\n        readinessProbe:\n          httpGet:\n            path: /healthcheck\n            port: http\n          initialDelaySeconds: 30\n        volumeMounts:\n        - mountPath: /etc/flyte/cluster-resource-templates\n          name: cluster-resource-templates\n        - mountPath: /etc/flyte/config.d\n          name: config\n        - mountPath: /var/run/flyte\n          name: state\n      initContainers:\n      - args:\n        - |\n          until pg_isready \\\n            -h flyte-sandbox-postgresql \\\n            -p 5432 \\\n            -U postgres\n          do\n            echo waiting for database\n            sleep 0.1\n          done\n        command:\n        - sh\n        - -ec\n        image: bitnami/postgresql:sandbox\n        imagePullPolicy: Never\n        name: wait-for-db\n      serviceAccountName: flyte-sandbox\n      volumes:\n      - name: cluster-resource-templates\n        projected:\n          sources:\n          - configMap:\n              name: flyte-sandbox-cluster-resource-templates\n          - configMap:\n              name: flyte-sandbox-extra-cluster-resource-templates\n      - name: config\n        projected:\n          sources:\n          - configMap:\n              name: flyte-sandbox-config\n          - secret:\n              name: flyte-sandbox-config-secret\n          - configMap:\n              name: flyte-sandbox-extra-config\n      - emptyDir: {}\n        name: state\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-buildkit\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: buildkit\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: flyte-sandbox\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: buildkit\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/name: flyte-sandbox\n    spec:\n      containers:\n      - args:\n        - --addr\n        - unix:///run/buildkit/buildkitd.sock\n        - --addr\n        - tcp://0.0.0.0:30003\n        image: moby/buildkit:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          exec:\n            command:\n            - buildctl\n            - debug\n            - workers\n          initialDelaySeconds: 5\n          periodSeconds: 30\n        name: buildkit\n        ports:\n        - containerPort: 30003\n          name: tcp\n          protocol: TCP\n        readinessProbe:\n          exec:\n            command:\n            - buildctl\n            - debug\n            - workers\n          initialDelaySeconds: 5\n          periodSeconds: 30\n        securityContext:\n          privileged: true\n      dnsPolicy: ClusterFirstWithHostNet\n      hostNetwork: true\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry\n  namespace: flyte\nspec:\n  minReadySeconds: 5\n  replicas: 1\n  selector:\n    matchLabels:\n      app: docker-registry\n      release: flyte-sandbox\n  template:\n    metadata:\n      annotations:\n        checksum/config: 8f50e768255a87f078ba8b9879a0c174c3e045ffb46ac8723d2eedbe293c8d81\n        checksum/secret: f75b24367e90266031e255ddba64450a00364b2834b7a37c0611c77cb105bdf7\n      labels:\n        app: docker-registry\n        release: flyte-sandbox\n    spec:\n      containers:\n      - command:\n        - /bin/registry\n        - serve\n        - /etc/docker/registry/config.yml\n        env:\n        - name: REGISTRY_HTTP_SECRET\n          valueFrom:\n            secretKeyRef:\n              key: haSharedSecret\n              name: flyte-sandbox-docker-registry-secret\n        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY\n          value: /var/lib/registry\n        image: registry:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 5000\n        name: docker-registry\n        ports:\n        - containerPort: 5000\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 5000\n        resources: {}\n        volumeMounts:\n        - mountPath: /etc/docker/registry\n          name: flyte-sandbox-docker-registry-config\n        - mountPath: /var/lib/registry/\n          name: data\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n      volumes:\n      - configMap:\n          name: flyte-sandbox-docker-registry-config\n        name: flyte-sandbox-docker-registry-config\n      - emptyDir: {}\n        name: data\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/component: kubernetes-dashboard\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: kubernetes-dashboard\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: kubernetes-dashboard\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations: null\n      labels:\n        app.kubernetes.io/component: kubernetes-dashboard\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: kubernetes-dashboard\n        app.kubernetes.io/version: 2.7.0\n        helm.sh/chart: kubernetes-dashboard-6.0.0\n    spec:\n      containers:\n      - args:\n        - --namespace=flyte\n        - --metrics-provider=none\n        - --enable-insecure-login\n        - --enable-skip-login\n        image: kubernetesui/dashboard:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 9090\n            scheme: HTTP\n          initialDelaySeconds: 30\n          timeoutSeconds: 30\n        name: kubernetes-dashboard\n        ports:\n        - containerPort: 9090\n          name: http\n          protocol: TCP\n        resources:\n          limits:\n            cpu: 2\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsGroup: 2001\n          runAsUser: 1001\n        volumeMounts:\n        - mountPath: /certs\n          name: kubernetes-dashboard-certs\n        - mountPath: /tmp\n          name: tmp-volume\n      securityContext:\n        seccompProfile:\n          type: RuntimeDefault\n      serviceAccountName: flyte-sandbox-kubernetes-dashboard\n      volumes:\n      - name: kubernetes-dashboard-certs\n        secret:\n          secretName: flyte-sandbox-kubernetes-dashboard-certs\n      - emptyDir: {}\n        name: tmp-volume\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: minio\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        checksum/credentials-secret: ecce809e3af19025d134846a9a81e163dd41df7e26abf2c6657895d9d13607a9\n      labels:\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: minio\n        helm.sh/chart: minio-12.6.7\n    spec:\n      affinity:\n        nodeAffinity: null\n        podAffinity: null\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchLabels:\n                  app.kubernetes.io/instance: flyte-sandbox\n                  app.kubernetes.io/name: minio\n              topologyKey: kubernetes.io/hostname\n            weight: 1\n      containers:\n      - env:\n        - name: BITNAMI_DEBUG\n          value: \"false\"\n        - name: MINIO_SCHEME\n          value: http\n        - name: MINIO_FORCE_NEW_KEYS\n          value: \"no\"\n        - name: MINIO_ROOT_USER\n          valueFrom:\n            secretKeyRef:\n              key: root-user\n              name: flyte-sandbox-minio\n        - name: MINIO_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              key: root-password\n              name: flyte-sandbox-minio\n        - name: MINIO_DEFAULT_BUCKETS\n          value: my-s3-bucket\n        - name: MINIO_BROWSER\n          value: \"on\"\n        - name: MINIO_PROMETHEUS_AUTH_TYPE\n          value: public\n        - name: MINIO_CONSOLE_PORT_NUMBER\n          value: \"9001\"\n        - name: MINIO_BROWSER_REDIRECT_URL\n          value: http://localhost:30080/minio\n        envFrom: null\n        image: docker.io/bitnami/minio:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          failureThreshold: 5\n          httpGet:\n            path: /minio/health/live\n            port: minio-api\n            scheme: HTTP\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: minio\n        ports:\n        - containerPort: 9000\n          name: minio-api\n          protocol: TCP\n        - containerPort: 9001\n          name: minio-console\n          protocol: TCP\n        readinessProbe:\n          failureThreshold: 5\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n          tcpSocket:\n            port: minio-api\n          timeoutSeconds: 1\n        resources:\n          limits: {}\n          requests: {}\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 1001\n        volumeMounts:\n        - mountPath: /data\n          name: data\n      initContainers:\n      - command:\n        - /bin/bash\n        - -ec\n        - |\n          chown -R 1001:1001 /data\n        image: docker.io/bitnami/os-shell:sandbox\n        imagePullPolicy: Never\n        name: volume-permissions\n        resources:\n          limits: {}\n          requests: {}\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - mountPath: /data\n          name: data\n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: flyte-sandbox-minio\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: flyte-sandbox-minio-storage\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-proxy\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: proxy\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: flyte-sandbox\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: proxy\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/name: flyte-sandbox\n    spec:\n      containers:\n      - image: envoyproxy/envoy:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          initialDelaySeconds: 30\n          tcpSocket:\n            port: http\n        name: proxy\n        ports:\n        - containerPort: 8000\n          name: http\n        readinessProbe:\n          tcpSocket:\n            port: http\n        volumeMounts:\n        - mountPath: /etc/envoy\n          name: config\n      volumes:\n      - configMap:\n          name: flyte-sandbox-proxy-config\n        name: config\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyteconnector\n    helm.sh/chart: flyteconnector-v0.1.10\n  name: flyteconnector\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: flyteconnector\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: flyteconnector\n        helm.sh/chart: flyteconnector-v0.1.10\n    spec:\n      containers:\n      - command:\n        - pyflyte\n        - serve\n        - agent\n        env:\n        - name: FLYTE_AWS_ENDPOINT\n          value: http://flyte-sandbox-minio.flyte:9000\n        - name: FLYTE_AWS_ACCESS_KEY_ID\n          value: minio\n        - name: FLYTE_AWS_SECRET_ACCESS_KEY\n          value: miniostorage\n        image: cr.flyte.org/flyteorg/flyteagent:1.15.3\n        imagePullPolicy: IfNotPresent\n        name: flyteconnector\n        ports:\n        - containerPort: 8000\n          name: connector-grpc\n        readinessProbe:\n          grpc:\n            port: 8000\n          initialDelaySeconds: 1\n          periodSeconds: 3\n        resources:\n          limits:\n            cpu: 500m\n            ephemeral-storage: 200Mi\n            memory: 300Mi\n          requests:\n            cpu: 500m\n            ephemeral-storage: 200Mi\n            memory: 200Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n        volumeMounts:\n        - mountPath: /etc/secrets\n          name: flyteconnector\n      securityContext: {}\n      serviceAccountName: flyteconnector\n      volumes:\n      - name: flyteconnector\n        secret:\n          secretName: flyteconnector\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n  name: flyte-sandbox-postgresql\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: primary\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: postgresql\n  serviceName: flyte-sandbox-postgresql-hl\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: primary\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: postgresql\n        helm.sh/chart: postgresql-12.8.1\n      name: flyte-sandbox-postgresql\n    spec:\n      affinity:\n        nodeAffinity: null\n        podAffinity: null\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchLabels:\n                  app.kubernetes.io/component: primary\n                  app.kubernetes.io/instance: flyte-sandbox\n                  app.kubernetes.io/name: postgresql\n              topologyKey: kubernetes.io/hostname\n            weight: 1\n      containers:\n      - env:\n        - name: BITNAMI_DEBUG\n          value: \"false\"\n        - name: POSTGRESQL_PORT_NUMBER\n          value: \"5432\"\n        - name: POSTGRESQL_VOLUME_DIR\n          value: /bitnami/postgresql\n        - name: PGDATA\n          value: /bitnami/postgresql/data\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              key: postgres-password\n              name: flyte-sandbox-postgresql\n        - name: POSTGRESQL_ENABLE_LDAP\n          value: \"no\"\n        - name: POSTGRESQL_ENABLE_TLS\n          value: \"no\"\n        - name: POSTGRESQL_LOG_HOSTNAME\n          value: \"false\"\n        - name: POSTGRESQL_LOG_CONNECTIONS\n          value: \"false\"\n        - name: POSTGRESQL_LOG_DISCONNECTIONS\n          value: \"false\"\n        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG\n          value: \"off\"\n        - name: POSTGRESQL_CLIENT_MIN_MESSAGES\n          value: error\n        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES\n          value: pgaudit\n        image: docker.io/bitnami/postgresql:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n          failureThreshold: 6\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: postgresql\n        ports:\n        - containerPort: 5432\n          name: tcp-postgresql\n        readinessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - -e\n            - |\n              exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n          failureThreshold: 6\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        resources:\n          limits: {}\n          requests:\n            cpu: 250m\n            memory: 256Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          runAsGroup: 0\n          runAsNonRoot: true\n          runAsUser: 1001\n          seccompProfile:\n            type: RuntimeDefault\n        volumeMounts:\n        - mountPath: /bitnami/postgresql\n          name: data\n      hostIPC: false\n      hostNetwork: false\n      initContainers:\n      - command:\n        - /bin/sh\n        - -ec\n        - |\n          chown 1001:1001 /bitnami/postgresql\n          mkdir -p /bitnami/postgresql/data\n          chmod 700 /bitnami/postgresql/data\n          find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name \"conf\" -not -name \".snapshot\" -not -name \"lost+found\" | \\\n            xargs -r chown -R 1001:1001\n        image: docker.io/bitnami/os-shell:sandbox\n        imagePullPolicy: Never\n        name: init-chmod-data\n        resources:\n          limits: {}\n          requests: {}\n        securityContext:\n          runAsGroup: 0\n          runAsNonRoot: false\n          runAsUser: 0\n          seccompProfile:\n            type: RuntimeDefault\n        volumeMounts:\n        - mountPath: /bitnami/postgresql\n          name: data\n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: default\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: flyte-sandbox-db-storage\n  updateStrategy:\n    rollingUpdate: {}\n    type: RollingUpdate\n",
        "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: flyte\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\n---\napiVersion: v1\nautomountServiceAccountToken: true\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\nsecrets:\n- name: flyte-sandbox-minio\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nrules:\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - kubernetes-dashboard-key-holder\n  - kubernetes-dashboard-certs\n  - kubernetes-dashboard-csrf\n  resources:\n  - secrets\n  verbs:\n  - get\n  - update\n  - delete\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - kubernetes-dashboard-settings\n  resources:\n  - configmaps\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - heapster\n  - dashboard-metrics-scraper\n  resources:\n  - services\n  verbs:\n  - proxy\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - heapster\n  - 'http:heapster:'\n  - 'https:heapster:'\n  - dashboard-metrics-scraper\n  - http:dashboard-metrics-scraper\n  resources:\n  - services/proxy\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard-readonly\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - configmaps\n  - endpoints\n  - persistentvolumeclaims\n  - pods\n  - replicationcontrollers\n  - replicationcontrollers/scale\n  - serviceaccounts\n  - services\n  - nodes\n  - persistentvolumeclaims\n  - persistentvolumes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - bindings\n  - events\n  - limitranges\n  - namespaces/status\n  - pods/log\n  - pods/status\n  - replicationcontrollers/status\n  - resourcequotas\n  - resourcequotas/status\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apps\n  resources:\n  - daemonsets\n  - deployments\n  - deployments/scale\n  - replicasets\n  - replicasets/scale\n  - statefulsets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - autoscaling\n  resources:\n  - horizontalpodautoscalers\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - batch\n  resources:\n  - cronjobs\n  - jobs\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - extensions\n  resources:\n  - daemonsets\n  - deployments\n  - deployments/scale\n  - ingresses\n  - networkpolicies\n  - replicasets\n  - replicasets/scale\n  - replicationcontrollers/scale\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - policy\n  resources:\n  - poddisruptionbudgets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  - ingresses\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - storage.k8s.io\n  resources:\n  - storageclasses\n  - volumeattachments\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - clusterrolebindings\n  - clusterroles\n  - roles\n  - rolebindings\n  verbs:\n  - get\n  - list\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: flyte-sandbox-kubernetes-dashboard\nsubjects:\n- kind: ServiceAccount\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard-readonly\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: flyte-sandbox-kubernetes-dashboard-readonly\nsubjects:\n- kind: ServiceAccount\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  config.yml: |-\n    health:\n      storagedriver:\n        enabled: true\n        interval: 10s\n        threshold: 3\n    http:\n      addr: :5000\n      debug:\n        addr: :5001\n        prometheus:\n          enabled: false\n          path: /metrics\n      headers:\n        X-Content-Type-Options:\n        - nosniff\n    log:\n      fields:\n        service: registry\n    storage:\n      cache:\n        blobdescriptor: inmemory\n    version: 0.1\nkind: ConfigMap\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry-config\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  envoy.yaml: |\n    admin:\n        access_log_path: /dev/stdout\n    static_resources:\n        listeners:\n            - address:\n                  socket_address:\n                      address: 0.0.0.0\n                      port_value: 8000\n              filter_chains:\n                  - filters:\n                        - name: envoy.filters.network.http_connection_manager\n                          typed_config:\n                              \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                              stat_prefix: ingress_http\n                              codec_type: AUTO\n                              upgrade_configs:\n                                  - upgrade_type: websocket\n                              route_config:\n                                  name: local_route\n                                  virtual_hosts:\n                                      - name: backend\n                                        domains:\n                                            - \"*\"\n                                        routes:\n                                            - match:\n                                                  path: \"/\"\n                                              redirect:\n                                                  path_redirect: \"/console/\"\n                                            - match:\n                                                  prefix: \"/.well-known\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/__webpack_hmr\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/api\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/callback\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/config\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/console\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/healthcheck\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/login\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/logout\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/me\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/oauth2\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/v1\"\n                                              route:\n                                                  cluster: flyte\n                                            - match:\n                                                  prefix: \"/flyteidl.service.AdminService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.AuthMetadataService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.DataProxyService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.IdentityService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/grpc.health.v1.Health\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  prefix: \"/flyteidl.service.SignalService\"\n                                              route:\n                                                  cluster: flyte_grpc\n                                            - match:\n                                                  path: \"/kubernetes-dashboard\"\n                                              redirect:\n                                                  path_redirect: \"/kubernetes-dashboard/\"\n                                            - match:\n                                                  prefix: \"/kubernetes-dashboard/\"\n                                              route:\n                                                  cluster: kubernetes-dashboard\n                                                  prefix_rewrite: /\n                                            - match:\n                                                  path: \"/minio\"\n                                              redirect:\n                                                  path_redirect: \"/minio/\"\n                                            - match:\n                                                  prefix: \"/minio/\"\n                                              route:\n                                                  cluster: minio\n                                                  prefix_rewrite: /\n                              http_filters:\n                                  - name: envoy.filters.http.router\n                                    typed_config:\n                                      \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n        clusters:\n            - name: flyte\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              load_assignment:\n                  cluster_name: flyte\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-local\n                                          port_value: 8088\n            - name: flyte_grpc\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              http2_protocol_options: {}\n              load_assignment:\n                  cluster_name: flyte_grpc\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-local\n                                          port_value: 8089\n            - name: kubernetes-dashboard\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              load_assignment:\n                  cluster_name: kubernetes-dashboard\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-kubernetes-dashboard\n                                          port_value: 80\n            - name: minio\n              connect_timeout: 0.25s\n              type: STRICT_DNS\n              lb_policy: ROUND_ROBIN\n              load_assignment:\n                  cluster_name: minio\n                  endpoints:\n                      - lb_endpoints:\n                            - endpoint:\n                                  address:\n                                      socket_address:\n                                          address: flyte-sandbox-minio\n                                          port_value: 9001\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-proxy-config\n  namespace: flyte\n---\napiVersion: v1\ndata: null\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: kubernetes-dashboard-settings\n  namespace: flyte\n---\napiVersion: v1\ndata:\n  haSharedSecret: RTVvVEFYYlRUWnU4TGRUYQ==\n  proxyPassword: \"\"\n  proxyUsername: \"\"\nkind: Secret\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry-secret\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard-certs\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\ndata:\n  root-password: bWluaW9zdG9yYWdl\n  root-user: bWluaW8=\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\ndata:\n  postgres-password: cG9zdGdyZXM=\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n  name: flyte-sandbox-postgresql\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: kubernetes-dashboard-csrf\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: kubernetes-dashboard-key-holder\n  namespace: flyte\ntype: Opaque\n---\napiVersion: v1\nkind: Endpoints\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-local\n  namespace: flyte\nsubsets:\n- addresses:\n  - ip: '%{HOST_GATEWAY_IP}%'\n  ports:\n  - name: http\n    port: 8088\n    protocol: TCP\n  - name: grpc\n    port: 8089\n    protocol: TCP\n  - name: webhook\n    port: 9443\n    protocol: TCP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry\n  namespace: flyte\nspec:\n  ports:\n  - name: http-5000\n    nodePort: 30000\n    port: 5000\n    protocol: TCP\n    targetPort: 5000\n  selector:\n    app: docker-registry\n    release: flyte-sandbox\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: kubernetes-dashboard\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n    kubernetes.io/cluster-service: \"true\"\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nspec:\n  ports:\n  - name: http\n    port: 80\n    targetPort: http\n  selector:\n    app.kubernetes.io/component: kubernetes-dashboard\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: kubernetes-dashboard\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-local\n  namespace: flyte\nspec:\n  clusterIP: None\n  ports:\n  - name: http\n    port: 8088\n    protocol: TCP\n  - name: grpc\n    port: 8089\n    protocol: TCP\n  - name: webhook\n    port: 9443\n    protocol: TCP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\nspec:\n  externalTrafficPolicy: Cluster\n  ports:\n  - name: minio-api\n    nodePort: 30002\n    port: 9000\n    targetPort: minio-api\n  - name: minio-console\n    port: 9001\n    targetPort: minio-console\n  selector:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: minio\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n  name: flyte-sandbox-postgresql\n  namespace: flyte\nspec:\n  externalTrafficPolicy: Cluster\n  ports:\n  - name: tcp-postgresql\n    nodePort: 30001\n    port: 5432\n    targetPort: tcp-postgresql\n  selector:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: postgresql\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n    service.alpha.kubernetes.io/tolerate-unready-endpoints: \"true\"\n  name: flyte-sandbox-postgresql-hl\n  namespace: flyte\nspec:\n  clusterIP: None\n  ports:\n  - name: tcp-postgresql\n    port: 5432\n    targetPort: tcp-postgresql\n  publishNotReadyAddresses: true\n  selector:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: postgresql\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-proxy\n  namespace: flyte\nspec:\n  ports:\n  - name: http\n    nodePort: 30080\n    port: 8000\n    protocol: TCP\n  selector:\n    app.kubernetes.io/component: proxy\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/name: flyte-sandbox\n  type: NodePort\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-db-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  capacity:\n    storage: 1Gi\n  hostPath:\n    path: /var/lib/flyte/storage/db\n  storageClassName: manual\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-minio-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  capacity:\n    storage: 1Gi\n  hostPath:\n    path: /var/lib/flyte/storage/minio\n  storageClassName: manual\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-db-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: manual\n  volumeName: flyte-sandbox-db-storage\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-minio-storage\n  namespace: flyte\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: manual\n  volumeName: flyte-sandbox-minio-storage\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-buildkit\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: buildkit\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: flyte-sandbox\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: buildkit\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/name: flyte-sandbox\n    spec:\n      containers:\n      - args:\n        - --addr\n        - unix:///run/buildkit/buildkitd.sock\n        - --addr\n        - tcp://0.0.0.0:30003\n        image: moby/buildkit:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          exec:\n            command:\n            - buildctl\n            - debug\n            - workers\n          initialDelaySeconds: 5\n          periodSeconds: 30\n        name: buildkit\n        ports:\n        - containerPort: 30003\n          name: tcp\n          protocol: TCP\n        readinessProbe:\n          exec:\n            command:\n            - buildctl\n            - debug\n            - workers\n          initialDelaySeconds: 5\n          periodSeconds: 30\n        securityContext:\n          privileged: true\n      dnsPolicy: ClusterFirstWithHostNet\n      hostNetwork: true\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: docker-registry\n    chart: docker-registry-2.2.2\n    heritage: Helm\n    release: flyte-sandbox\n  name: flyte-sandbox-docker-registry\n  namespace: flyte\nspec:\n  minReadySeconds: 5\n  replicas: 1\n  selector:\n    matchLabels:\n      app: docker-registry\n      release: flyte-sandbox\n  template:\n    metadata:\n      annotations:\n        checksum/config: 8f50e768255a87f078ba8b9879a0c174c3e045ffb46ac8723d2eedbe293c8d81\n        checksum/secret: af283975f133022af6b0fa9b099656108d0e3cefbd46adf0eaf3065f1b707ca3\n      labels:\n        app: docker-registry\n        release: flyte-sandbox\n    spec:\n      containers:\n      - command:\n        - /bin/registry\n        - serve\n        - /etc/docker/registry/config.yml\n        env:\n        - name: REGISTRY_HTTP_SECRET\n          valueFrom:\n            secretKeyRef:\n              key: haSharedSecret\n              name: flyte-sandbox-docker-registry-secret\n        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY\n          value: /var/lib/registry\n        image: registry:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 5000\n        name: docker-registry\n        ports:\n        - containerPort: 5000\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 5000\n        resources: {}\n        volumeMounts:\n        - mountPath: /etc/docker/registry\n          name: flyte-sandbox-docker-registry-config\n        - mountPath: /var/lib/registry/\n          name: data\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n      volumes:\n      - configMap:\n          name: flyte-sandbox-docker-registry-config\n        name: flyte-sandbox-docker-registry-config\n      - emptyDir: {}\n        name: data\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/component: kubernetes-dashboard\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: kubernetes-dashboard\n    app.kubernetes.io/version: 2.7.0\n    helm.sh/chart: kubernetes-dashboard-6.0.0\n  name: flyte-sandbox-kubernetes-dashboard\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: kubernetes-dashboard\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: kubernetes-dashboard\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations: null\n      labels:\n        app.kubernetes.io/component: kubernetes-dashboard\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: kubernetes-dashboard\n        app.kubernetes.io/version: 2.7.0\n        helm.sh/chart: kubernetes-dashboard-6.0.0\n    spec:\n      containers:\n      - args:\n        - --namespace=flyte\n        - --metrics-provider=none\n        - --enable-insecure-login\n        - --enable-skip-login\n        image: kubernetesui/dashboard:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 9090\n            scheme: HTTP\n          initialDelaySeconds: 30\n          timeoutSeconds: 30\n        name: kubernetes-dashboard\n        ports:\n        - containerPort: 9090\n          name: http\n          protocol: TCP\n        resources:\n          limits:\n            cpu: 2\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsGroup: 2001\n          runAsUser: 1001\n        volumeMounts:\n        - mountPath: /certs\n          name: kubernetes-dashboard-certs\n        - mountPath: /tmp\n          name: tmp-volume\n      securityContext:\n        seccompProfile:\n          type: RuntimeDefault\n      serviceAccountName: flyte-sandbox-kubernetes-dashboard\n      volumes:\n      - name: kubernetes-dashboard-certs\n        secret:\n          secretName: flyte-sandbox-kubernetes-dashboard-certs\n      - emptyDir: {}\n        name: tmp-volume\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: minio\n    helm.sh/chart: minio-12.6.7\n  name: flyte-sandbox-minio\n  namespace: flyte\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: minio\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        checksum/credentials-secret: ecce809e3af19025d134846a9a81e163dd41df7e26abf2c6657895d9d13607a9\n      labels:\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: minio\n        helm.sh/chart: minio-12.6.7\n    spec:\n      affinity:\n        nodeAffinity: null\n        podAffinity: null\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchLabels:\n                  app.kubernetes.io/instance: flyte-sandbox\n                  app.kubernetes.io/name: minio\n              topologyKey: kubernetes.io/hostname\n            weight: 1\n      containers:\n      - env:\n        - name: BITNAMI_DEBUG\n          value: \"false\"\n        - name: MINIO_SCHEME\n          value: http\n        - name: MINIO_FORCE_NEW_KEYS\n          value: \"no\"\n        - name: MINIO_ROOT_USER\n          valueFrom:\n            secretKeyRef:\n              key: root-user\n              name: flyte-sandbox-minio\n        - name: MINIO_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              key: root-password\n              name: flyte-sandbox-minio\n        - name: MINIO_DEFAULT_BUCKETS\n          value: my-s3-bucket\n        - name: MINIO_BROWSER\n          value: \"on\"\n        - name: MINIO_PROMETHEUS_AUTH_TYPE\n          value: public\n        - name: MINIO_CONSOLE_PORT_NUMBER\n          value: \"9001\"\n        - name: MINIO_BROWSER_REDIRECT_URL\n          value: http://localhost:30080/minio\n        envFrom: null\n        image: docker.io/bitnami/minio:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          failureThreshold: 5\n          httpGet:\n            path: /minio/health/live\n            port: minio-api\n            scheme: HTTP\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: minio\n        ports:\n        - containerPort: 9000\n          name: minio-api\n          protocol: TCP\n        - containerPort: 9001\n          name: minio-console\n          protocol: TCP\n        readinessProbe:\n          failureThreshold: 5\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          successThreshold: 1\n          tcpSocket:\n            port: minio-api\n          timeoutSeconds: 1\n        resources:\n          limits: {}\n          requests: {}\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 1001\n        volumeMounts:\n        - mountPath: /data\n          name: data\n      initContainers:\n      - command:\n        - /bin/bash\n        - -ec\n        - |\n          chown -R 1001:1001 /data\n        image: docker.io/bitnami/os-shell:sandbox\n        imagePullPolicy: Never\n        name: volume-permissions\n        resources:\n          limits: {}\n          requests: {}\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - mountPath: /data\n          name: data\n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: flyte-sandbox-minio\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: flyte-sandbox-minio-storage\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: flyte-sandbox\n    app.kubernetes.io/version: 1.16.1\n    helm.sh/chart: flyte-sandbox-0.1.0\n  name: flyte-sandbox-proxy\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: proxy\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: flyte-sandbox\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: proxy\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/name: flyte-sandbox\n    spec:\n      containers:\n      - image: envoyproxy/envoy:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          initialDelaySeconds: 30\n          tcpSocket:\n            port: http\n        name: proxy\n        ports:\n        - containerPort: 8000\n          name: http\n        readinessProbe:\n          tcpSocket:\n            port: http\n        volumeMounts:\n        - mountPath: /etc/envoy\n          name: config\n      volumes:\n      - configMap:\n          name: flyte-sandbox-proxy-config\n        name: config\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app.kubernetes.io/component: primary\n    app.kubernetes.io/instance: flyte-sandbox\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: postgresql\n    helm.sh/chart: postgresql-12.8.1\n  name: flyte-sandbox-postgresql\n  namespace: flyte\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: primary\n      app.kubernetes.io/instance: flyte-sandbox\n      app.kubernetes.io/name: postgresql\n  serviceName: flyte-sandbox-postgresql-hl\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: primary\n        app.kubernetes.io/instance: flyte-sandbox\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/name: postgresql\n        helm.sh/chart: postgresql-12.8.1\n      name: flyte-sandbox-postgresql\n    spec:\n      affinity:\n        nodeAffinity: null\n        podAffinity: null\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchLabels:\n                  app.kubernetes.io/component: primary\n                  app.kubernetes.io/instance: flyte-sandbox\n                  app.kubernetes.io/name: postgresql\n              topologyKey: kubernetes.io/hostname\n            weight: 1\n      containers:\n      - env:\n        - name: BITNAMI_DEBUG\n          value: \"false\"\n        - name: POSTGRESQL_PORT_NUMBER\n          value: \"5432\"\n        - name: POSTGRESQL_VOLUME_DIR\n          value: /bitnami/postgresql\n        - name: PGDATA\n          value: /bitnami/postgresql/data\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              key: postgres-password\n              name: flyte-sandbox-postgresql\n        - name: POSTGRESQL_ENABLE_LDAP\n          value: \"no\"\n        - name: POSTGRESQL_ENABLE_TLS\n          value: \"no\"\n        - name: POSTGRESQL_LOG_HOSTNAME\n          value: \"false\"\n        - name: POSTGRESQL_LOG_CONNECTIONS\n          value: \"false\"\n        - name: POSTGRESQL_LOG_DISCONNECTIONS\n          value: \"false\"\n        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG\n          value: \"off\"\n        - name: POSTGRESQL_CLIENT_MIN_MESSAGES\n          value: error\n        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES\n          value: pgaudit\n        image: docker.io/bitnami/postgresql:sandbox\n        imagePullPolicy: Never\n        livenessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n          failureThreshold: 6\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: postgresql\n        ports:\n        - containerPort: 5432\n          name: tcp-postgresql\n        readinessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - -e\n            - |\n              exec pg_isready -U \"postgres\" -h 127.0.0.1 -p 5432\n              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]\n          failureThreshold: 6\n          initialDelaySeconds: 5\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        resources:\n          limits: {}\n          requests:\n            cpu: 250m\n            memory: 256Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          runAsGroup: 0\n          runAsNonRoot: true\n          runAsUser: 1001\n          seccompProfile:\n            type: RuntimeDefault\n        volumeMounts:\n        - mountPath: /bitnami/postgresql\n          name: data\n      hostIPC: false\n      hostNetwork: false\n      initContainers:\n      - command:\n        - /bin/sh\n        - -ec\n        - |\n          chown 1001:1001 /bitnami/postgresql\n          mkdir -p /bitnami/postgresql/data\n          chmod 700 /bitnami/postgresql/data\n          find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name \"conf\" -not -name \".snapshot\" -not -name \"lost+found\" | \\\n            xargs -r chown -R 1001:1001\n        image: docker.io/bitnami/os-shell:sandbox\n        imagePullPolicy: Never\n        name: init-chmod-data\n        resources:\n          limits: {}\n          requests: {}\n        securityContext:\n          runAsGroup: 0\n          runAsNonRoot: false\n          runAsUser: 0\n          seccompProfile:\n            type: RuntimeDefault\n        volumeMounts:\n        - mountPath: /bitnami/postgresql\n          name: data\n      securityContext:\n        fsGroup: 1001\n      serviceAccountName: default\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: flyte-sandbox-db-storage\n  updateStrategy:\n    rollingUpdate: {}\n    type: RollingUpdate\n"
      ],
      "alert_channels": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyte-single-binary-local.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete-connector.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/dev.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytestdlib/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.10.6.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.6.0-b1.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.10.7.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.16.0-b0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.0-rc0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.11.1-b1.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.12.0-b0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.6.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.12.1-rc0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v0.3.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteadmin/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb_python/flyteidl/admin/common_pb2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-keycloak-idp-flyteclients-without-browser.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/propeller/webhook.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/templates/propeller/webhook-hpa.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-sandbox/templates/local/service.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-sandbox/templates/local/endpoint.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/templates/deployment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/templates/clusterrole.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/templates/configmap.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-binary/templates/service/webhook.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-deps/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-deps/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-deps/values-sandbox.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-deps/templates/webhook/service.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/conf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/index.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/development_lifecycle/migrating_from_airflow_to_flyte.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/productionizing/notifications.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/productionizing/secrets.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/productionizing/workflow_labels_and_annotations.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/flyte_agents/developing_agents.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/RFC-0000-Template.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/0007-community-groups.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/0008-community-plugins.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/1893-caching-of-offloaded-objects.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/5103-offloaded-literal.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/system/RFC-5659-execution-concurrency.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/test/flyte_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox-binary/flyte_sandbox_binary_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_dataplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_dataplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_aws_scheduler_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox/flyte_sandbox_deps_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytepropeller/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytepropeller/propeller-config.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytectl/README.md"
      ]
    },
    "rubric": {
      "5": "clear prod alert rules + alert channels configured",
      "4": "rules present with some channels",
      "3": "basic rules only",
      "2": "stubs only",
      "1": "no monitoring config"
    }
  },
  "validation_readiness": {
    "metric_id": "validation_artifacts_readiness_band",
    "evidence": {
      "explainability": [],
      "bias": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.14.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.1.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.10.7.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/CHANGELOG/CHANGELOG-v1.13.1-rc0.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/PULL_REQUEST_TEMPLATE.md"
      ],
      "validation_schemas": [],
      "model_cards": [],
      "data_validation_libs": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/monodocs-environment.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/conf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/data_types_and_io/structureddataset.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/extending/index.md"
      ]
    },
    "rubric": {
      "5": "bias + explainability + validation schema + model card",
      "4": "three of the above",
      "3": "two of the above",
      "2": "one present",
      "1": "none present"
    }
  },
  "lineage_readiness": {
    "metric_id": "lineage_practices_readiness_band",
    "evidence": {
      "git_sha_logging": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/Makefile",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteadmin/Makefile",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/flyte_fundamentals/registering_workflows.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytectl/Makefile"
      ],
      "data_refs": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyte-single-binary-local.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete-connector.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docker/sandbox-bundled/manifests/complete.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteplugins/go/tasks/plugins/array/awsbatch/testdata/cr.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteplugins/go/tasks/pluginmachinery/flytek8s/testdata/imagepull-failurepod.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/cacheservice/cacheservice.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/service/signal.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/service/agent.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/service/external_plugin_service.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/service/dataproxy.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb-go/gateway/flyteidl/datacatalog/datacatalog.swagger.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb_python/flyteidl/core/catalog_pb2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb_python/flyteidl/datacatalog/datacatalog_pb2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/gen/pb_python/flyteidl/datacatalog/datacatalog_pb2_grpc.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-gcp.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-eks.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/charts/flyte-core/values-keycloak-idp-flyteclients-without-browser.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/data_types_and_io/structureddataset.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/development_lifecycle/inspecting_executions.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/extending/prebuilt_container_task_plugins.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/extending/container_interface.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/flyte_agents/testing_agents_in_a_local_python_environment.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/rfc/core language/1461-cache-serialize-api.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/test/flyte_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox-binary/flyte_sandbox_binary_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/gcp/flyte_helm_dataplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_helm_dataplane_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/eks/flyte_aws_scheduler_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/deployment/sandbox/flyte_helm_generated.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytepropeller/propeller-config.yaml"
      ],
      "env_locks": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flyteidl/protos/docs/contributing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/flyte_fundamentals/registering_workflows.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/getting_started_with_workflow_development/creating_a_flyte_project.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/user_guide/getting_started_with_workflow_development/flyte_project_components.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/docs/community/contribute/contribute_examples.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/codespell.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/flytectl/docs/docs-requirements.txt",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/stats/README.md"
      ]
    },
    "rubric": {
      "5": "git_sha + data_ref + env lock all logged",
      "4": "two present",
      "3": "one present",
      "2": "weak hints",
      "1": "none"
    }
  },
  "dora_readiness": {
    "metric_id": "dora_readiness_band",
    "evidence": {
      "environments": [],
      "concurrency": [
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency"
      ],
      "rollback": [],
      "health_checks": [],
      "schedules": [
        "on:\n  schedule",
        "cron: \"0 0 * * *\"",
        "on:\n  schedule",
        "cron: '0 12 * * 1'"
      ]
    },
    "rubric": {
      "5": "env promotion + concurrency + rollback + health checks + schedules",
      "4": "envs + two of (concurrency, rollback, health checks)",
      "3": "envs + one",
      "2": "weak hints only",
      "1": "none"
    }
  },
  "cost_attribution_readiness": {
    "metric_id": "cost_attribution_readiness_band",
    "evidence": {
      "tag_keys_detected": [
        "![](https",
        "\"@type\"",
        "**Note**",
        "000-core.yaml",
        "001-plugins.yaml",
        "002-database.yaml",
        "003-storage.yaml",
        "012-database-secrets.yaml",
        "013-storage-secrets.yaml",
        "100-inline-config.yaml",
        "<a href=\\http",
        "Async Cache->Grpc API Server",
        "BASE_URL",
        "BigQuery->Grpc API Server",
        "CONFIG_DIR",
        "Cons",
        "FLYTE_BOT_PAT",
        "FLYTE_BOT_USERNAME",
        "FROM python",
        "GITHUB_TOKEN",
        "GetTask",
        "Grpc API Server->Async Cache",
        "Grpc API Server->BigQuery",
        "Grpc API Server->Propeller",
        "ListAgents",
        "Logger",
        "Propeller->Async Cache",
        "Propeller->Grpc API Server",
        "Pros",
        "REPOSITORY",
        "RUN pip install \"git+https",
        "VERSION",
        "X-Content-Type-Options",
        "aa_namespace.yaml",
        "aab_default_service_account.yaml",
        "ab_project-resource-quota.yaml",
        "ab_project_resource_quota.yaml",
        "access-key",
        "accessModes",
        "access_key_id",
        "access_log_path",
        "accountId",
        "activeDeadlineSeconds",
        "add-one-and-print",
        "add-one-and-print-0",
        "add-one-and-print-1",
        "add-one-and-print-2",
        "add-one-and-print-3",
        "addr",
        "address",
        "admin",
        "admin.yaml",
        "affinity",
        "alb.ingress.kubernetes.io/group.name",
        "alb.ingress.kubernetes.io/listen-ports",
        "alb.ingress.kubernetes.io/scheme",
        "alb.ingress.kubernetes.io/tags",
        "alb.ingress.kubernetes.io/target-type",
        "allowCors",
        "allowPrivilegeEscalation",
        "allowedHeaders",
        "allowedOrigins",
        "annotations",
        "apiGroup",
        "apiVersion",
        "app",
        "app.kubernetes.io/component",
        "app.kubernetes.io/instance",
        "app.kubernetes.io/managed-by",
        "app.kubernetes.io/name",
        "app.kubernetes.io/version",
        "appAuth",
        "application",
        "arch",
        "args",
        "async def create(self)",
        "async def delete(self)",
        "async def delete_res(resource_id",
        "async def poll(resource_id",
        "async def poll(self)",
        "attributes",
        "auth",
        "auth-type",
        "auth_type",
        "authorizedUris",
        "automountServiceAccountToken",
        "backend",
        "base-delay",
        "baseUrl",
        "batch-size",
        "batching-interval",
        "bin",
        "bindings",
        "blob",
        "blobdescriptor",
        "body",
        "build-docker-images",
        "burst",
        "cache",
        "capabilities",
        "capacity",
        "catalog-cache",
        "catalog.yaml",
        "cert-manager.io/issuer",
        "certDir",
        "chart",
        "checksum/cluster-resource-templates",
        "checksum/config",
        "checksum/configuration",
        "checksum/configuration-secret",
        "checksum/credentials-secret",
        "checksum/secret",
        "chown -R 1001",
        "chown 1001",
        "claimName",
        "class BackendPluginBase",
        "clientId",
        "clientSecretLocation",
        "client_secret",
        "cloud.google.com/app-protocols",
        "cloudwatch-enabled",
        "cloudwatch-log-group",
        "cloudwatch-region",
        "cluster",
        "clusterConfigs",
        "clusterIP",
        "cluster_name",
        "cluster_resources",
        "cluster_resources.yaml",
        "clusters",
        "clusters.yaml",
        "co-pilot",
        "codec_type",
        "collection",
        "collectionType",
        "command",
        "component",
        "config",
        "config.yml",
        "configChecksum",
        "configMap",
        "connect_timeout",
        "connection",
        "connections",
        "connector-service",
        "container",
        "container_array",
        "containers",
        "copilot.yaml",
        "core.yaml",
        "coreIdentity",
        "cpu",
        "create-flyteworkflow-crd",
        "creationTimestamp",
        "customData",
        "data",
        "dataCatalog",
        "database",
        "datacatalog",
        "date_triggered",
        "datetime",
        "db.yaml",
        "dbname",
        "debug",
        "def CreateTask(self, request",
        "def DeleteTask(self, request",
        "def GetTask(self, request",
        "def __init__(self, task_type",
        "def create(task_info",
        "def task_type(self) -> str",
        "def version(self) -> str",
        "default-cpus",
        "default-env-vars",
        "default-for-task-types",
        "default-memory",
        "defaultConnector",
        "defaultTimeout",
        "defaults",
        "defaults.yaml",
        "delete-cluster",
        "description",
        "development.integration",
        "dimensionality",
        "disable-ssl",
        "disableClusterResourceManager",
        "disableScheduler",
        "disableWebhook",
        "disable_ssl",
        "disabled",
        "dnsPolicy",
        "domain",
        "domain.yaml",
        "domains",
        "downstream-eval-duration",
        "drop",
        "durationMinutes",
        "echo",
        "eks.amazonaws.com/role-arn",
        "elif resp.state == \"failure\"",
        "elif resp.state == \"running\"",
        "emailer",
        "emptyDir",
        "enable-admin-launcher",
        "enable-multicontainer",
        "enabled",
        "enabled-plugins",
        "enabled_plugins.yaml",
        "end-node",
        "endpoint",
        "endpoints",
        "env",
        "envFrom",
        "envoy.yaml",
        "ephemeral-storage",
        "ephemeralStorage",
        "event",
        "eventScheduler",
        "eventVersion",
        "exec",
        "execution-id",
        "executionQueues",
        "externalName",
        "externalTrafficPolicy",
        "failureThreshold",
        "fetch-depth",
        "fieldPath",
        "fieldRef",
        "fields",
        "files",
        "filter_chains",
        "finalizers",
        "flyte",
        "flyteClient",
        "flyteadmin",
        "fsGroup",
        "fsGroupChangePolicy",
        "gc-interval",
        "generate-tags",
        "generateName",
        "github-token",
        "gpu",
        "group",
        "grpc",
        "grpcMaxRecvMsgSizeMBs",
        "grpcPort",
        "grpcServerReflection",
        "haSharedSecret",
        "hard",
        "headers",
        "health",
        "heartbeat-grace-period-multiplier",
        "helm-release",
        "helm.sh/chart",
        "heritage",
        "homepage",
        "host",
        "hostIPC",
        "hostNetwork",
        "hostPath",
        "hosts",
        "http",
        "http2_protocol_options",
        "httpGet",
        "httpPort",
        "http_filters",
        "iam.amazonaws.com/permitted",
        "iam.gke.io/gcp-service-account",
        "iamRole",
        "id",
        "if resp.state == \"success\"",
        "image",
        "imagePullPolicy",
        "imagePullSecrets",
        "in_blob",
        "ingressClassName",
        "inherited",
        "initContainers",
        "initialDelaySeconds",
        "inputBindings",
        "input_bindings",
        "inputs",
        "insecure",
        "integer",
        "interface",
        "interval",
        "items",
        "jobs",
        "json",
        "k8s",
        "k8s-array",
        "k8s.yaml",
        "key",
        "kind",
        "kube-client-config",
        "kube-config",
        "kubernetes-enabled",
        "kubernetes-template-uri",
        "kubernetes.io/cluster-service",
        "kubernetes.io/ingress.class",
        "labelClusterMap",
        "labelSelector",
        "lb_policy",
        "leader-election",
        "lease-duration",
        "level",
        "limit-namespace",
        "limits",
        "limits.cpu",
        "limits.memory",
        "linting",
        "listeners",
        "literal-offloading-config",
        "literals",
        "livenessProbe",
        "load_assignment",
        "localCert",
        "lock-config-map",
        "log",
        "logger",
        "logger.yaml",
        "logs",
        "manager",
        "manifest-release",
        "matchLabels",
        "matrix",
        "max-delay",
        "max-reservation-heartbeat",
        "max-workflow-retries",
        "maxDownloadMBs",
        "maxReplicas",
        "maxSurge",
        "maxUnavailable",
        "max_size_mbs",
        "memory",
        "metadata",
        "metadata-prefix",
        "metadataStoragePrefix",
        "metrics",
        "metrics-prefix",
        "metrics-scope",
        "metricsScope",
        "minReadySeconds",
        "minReplicas",
        "mountPath",
        "multi_blob",
        "my-key",
        "name",
        "names",
        "namespace",
        "namespace.yaml",
        "namespace_config.yaml",
        "namespace_mapping",
        "needs",
        "nginx.ingress.kubernetes.io/app-root",
        "nodeAffinity",
        "nodeId",
        "nodePort",
        "nodeSelector",
        "nodes",
        "notifications",
        "number",
        "on",
        "onFailure",
        "openAPIV3Schema",
        "openId",
        "options",
        "os",
        "out",
        "out_blob",
        "outputs",
        "overrides",
        "owner",
        "pass.txt",
        "password",
        "passwordPath",
        "path",
        "pathType",
        "path_redirect",
        "paths",
        "periodSeconds",
        "persistentVolumeClaim",
        "phase",
        "platforms",
        "plugins",
        "plural",
        "pod-application",
        "pod-template-container-name",
        "pod-template-name",
        "podAffinity",
        "podAntiAffinity",
        "port",
        "port_value",
        "ports",
        "postgres",
        "postgres-password",
        "prefix",
        "prefix_rewrite",
        "primitive",
        "print-every-time",
        "print-every-time-0",
        "priorityClassName",
        "privileged",
        "processor",
        "prof-port",
        "profiler-port",
        "profilerPort",
        "project",
        "project_id",
        "projectcontour.io/upstream-protocol.h2c",
        "projected",
        "prometheus",
        "prometheus.io/path",
        "prometheus.io/port",
        "prometheus.io/scrape",
        "promise",
        "propeller",
        "properties",
        "protocol",
        "proxyPassword",
        "proxyUsername",
        "publish-flyte-binary-image",
        "publish-flyte-component-image",
        "publishNotReadyAddresses",
        "publisher",
        "push",
        "qps",
        "qubolespark",
        "queue",
        "queueName",
        "queues",
        "rate",
        "rawoutput-prefix",
        "readOnly",
        "readOnlyRootFilesystem",
        "readinessProbe",
        "reconnectAttempts",
        "reconnectDelaySeconds",
        "redirect",
        "redirectUri",
        "ref",
        "refreshInterval",
        "region",
        "registry",
        "release",
        "remoteData",
        "remoteData.yaml",
        "renew-deadline",
        "replicas",
        "repo",
        "requests",
        "required",
        "resourceNames",
        "resource_manager.yaml",
        "resourcemanager",
        "resources",
        "retry-period",
        "return {\"job_id\"",
        "return {\"job_spec\"",
        "roleNameKey",
        "roleRef",
        "rollingUpdate",
        "root-password",
        "root-user",
        "route",
        "route_config",
        "routes",
        "rules",
        "run",
        "runAsGroup",
        "runAsNonRoot",
        "runAsUser",
        "runScheduler",
        "runs-on",
        "runtime",
        "scalar",
        "scaleTargetRef",
        "scheduleNamePrefix",
        "scheduleQueueName",
        "scheduleRole",
        "scheduler",
        "scheduler.yaml",
        "schema",
        "scheme",
        "scope",
        "scopes",
        "script",
        "seLinuxOptions",
        "seccompProfile",
        "secret",
        "secret-key",
        "secretKeyRef",
        "secretName",
        "secret_key",
        "secrets",
        "secure",
        "security",
        "securityContext",
        "seedProjects",
        "seedProjectsWithDetails",
        "selector",
        "sender",
        "served",
        "server",
        "server.yaml",
        "service",
        "serviceAccountName",
        "serviceName",
        "servicePort",
        "sessionAffinity",
        "sha",
        "shell",
        "shortDescription",
        "shortNames",
        "show-source",
        "sidecar",
        "signedURL",
        "signedUrls",
        "simple",
        "singular",
        "socket_address",
        "source",
        "sourcePath",
        "sourceType",
        "sources",
        "sparkonk8s",
        "spec",
        "stackdriver-enabled",
        "stackdriver-logresourcename",
        "standaloneDeployment",
        "start-node",
        "start-timeout",
        "stat_prefix",
        "static_resources",
        "status",
        "steps",
        "storage",
        "storage-prefix",
        "storage.yaml",
        "storageClassName",
        "storagedriver",
        "stow",
        "stowConfigOverride",
        "strategy",
        "stringData",
        "sub-queue",
        "subject",
        "subjects",
        "subsets",
        "successThreshold",
        "sum-and-print",
        "sum-and-print-0",
        "sum-non-none",
        "sum-non-none-0",
        "targetName",
        "targetPort",
        "target_gc_percent",
        "task",
        "task-plugins",
        "taskResources",
        "task_logs.yaml",
        "task_ref",
        "task_resource_defaults.yaml",
        "task_resources",
        "task_type_whitelist",
        "tasks",
        "tcpSocket",
        "template",
        "templatePath",
        "terminationMessagePolicy",
        "testing",
        "thirdPartyConfig",
        "threshold",
        "timeout",
        "timeoutSeconds",
        "timeouts",
        "tls",
        "to",
        "token",
        "topicName",
        "topologyKey",
        "topologySpreadConstraints",
        "triggered_date",
        "type",
        "typed_config",
        "updateStrategy",
        "upgrade_configs",
        "useAuth",
        "userAuth",
        "username",
        "uses",
        "v2_signing",
        "value",
        "valueFrom",
        "value_to_print",
        "values_to_add",
        "values_to_print",
        "var",
        "variables",
        "verbs",
        "version",
        "versions",
        "virtual_hosts",
        "volumeMounts",
        "volumeName",
        "volumes",
        "webhook",
        "weight",
        "with",
        "workers",
        "workflow",
        "workflow-id",
        "workflow-reeval-duration",
        "workflow.apiVersion",
        "workflowConfigs",
        "workflowExecutionConfig",
        "workflowExecutor",
        "workflowName",
        "workflow_dispatch",
        "x-kubernetes-preserve-unknown-fields",
        "xargs -r chown -R 1001",
        "{ \"Protocol\"",
        "{{- $roleType",
        "{{addURIAndSha \"https"
      ],
      "missing_required": [
        "model",
        "endpoint_id"
      ],
      "sample_lines": []
    },
    "rubric": {
      "5": "all required keys present and consistent",
      "4": "most keys present",
      "3": "some present",
      "2": "few present",
      "1": "none"
    }
  },
  "slo_declared": {
    "metric_id": "slo_declared_band",
    "evidence": {
      "slo_docs": [],
      "slo_env_vars": [],
      "samples": []
    },
    "rubric": {
      "5": "SLO docs + thresholds in env/alerts",
      "4": "SLO docs only",
      "3": "scattered thresholds",
      "2": "mentions only",
      "1": "none"
    }
  }
}