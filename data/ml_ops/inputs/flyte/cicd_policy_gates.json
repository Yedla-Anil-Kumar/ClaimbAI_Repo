{
  "metric_id": "cicd.policy_gates_band",
  "required_checks": [
    "pytest",
    "integration-tests",
    "bandit",
    "trivy",
    "bias_check",
    "data_validation"
  ],
  "workflow_files": [
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/publish.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/update_site.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/single-binary.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/lint.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/create_release.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/go_generate.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/checks.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/dependency-review.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/sandbox.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/stale.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/contributors.yaml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flyteidl-release.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flytectl-install.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/integration.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/unit-tests.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flytectl-release.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flyteidl-checks.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/upgrade_automation.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/flyteidl-buf-publish.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/codespell.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/helm-charts.yaml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/validate-helm-charts.yaml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/component_docker_build.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/tests.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/publish-images.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/selfassign.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/flyte/.github/workflows/generate_flyte_manifest.yml"
  ],
  "workflow_yaml": [
    "name: Build & Push Docker Image\n\non:\n  workflow_call:\n    inputs:\n      component:\n        description: \"Component Name\"\n        required: true\n        type: string\n      dockerfile:\n        description: \"Dockerfile name\"\n        required: true\n        type: string\n      version:\n        description: \"Version of image\"\n        required: true\n        type: string\n      push:\n        description: \"Push to registry\"\n        required: true\n        type: boolean\n      before-build:\n        description: \"Script to run before build\"\n        required: false\n        type: string\n    secrets:\n      FLYTE_BOT_USERNAME:\n        required: true\n      FLYTE_BOT_PAT:\n        required: true\njobs:\n  push-github:\n    name: Push to Github Registry\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: '0'\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Login to GitHub Container Registry\n        if: ${{ inputs.push }}\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: \"${{ secrets.FLYTE_BOT_USERNAME }}\"\n          password: \"${{ secrets.FLYTE_BOT_PAT }}\"\n      - name: Prepare Image Tags\n        id: tags\n        uses: docker/metadata-action@v3\n        with:\n          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.component }}\n          tags: |\n            type=raw,value=latest\n            type=raw,value=${{ inputs.version }}\n            type=sha,format=long,prefix=\n      - name: Before Build\n        run: ${{ inputs.before-build }}\n      - name: Build and Push Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ${{ inputs.dockerfile }}\n          platforms: linux/arm64,linux/amd64\n          push: ${{ inputs.push }}\n          tags: ${{ steps.tags.outputs.tags }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n",
    "name: Update version in flyte.org\non:\n  push:\n    tags:\n      - 'v[0-9]+.[0-9]+.[0-9]+'\n\n\njobs:\n  repository-dispatch:\n    name: Repository Dispatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch version\n        id: bump\n        run: |\n          # from refs/tags/v1.2.3 get 1.2.3\n          VERSION=$(echo $GITHUB_REF | sed 's#.*/v##')\n          echo \"::set-output name=version::$VERSION\"\n      - name: Create an event for the release\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.FLYTE_BOT_PAT }}\n          repository: flyteorg/flyteorg.github.io\n          event-type: release\n          client-payload: '{\"tag\": \"${{ steps.bump.outputs.version }}\"}'\n",
    "name: Build & Push Flyte Single Binary Images\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - rc/*\n      - \"release-v**\"\n  workflow_dispatch:\n\njobs:\n  test-bootstrap:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          working-directory: docker/sandbox-bundled/bootstrap\n      - name: Check formatting\n        working-directory: docker/sandbox-bundled/bootstrap\n        run: |\n          make check-fmt\n      - name: Test\n        working-directory: docker/sandbox-bundled/bootstrap\n        run: |\n          make test\n\n  build-and-push-single-binary-image:\n    runs-on: ubuntu-latest\n    needs: [test-bootstrap]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Setup Golang caches\n        uses: actions/cache@v4\n        with:\n          path: |\n            /root/.cache/go-build\n            /root/go/pkg/mod\n          key: ${{ runner.os }}-golang-${{ hashFiles('go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-golang-\n      - name: Set versions\n        id: set_version\n        run: |\n          # TODO: Find a better way to determine the flyteconsole version\n          echo \"FLYTECONSOLE_VERSION=$(yq eval '.flyteconsole.image.tag' charts/flyte-core/values.yaml)\" >> $GITHUB_ENV\n          echo \"FLYTE_VERSION=${{ github.sha }}\" >> $GITHUB_ENV\n      - name: Prepare Image Names\n        id: image-names\n        uses: docker/metadata-action@v3\n        with:\n          # list of Docker images to use as base name for tags\n          images: |\n            ghcr.io/${{ github.repository_owner }}/flyte-binary\n          tags: |\n            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}\n            type=sha,format=long\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Setup destination directories for image tarballs\n        run: |\n          mkdir -p docker/sandbox-bundled/images/tar/{arm64,amd64}\n      - name: Export ARM64 Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: linux/arm64\n          tags: flyte-binary:sandbox\n          build-args: |\n            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}\n            FLYTE_VERSION=${{ env.FLYTE_VERSION }}\n          file: Dockerfile\n          outputs: type=docker,dest=docker/sandbox-bundled/images/tar/arm64/flyte-binary.tar\n      - name: Export AMD64 Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: linux/amd64\n          tags: flyte-binary:sandbox\n          build-args: |\n            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}\n            FLYTE_VERSION=${{ env.FLYTE_VERSION }}\n          file: Dockerfile\n          outputs: type=docker,dest=docker/sandbox-bundled/images/tar/amd64/flyte-binary.tar\n      - name: Upload single binary image\n        uses: actions/upload-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Login to GitHub Container Registry\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: \"${{ secrets.FLYTE_BOT_USERNAME }}\"\n          password: \"${{ secrets.FLYTE_BOT_PAT }}\"\n      - name: Build and push Image\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: linux/arm64, linux/amd64\n          tags: ${{ steps.image-names.outputs.tags }}\n          build-args: |\n            FLYTECONSOLE_VERSION=${{ env.FLYTECONSOLE_VERSION }}\n            FLYTE_VERSION=${{ env.FLYTE_VERSION }}\n          file: Dockerfile\n          push: true\n\n  sandbox-bundled-functional-tests:\n    runs-on: ubuntu-latest\n    env:\n      FLYTESNACKS_PRIORITIES: \"P0\"\n      FLYTESNACKS_VERSION: \"\"\n    timeout-minutes: 60\n    needs: [build-and-push-single-binary-image]\n    steps:\n      - name: Set latest Flytesnacks release\n        if: ${{ env.FLYTESNACKS_VERSION == '' }}\n        run: |\n          FLYTESNACKS_VERSION=\"$(curl --silent https://api.github.com/repos/flyteorg/flytesnacks/releases/latest | jq -r .tag_name)\"\n          echo \"FLYTESNACKS_VERSION=${FLYTESNACKS_VERSION}\" >> ${GITHUB_ENV}\n      - name: Checkout\n        uses: actions/checkout@v4\n      - uses: actions/download-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: image=moby/buildkit:master\n          buildkitd-flags: \"--allow-insecure-entitlement security.insecure\"\n      - name: Build sandbox image for functional tests\n        uses: docker/build-push-action@v6\n        with:\n          context: docker/sandbox-bundled\n          load: true\n          allow: \"security.insecure\"\n          tags: flyte-sandbox-bundled:local\n      # Without this, the GHA runner is under disk pressure and evicts all the pods.\n      # Buildx cache uses roughly 50% (7gb) of the GHA runner's disk (14gb).\n      - name: Prune Docker Buildx cache to reclaim storage\n        run: docker buildx prune --all --force\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.12\"\n      - uses: unionai/flytectl-setup-action@v0.0.3\n      - name: Setup sandbox\n        run: |\n          mkdir -p ~/.flyte/sandbox\n          cat << EOF > ~/.flyte/sandbox/config.yaml\n          task_resources:\n            defaults:\n              cpu: \"0\"\n              memory: \"0\"\n            limits:\n              cpu: \"0\"\n              memory: \"0\"\n          EOF\n          flytectl demo start --image flyte-sandbox-bundled:local --imagePullPolicy Never\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install uv\n          uv pip install --system flytekit==1.15.0 flytekitplugins-deck-standard==1.15.0 \"numpy<2.0.0\" pyarrow pandas\n          uv pip freeze\n      - name: Checkout flytesnacks\n        uses: actions/checkout@v4\n        with:\n          repository: flyteorg/flytesnacks\n          path: flytesnacks\n          ref: ${{ env.FLYTESNACKS_VERSION }}\n      - name: Register specific tests\n        run: |\n          flytekit_version=$(pip show flytekit | grep -i version | awk '{ print $2 }')\n          while read -r line;\n          do\n              pyflyte -vv --config ./boilerplate/flyte/end2end/functional-test-config.yaml \\\n                  register \\\n                  --project flytesnacks \\\n                  --domain development \\\n                  --image cr.flyte.org/flyteorg/flytekit:py3.12-${flytekit_version} \\\n                  --version ${{ env.FLYTESNACKS_VERSION }} \\\n                  flytesnacks/$line;\n          done < flytesnacks/flyte_tests.txt\n      - name: Install Pytest\n        run: |\n          pip install pytest\n      - name: End2End\n        run: |\n          make end2end_execute\n\n  sandbox-bundled-offloaded-functional-tests:\n    runs-on: ubuntu-latest\n    env:\n      FLYTESNACKS_PRIORITIES: \"P0\"\n      FLYTESNACKS_VERSION: \"\"\n    timeout-minutes: 60\n    needs: [build-and-push-single-binary-image]\n    steps:\n      - name: Set latest Flytesnacks release\n        if: ${{ env.FLYTESNACKS_VERSION == '' }}\n        run: |\n          FLYTESNACKS_VERSION=\"$(curl --silent https://api.github.com/repos/flyteorg/flytesnacks/releases/latest | jq -r .tag_name)\"\n          echo \"FLYTESNACKS_VERSION=${FLYTESNACKS_VERSION}\" >> ${GITHUB_ENV}\n      - name: Checkout\n        uses: actions/checkout@v4\n      - uses: actions/download-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: image=moby/buildkit:master\n          buildkitd-flags: \"--allow-insecure-entitlement security.insecure\"\n      - name: Build sandbox image for functional tests\n        uses: docker/build-push-action@v6\n        with:\n          context: docker/sandbox-bundled\n          load: true\n          allow: \"security.insecure\"\n          tags: flyte-sandbox-bundled:local\n      # Without this, the GHA runner is under disk pressure and evicts all the pods.\n      # Buildx cache uses roughly 50% (7gb) of the GHA runner's disk (14gb).\n      - name: Prune Docker Buildx cache to reclaim storage\n        run: docker buildx prune --all --force\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.12\"\n      - uses: unionai/flytectl-setup-action@v0.0.3\n      - name: Setup sandbox\n        run: |\n          mkdir -p ~/.flyte/sandbox\n          cat << EOF > ~/.flyte/sandbox/config.yaml\n          propeller:\n            literal-offloading-config:\n              enabled: true\n              min-size-in-mb-for-offloading: 0.000001\n          task_resources:\n            defaults:\n              cpu: \"0\"\n              memory: \"0\"\n            limits:\n              cpu: \"0\"\n              memory: \"0\"\n          EOF\n          flytectl demo start --image flyte-sandbox-bundled:local --imagePullPolicy Never\n        # By setting min-size-in-mb-for-offloading to 0.000001, we ensure that all tasks are offloaded.\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install uv\n          uv pip install --system flytekit flytekitplugins-deck-standard \"numpy<2.0.0\" pyarrow pandas\n          uv pip freeze\n      - name: Checkout flytesnacks\n        uses: actions/checkout@v4\n        with:\n          repository: flyteorg/flytesnacks\n          path: flytesnacks\n          ref: ${{ env.FLYTESNACKS_VERSION }}\n      - name: Register specific tests\n        run: |\n          flytekit_version=$(pip show flytekit | grep -i version | awk '{ print $2 }')\n          while read -r line;\n          do\n              pyflyte -vv --config ./boilerplate/flyte/end2end/functional-test-config.yaml \\\n                  register \\\n                  --project flytesnacks \\\n                  --domain development \\\n                  --image cr.flyte.org/flyteorg/flytekit:py3.12-${flytekit_version} \\\n                  --version ${{ env.FLYTESNACKS_VERSION }} \\\n                  flytesnacks/$line;\n          done < flytesnacks/flyte_tests.txt\n      - name: Install Pytest\n        run: |\n          pip install pytest\n      - name: End2End\n        run: |\n          make end2end_execute\n\n  build-and-push-sandbox-bundled-image:\n    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n    runs-on: ubuntu-latest\n    needs: [build-and-push-single-binary-image]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - uses: actions/download-artifact@v4\n        with:\n          name: single-binary-image\n          path: docker/sandbox-bundled/images/tar\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: image=moby/buildkit:master\n          buildkitd-flags: \"--allow-insecure-entitlement security.insecure\"\n      - name: Set version\n        id: set_version\n        run: |\n          echo \"FLYTE_SANDBOX_VERSION=${{ github.sha }}\" >> $GITHUB_ENV\n      - name: Prepare Image Names\n        id: image-names\n        uses: docker/metadata-action@v3\n        with:\n          # list of Docker images to use as base name for tags\n          images: |\n            ghcr.io/${{ github.repository_owner }}/flyte-sandbox-bundled\n          tags: |\n            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}\n            type=sha,format=long,\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: \"${{ secrets.FLYTE_BOT_USERNAME }}\"\n          password: \"${{ secrets.FLYTE_BOT_PAT }}\"\n      - name: Build and push multi-arch image\n        uses: docker/build-push-action@v6\n        with:\n          context: docker/sandbox-bundled\n          allow: \"security.insecure\"\n          platforms: linux/arm64, linux/amd64\n          tags: ${{ steps.image-names.outputs.tags }}\n          build-args: \"FLYTE_SANDBOX_VERSION=${{ env.FLYTE_SANDBOX_VERSION }}\"\n          push: true\n",
    "name: Lint\n\non:\n  workflow_call:\n    inputs:\n      component:\n        required: true\n        type: string\njobs:\n  lint:\n    name: Run Lint\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ${{ inputs.component }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: ${{ inputs.component }}/go.mod\n      - name: Lint\n        run: make install && make lint\n"
  ],
  "evidence": {
    "present_flags": {
      "pytest": false,
      "integration": false,
      "bandit": false,
      "trivy": false,
      "bias": false,
      "data_validation": false
    },
    "schedules": [
      "on:\n  schedule",
      "cron: \"0 0 * * *\"",
      "on:\n  schedule",
      "cron: '0 12 * * 1'"
    ],
    "deploy_jobs": [
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "Release",
      "release",
      "release",
      "Release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "Release",
      "deploy",
      "deploy",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release",
      "release"
    ],
    "environments": []
  },
  "rubric": "5 if all required checks exist and run before deploy; 4 if most present; 3 if partial; 2 minimal; 1 if missing."
}