{
  "cicd_policy_gates": {
    "metric_id": "cicd.policy_gates_band",
    "required_checks": [
      "pytest",
      "integration-tests",
      "bandit",
      "trivy",
      "bias_check",
      "data_validation"
    ],
    "workflow_files": [
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd-mi300-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd-mi250-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/pr-style-bot.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/model_jobs_intel_gaudi.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi300-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/trufflehog.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-nightly-past-ci-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/push-important-models.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi250-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-nightly-ci-docker-images.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/pr_build_doc_with_comment.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/update_metdata.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/release-conda.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-ci-docker-images.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/stale.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/get-pr-number.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/add-model-like.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/check_failed_tests.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/doctest_job.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-past-ci-docker-images.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/benchmark.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/ssh-runner.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/upload_pr_documentation.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-docker-images.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build_documentation.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd-mi210-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build_pr_documentation.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-comment-ci.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/assign-reviewers.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi3-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-past-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi325-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/slack-report.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/get-pr-info.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/pr_run_slow_ci.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/check_tiny_models.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/model_jobs.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-nightly-caller.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/new_model_pr_merged_notification.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/doctests.yml",
      "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.circleci/config.yml"
    ],
    "workflow_yaml": [
      "name: Self-hosted runner AMD GPU (push)\n\non:\n  workflow_call:\n    inputs:\n      gpu_flavor:\n        required: true\n        type: string\n\nenv:\n  HF_HOME: /mnt/cache\n  TRANSFORMERS_IS_CI: yes\n  OMP_NUM_THREADS: 8\n  MKL_NUM_THREADS: 8\n  PYTEST_TIMEOUT: 60\n  TF_FORCE_GPU_ALLOW_GROWTH: true\n  HF_HUB_READ_TOKEN: ${{ secrets.HF_HUB_READ_TOKEN }}\n\njobs:\n  check_runner_status:\n    name: Check Runner Status\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout transformers\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Check Runner Status\n        run: python utils/check_self_hosted_runner.py --target_runners amd-mi210-single-gpu-ci-runner-docker --token ${{ secrets.ACCESS_REPO_INFO_TOKEN }}\n\n  check_runners:\n    name: Check Runners\n    needs: check_runner_status\n    strategy:\n      matrix:\n        machine_type: [single-gpu, multi-gpu]\n    runs-on: [self-hosted, amd-gpu, '${{ matrix.machine_type }}', '${{ inputs.gpu_flavor }}']\n    container:\n      image: huggingface/transformers-pytorch-amd-gpu-push-ci  # <--- We test only for PyTorch for now\n      options: --device /dev/kfd --device /dev/dri --env ROCR_VISIBLE_DEVICES --shm-size \"16gb\" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/\n    steps:\n      - name: ROCM-SMI\n        run: |\n          rocm-smi\n      - name: ROCM-INFO\n        run: |\n          rocminfo  | grep \"Agent\" -A 14\n      - name: Show ROCR environment\n        run: |\n          echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n\n  setup_gpu:\n    name: Setup\n    needs: check_runners\n    strategy:\n      matrix:\n        machine_type: [single-gpu, multi-gpu]\n    runs-on: [self-hosted, amd-gpu, '${{ matrix.machine_type }}', '${{ inputs.gpu_flavor }}']\n    container:\n      image: huggingface/transformers-pytorch-amd-gpu-push-ci  # <--- We test only for PyTorch for now\n      options: --device /dev/kfd --device /dev/dri --env ROCR_VISIBLE_DEVICES --shm-size \"16gb\" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.matrix }}\n      test_map: ${{ steps.set-matrix.outputs.test_map }}\n    env:\n      # `CI_BRANCH_PUSH`: The branch name from the push event\n      # `CI_BRANCH_WORKFLOW_RUN`: The name of the branch on which this workflow is triggered by `workflow_run` event\n      # `CI_SHA_PUSH`: The commit SHA from the push event\n      # `CI_SHA_WORKFLOW_RUN`: The commit SHA that triggers this workflow by `workflow_run` event\n      CI_BRANCH_PUSH: ${{ github.event.ref }}\n      CI_BRANCH_WORKFLOW_RUN: ${{ github.event.workflow_run.head_branch }}\n      CI_SHA_PUSH: ${{ github.event.head_commit.id }}\n      CI_SHA_WORKFLOW_RUN: ${{ github.event.workflow_run.head_sha }}\n    steps:\n      # Necessary to get the correct branch name and commit SHA for `workflow_run` event\n      # We also take into account the `push` event (we might want to test some changes in a branch)\n      - name: Prepare custom environment variables\n        shell: bash\n        # `CI_BRANCH`: The non-empty branch name from the above two (one and only one of them is empty)\n        # `CI_SHA`: The non-empty commit SHA from the above two (one and only one of them is empty)\n        run: |\n          CI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\n          echo $CI_BRANCH_PUSH\n          echo $CI_BRANCH_WORKFLOW_RUN\n          echo $CI_SHA_PUSH\n          echo $CI_SHA_WORKFLOW_RUN\n          [[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n          [[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n\n      - name: print environment variables\n        run: |\n          echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\n          echo \"env.CI_SHA = ${{ env.CI_SHA }}\"\n\n      - name: Update clone using environment variables\n        working-directory: /transformers\n        run: |\n          echo \"original branch = $(git branch --show-current)\"\n          git fetch && git checkout ${{ env.CI_BRANCH }}\n          echo \"updated branch = $(git branch --show-current)\"\n          git checkout ${{ env.CI_SHA }}\n          echo \"log = $(git log -n 1)\"\n\n      - name: Cleanup\n        working-directory: /transformers\n        run: |\n          rm -rf tests/__pycache__\n          rm -rf tests/models/__pycache__\n          rm -rf reports\n\n      - name: Show installed libraries and their versions\n        working-directory: /transformers\n        run: pip freeze\n\n      - name: Fetch the tests to run\n        working-directory: /transformers\n        # TODO: add `git-python` in the docker images\n        run: |\n          pip install --upgrade git-python\n          python3 utils/tests_fetcher.py --diff_with_last_commit | tee test_preparation.txt\n\n      - name: Report fetched tests\n        uses: actions/upload-artifact@v4\n        with:\n          name: test_fetched\n          path: /transformers/test_preparation.txt\n\n      - id: set-matrix\n        name: Organize tests into models\n        working-directory: /transformers\n        # The `keys` is used as GitHub actions matrix for jobs, i.e. `models/bert`, `tokenization`, `pipeline`, etc.\n        # The `test_map` is used to get the actual identified test files under each key.\n        # If no test to run (so no `test_map.json` file), create a dummy map (empty matrix will fail)\n        run: |\n          if [ -f test_map.json ]; then\n              keys=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); d = list(test_map.keys()); print(d)')\n              test_map=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); print(test_map)')\n          else\n              keys=$(python3 -c 'keys = [\"dummy\"]; print(keys)')\n              test_map=$(python3 -c 'test_map = {\"dummy\": []}; print(test_map)')\n          fi\n          echo $keys\n          echo $test_map\n          echo \"matrix=$keys\" >> $GITHUB_OUTPUT\n          echo \"test_map=$test_map\" >> $GITHUB_OUTPUT\n\n  run_models_gpu:\n    name: Model tests\n    needs: setup_gpu\n    # `dummy` means there is no test to run\n    if: contains(fromJson(needs.setup_gpu.outputs.matrix), 'dummy') != true\n    strategy:\n      fail-fast: false\n      matrix:\n        folders: ${{ fromJson(needs.setup_gpu.outputs.matrix) }}\n        machine_type: [single-gpu, multi-gpu]\n    runs-on: [self-hosted, amd-gpu, '${{ matrix.machine_type }}', '${{ inputs.gpu_flavor }}']\n    container:\n      image: huggingface/transformers-pytorch-amd-gpu-push-ci  # <--- We test only for PyTorch for now\n      options: --device /dev/kfd --device /dev/dri --env ROCR_VISIBLE_DEVICES --shm-size \"16gb\" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/\n    env:\n      # For the meaning of these environment variables, see the job `Setup`\n      CI_BRANCH_PUSH: ${{ github.event.ref }}\n      CI_BRANCH_WORKFLOW_RUN: ${{ github.event.workflow_run.head_branch }}\n      CI_SHA_PUSH: ${{ github.event.head_commit.id }}\n      CI_SHA_WORKFLOW_RUN: ${{ github.event.workflow_run.head_sha }}\n    steps:\n      # Necessary to get the correct branch name and commit SHA for `workflow_run` event\n      # We also take into account the `push` event (we might want to test some changes in a branch)\n      - name: Prepare custom environment variables\n        shell: bash\n        # For the meaning of these environment variables, see the job `Setup`\n        run: |\n          CI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\n          echo $CI_BRANCH_PUSH\n          echo $CI_BRANCH_WORKFLOW_RUN\n          echo $CI_SHA_PUSH\n          echo $CI_SHA_WORKFLOW_RUN\n          [[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n          [[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n\n      - name: print environment variables\n        run: |\n          echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\n          echo \"env.CI_SHA = ${{ env.CI_SHA }}\"\n\n      - name: Update clone using environment variables\n        working-directory: /transformers\n        run: |\n          echo \"original branch = $(git branch --show-current)\"\n          git fetch && git checkout ${{ env.CI_BRANCH }}\n          echo \"updated branch = $(git branch --show-current)\"\n          git checkout ${{ env.CI_SHA }}\n          echo \"log = $(git log -n 1)\"\n\n      - name: Reinstall transformers in edit mode (remove the one installed during docker image build)\n        working-directory: /transformers\n        run: python3 -m pip uninstall -y transformers && python3 -m pip install -e .\n\n      - name: Echo folder ${{ matrix.folders }}\n        shell: bash\n        # For folders like `models/bert`, set an env. var. (`matrix_folders`) to `models_bert`, which will be used to\n        # set the artifact folder names (because the character `/` is not allowed).\n        run: |\n          echo \"${{ matrix.folders }}\"\n          echo \"${{ fromJson(needs.setup_gpu.outputs.test_map)[matrix.folders] }}\"\n          matrix_folders=${{ matrix.folders }}\n          matrix_folders=${matrix_folders/'models/'/'models_'}\n          echo \"$matrix_folders\"\n          echo \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n\n      - name: ROCM-SMI\n        run: |\n          rocm-smi\n      - name: ROCM-INFO\n        run: |\n          rocminfo  | grep \"Agent\" -A 14\n      - name: Show ROCR environment\n        run: |\n          echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n\n      - name: Environment\n        working-directory: /transformers\n        run: |\n          python3 utils/print_env.py\n\n      - name: Show installed libraries and their versions\n        working-directory: /transformers\n        run: pip freeze\n\n      - name: Run all non-slow selected tests on GPU\n        working-directory: /transformers\n        run: |\n          python3 -m pytest -n 2 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports ${{ fromJson(needs.setup_gpu.outputs.test_map)[matrix.folders] }} -m \"not not_device_test\"\n\n      - name: Failure short reports\n        if: ${{ failure() }}\n        continue-on-error: true\n        run: cat /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt\n\n      - name: \"Test suite reports artifacts: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports\"\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports\n          path: /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports\n\n  send_results:\n    name: Send results to webhook\n    runs-on: ubuntu-22.04\n    if: always()\n    needs: [\n        check_runner_status,\n        check_runners,\n        setup_gpu,\n        run_models_gpu,\n#        run_tests_torch_cuda_extensions_single_gpu,\n#        run_tests_torch_cuda_extensions_multi_gpu\n    ]\n    env:\n      # For the meaning of these environment variables, see the job `Setup`\n      CI_BRANCH_PUSH: ${{ github.event.ref }}\n      CI_BRANCH_WORKFLOW_RUN: ${{ github.event.workflow_run.head_branch }}\n      CI_SHA_PUSH: ${{ github.event.head_commit.id }}\n      CI_SHA_WORKFLOW_RUN: ${{ github.event.workflow_run.head_sha }}\n    steps:\n      - name: Preliminary job status\n        shell: bash\n        # For the meaning of these environment variables, see the job `Setup`\n        run: |\n          echo \"Runner availability: ${{ needs.check_runner_status.result }}\"\n          echo \"Setup status: ${{ needs.setup_gpu.result }}\"\n          echo \"Runner status: ${{ needs.check_runners.result }}\"\n\n      # Necessary to get the correct branch name and commit SHA for `workflow_run` event\n      # We also take into account the `push` event (we might want to test some changes in a branch)\n      - name: Prepare custom environment variables\n        shell: bash\n        # For the meaning of these environment variables, see the job `Setup`\n        run: |\n          CI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\n          echo $CI_BRANCH_PUSH\n          echo $CI_BRANCH_WORKFLOW_RUN\n          echo $CI_SHA_PUSH\n          echo $CI_SHA_WORKFLOW_RUN\n          [[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n          [[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n\n      - name: print environment variables\n        run: |\n          echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\n          echo \"env.CI_SHA = ${{ env.CI_SHA }}\"\n\n      - uses: actions/checkout@v4\n        # To avoid failure when multiple commits are merged into `main` in a short period of time.\n        # Checking out to an old commit beyond the fetch depth will get an error `fatal: reference is not a tree: ...\n        # (Only required for `workflow_run` event, where we get the latest HEAD on `main` instead of the event commit)\n        with:\n          fetch-depth: 20\n\n      - name: Update clone using environment variables\n        run: |\n          echo \"original branch = $(git branch --show-current)\"\n          git fetch && git checkout ${{ env.CI_BRANCH }}\n          echo \"updated branch = $(git branch --show-current)\"\n          git checkout ${{ env.CI_SHA }}\n          echo \"log = $(git log -n 1)\"\n\n      - uses: actions/download-artifact@v4\n      - name: Send message to Slack\n        env:\n          CI_SLACK_BOT_TOKEN: ${{ secrets.CI_SLACK_BOT_TOKEN }}\n          CI_SLACK_CHANNEL_ID: ${{ secrets.CI_SLACK_CHANNEL_ID }}\n          CI_SLACK_CHANNEL_ID_DAILY: ${{ secrets.CI_SLACK_CHANNEL_ID_DAILY }}\n          CI_SLACK_CHANNEL_ID_AMD: ${{ secrets.CI_SLACK_CHANNEL_ID_AMD }}\n          CI_SLACK_CHANNEL_DUMMY_TESTS: ${{ secrets.CI_SLACK_CHANNEL_DUMMY_TESTS }}\n          CI_SLACK_REPORT_CHANNEL_ID: ${{ secrets.CI_SLACK_CHANNEL_ID_AMD }}\n          ACCESS_REPO_INFO_TOKEN: ${{ secrets.ACCESS_REPO_INFO_TOKEN }}\n          CI_EVENT: Push CI (AMD) - ${{ inputs.gpu_flavor }}\n          CI_TITLE_PUSH: ${{ github.event.head_commit.message }}\n          CI_TITLE_WORKFLOW_RUN: ${{ github.event.workflow_run.head_commit.message }}\n          CI_SHA: ${{ env.CI_SHA }}\n          RUNNER_STATUS: ${{ needs.check_runner_status.result }}\n          RUNNER_ENV_STATUS: ${{ needs.check_runners.result }}\n          SETUP_STATUS: ${{ needs.setup_gpu.result }}\n\n        # We pass `needs.setup_gpu.outputs.matrix` as the argument. A processing in `notification_service.py` to change\n        # `models/bert` to `models_bert` is required, as the artifact names use `_` instead of `/`.\n        run: |\n          pip install huggingface_hub\n          pip install slack_sdk\n          pip show slack_sdk\n          python utils/notification_service.py \"${{ needs.setup_gpu.outputs.matrix }}\"\n",
      "name: Self-hosted runner (AMD mi300 CI caller)\n\non:\n  #workflow_run:\n  #  workflows: [\"Self-hosted runner (push-caller)\"]\n  #  branches: [\"main\"]\n  #  types: [completed]\n  push:\n    branches:\n      - run_amd_push_ci_caller*\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n      - \"templates/**\"\n      - \"utils/**\"\n\njobs:\n  run_amd_ci:\n    name: AMD mi300\n    if: (cancelled() != true) && ((github.event_name == 'workflow_run') || ((github.event_name == 'push') && (startsWith(github.ref_name, 'run_amd_push_ci_caller') || startsWith(github.ref_name, 'mi300-ci'))))\n    uses: ./.github/workflows/self-push-amd.yml\n    with:\n      gpu_flavor: mi300\n    secrets: inherit\n",
      "name: Self-hosted runner (AMD mi250 CI caller)\n\non:\n  #workflow_run:\n  #  workflows: [\"Self-hosted runner (push-caller)\"]\n  #  branches: [\"main\"]\n  #  types: [completed]\n  push:\n    branches:\n      - run_amd_push_ci_caller*\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n      - \"templates/**\"\n      - \"utils/**\"\n\njobs:\n  run_amd_ci:\n    name: AMD mi250\n    if: (cancelled() != true) && ((github.event_name == 'workflow_run') || ((github.event_name == 'push') && startsWith(github.ref_name, 'run_amd_push_ci_caller')))\n    uses: ./.github/workflows/self-push-amd.yml\n    with:\n      gpu_flavor: mi250\n    secrets: inherit\n",
      "# To run this bot, comment \"@bot /style\" on a PR\nname: Style Bot\n\non:\n  issue_comment:\n    types: [created]\n\npermissions:\n  pull-requests: write\n\njobs:\n  style:\n    uses: huggingface/huggingface_hub/.github/workflows/style-bot-action.yml@main\n    with:\n      python_quality_dependencies: \"[quality]\"\n      style_command_type: \"default\"\n    secrets:\n      bot_token: ${{ secrets.HF_STYLE_BOT_ACTION }}\n"
    ],
    "evidence": {
      "present_flags": {
        "pytest": true,
        "integration": false,
        "bandit": false,
        "trivy": false,
        "bias": false,
        "data_validation": false
      },
      "schedules": [
        "on:\n  schedule",
        "cron: \"17 2,14 * * *\"",
        "cron: \"6 0 * * *\"",
        "on:\n  schedule",
        "cron: \"0 8 * * *\"",
        "cron: \"17 2 * * *\"",
        "cron: \"17 0 * * *\"",
        "cron: \"17 2 * * *\"",
        "on:\n  schedule",
        "cron: \"17 2 * * *\"",
        "cron: \"0 2 * * *\"",
        "cron: \"17 2 * * *\"",
        "cron: \"17 2 * * *\""
      ],
      "deploy_jobs": [
        "Release",
        "release",
        "release"
      ],
      "environments": [
        "build",
        "transformers_is_ci"
      ]
    },
    "rubric": "5 if all required checks exist and run before deploy; 4 if most present; 3 if partial; 2 minimal; 1 if missing."
  },
  "registry_governance_readiness": {
    "metric_id": "registry_governance_readiness_band",
    "evidence": {
      "codeowners_present": false,
      "deploy_jobs": [
        "Release",
        "release",
        "release"
      ],
      "environments": [
        "build",
        "transformers_is_ci"
      ],
      "policy_gates": {
        "pytest": true,
        "integration": false,
        "bandit": false,
        "trivy": false,
        "bias": false,
        "data_validation": false
      }
    },
    "rubric": {
      "5": "CODEOWNERS + prod environment gating + security tests + explicit promote steps",
      "4": "prod env + policy gates present",
      "3": "some gates or envs",
      "2": "weak hints only",
      "1": "no governance indicators"
    }
  },
  "artifact_lineage_readiness": {
    "metric_id": "artifact_lineage_readiness_band",
    "evidence": {
      "image_digests": [],
      "unpinned_images": [
        "image: memcached:1.6.29",
        "image: prom/prometheus:latest",
        "image: grafana/tempo:latest",
        "image: grafana/grafana:latest",
        "image: vault.habana.ai/gaudi-docker/1.21.1/ubuntu22.04/habanalabs/pytorch-installer-2.6.0:latest",
        "image: vault.habana.ai/gaudi-docker/1.21.1/ubuntu22.04/habanalabs/pytorch-installer-2.6.0:latest",
        "image: vault.habana.ai/gaudi-docker/1.21.1/ubuntu22.04/habanalabs/pytorch-installer-2.6.0:latest",
        "image: vault.habana.ai/gaudi-docker/1.21.1/ubuntu22.04/habanalabs/pytorch-installer-2.6.0:latest",
        "image: python:3.10-slim"
      ],
      "sbom": [],
      "signing": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/test_image_processing_common.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/pipelines/test_pipelines_common.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/conditional_detr/test_image_processing_conditional_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/grounding_dino/test_image_processing_grounding_dino.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/deformable_detr/test_image_processing_deformable_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/yolos/test_image_processing_yolos.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/detr/test_image_processing_detr.py"
      ],
      "k8s_probes": []
    },
    "rubric": {
      "5": "images pinned by digest + signing/SBOM + probes",
      "4": "pinned images + either signing or SBOM",
      "3": "some pinning, missing supply-chain pieces",
      "2": "unpinned images dominate",
      "1": "no integrity signals"
    }
  },
  "monitoring_readiness": {
    "metric_id": "monitoring_coverage_readiness_band",
    "evidence": {
      "rule_files": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/benchmark/grafana_dashboard.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/emu3/test_modeling_emu3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/t5/test_modeling_t5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/bart/test_modeling_bart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/pt/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/qwen2_audio.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/metrics-monitoring/grafana-datasources.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/metrics-monitoring/continuous-batching-dashboard.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/metrics-monitoring/docker-compose.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/metrics-monitoring/tempo.yaml"
      ],
      "rule_snippets": [
        "{\n  \"annotations\": {\n    \"list\": [\n      {\n        \"builtIn\": 1,\n        \"datasource\": {\n          \"type\": \"grafana\",\n          \"uid\": \"-- Grafana --\"\n        },\n        \"enable\": true,\n        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n        \"name\": \"Annotations & Alerts\",\n        \"type\": \"dashboard\"\n      }\n    ]\n  },\n  \"editable\": true,\n  \"fiscalYearStartMonth\": 0,\n  \"graphTooltip\": 0,\n  \"id\": 1,\n  \"links\": [\n    {\n      \"asDropdown\": false,\n      \"icon\": \"external link\",\n      \"includeVars\": false,\n      \"keepTime\": false,\n      \"tags\": [],\n      \"targetBlank\": false,\n      \"title\": \"Go to data\",\n      \"tooltip\": \"Go to data\",\n      \"type\": \"link\",\n      \"url\": \"http://transformers-benchmarks.hf.co/d/fdz33iyzln9c0a/transformers-benchmarks?orgId=1&from=${StartTime}&to=${EndTime}\"\n    }\n  ],\n  \"liveNow\": true,\n  \"panels\": [\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"thresholds\"\n          },\n          \"custom\": {\n            \"align\": \"left\",\n            \"cellOptions\": {\n              \"type\": \"auto\"\n            },\n            \"inspect\": false\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          }\n        },\n        \"overrides\": [\n          {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"gpu_name\"\n            },\n            \"properties\": [\n              {\n                \"id\": \"custom.width\",\n                \"value\": 202\n              }\n            ]\n          },\n          {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"left\"\n            },\n            \"properties\": [\n              {\n                \"id\": \"custom.width\",\n                \"value\": 407\n              }\n            ]\n          },\n          {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"commit_message\"\n            },\n            \"properties\": [\n              {\n                \"id\": \"custom.width\",\n                \"value\": 524\n              }\n            ]\n          },\n          {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"commit_id\"\n            },\n            \"properties\": [\n              {\n                \"id\": \"custom.width\",\n                \"value\": 353\n              }\n            ]\n          },\n          {\n            \"matcher\": {\n              \"id\": \"byName\",\n              \"options\": \"model_id\"\n            },\n            \"properties\": [\n              {\n                \"id\": \"custom.width\",\n                \"value\": 216\n              }\n            ]\n          }\n        ]\n      },\n      \"gridPos\": {\n        \"h\": 6,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"id\": 5,\n      \"options\": {\n        \"cellHeight\": \"sm\",\n        \"footer\": {\n          \"countRows\": false,\n          \"fields\": \"\",\n          \"reducer\": [\n            \"sum\"\n          ],\n          \"show\": false\n        },\n        \"showHeader\": true,\n        \"sortBy\": []\n      },\n      \"pluginVersion\": \"11.2.2\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT commit_id, commit_message, metadata->>'gpu_name' as gpu_name, metadata->>'model_id' as model_id, created_at AS date FROM benchmarks WHERE branch = '${branch}' AND metadata->>'gpu_name' = '${gpu_name}' ORDER BY benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [\n                  {\n                    \"name\": \"commit_id\",\n                    \"type\": \"functionParameter\"\n                  }\n                ],\n                \"type\": \"function\"\n              },\n              {\n                \"parameters\": [\n                  {\n                    \"name\": \"gpu_name\",\n                    \"type\": \"functionParameter\"\n                  }\n                ],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50,\n            \"whereJsonTree\": {\n              \"children1\": [\n                {\n                  \"id\": \"baaa8aaa-89ab-4cde-b012-31922f96de3f\",\n                  \"properties\": {\n                    \"field\": \"commit_id\",\n                    \"fieldSrc\": \"field\",\n                    \"operator\": \"equal\",\n                    \"value\": [\n                      \"${commit}\"\n                    ],\n                    \"valueError\": [\n                      null\n                    ],\n                    \"valueSrc\": [\n                      \"value\"\n                    ],\n                    \"valueType\": [\n                      \"text\"\n                    ]\n                  },\n                  \"type\": \"rule\"\n                }\n              ],\n              \"id\": \"bab88a98-0123-4456-b89a-b1922f7d4f11\",\n              \"type\": \"group\"\n            },\n            \"whereString\": \"commit_id = '${commit}'\"\n          },\n          \"table\": \"benchmarks\"\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"table\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 6\n      },\n      \"id\": 13,\n      \"panels\": [],\n      \"title\": \"Eager Forward Pass\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 7\n      },\n      \"id\": 7,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"pluginVersion\": \"11.2.2\",\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'first_eager_forward_pass_time_secs' AS double precision) AS first_eager_forward_pass_time_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"First eager forward pass\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              },\n              {\n                \"color\": \"red\",\n                \"value\": 80\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 7\n      },\n      \"id\": 9,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'second_eager_forward_pass_time_secs' AS double precision) AS second_eager_forward_pass_time_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Second eager forward pass\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 18\n      },\n      \"id\": 16,\n      \"panels\": [],\n      \"title\": \"Time to next token\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 19\n      },\n      \"id\": 17,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"always\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'time_to_first_token_secs' AS double precision) AS time_to_first_token_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Time to first token\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 19\n      },\n      \"id\": 18,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"always\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'time_to_second_token_secs' AS double precision) AS time_to_second_token_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Time to second token\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 30\n      },\n      \"id\": 19,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"always\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'time_to_third_token_secs' AS double precision) AS time_to_third_token_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Time to third token\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 30\n      },\n      \"id\": 20,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"always\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'time_to_next_token_mean_secs' AS double precision) AS time_to_next_token_mean_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Time to subsequent next tokens mean\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"collapsed\": false,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 41\n      },\n      \"id\": 14,\n      \"panels\": [],\n      \"title\": \"Compiled Generate\",\n      \"type\": \"row\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 42\n      },\n      \"id\": 8,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"always\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'first_compile_generate_time_secs' AS double precision) AS first_compile_generate_time_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"First compile generate\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 42\n      },\n      \"id\": 10,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'second_compile_generate_time_secs' AS double precision) AS second_compile_generate_time_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Second compile generate\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"scheme\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 0,\n        \"y\": 53\n      },\n      \"id\": 11,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'third_compile_generate_time_secs' AS double precision) AS third_compile_generate_time_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Third compile generate\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"datasource\": {\n        \"default\": true,\n        \"type\": \"grafana-postgresql-datasource\",\n        \"uid\": \"be28nkzirtb0gd\"\n      },\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"color\": {\n            \"mode\": \"continuous-YlBl\"\n          },\n          \"custom\": {\n            \"axisBorderShow\": false,\n            \"axisCenteredZero\": false,\n            \"axisColorMode\": \"text\",\n            \"axisLabel\": \"\",\n            \"axisPlacement\": \"auto\",\n            \"fillOpacity\": 80,\n            \"gradientMode\": \"none\",\n            \"hideFrom\": {\n              \"legend\": false,\n              \"tooltip\": false,\n              \"viz\": false\n            },\n            \"lineWidth\": 0,\n            \"scaleDistribution\": {\n              \"type\": \"linear\"\n            },\n            \"thresholdsStyle\": {\n              \"mode\": \"off\"\n            }\n          },\n          \"mappings\": [],\n          \"thresholds\": {\n            \"mode\": \"absolute\",\n            \"steps\": [\n              {\n                \"color\": \"green\",\n                \"value\": null\n              }\n            ]\n          },\n          \"unit\": \"s\"\n        },\n        \"overrides\": []\n      },\n      \"gridPos\": {\n        \"h\": 11,\n        \"w\": 12,\n        \"x\": 12,\n        \"y\": 53\n      },\n      \"id\": 12,\n      \"options\": {\n        \"barRadius\": 0.05,\n        \"barWidth\": 0.8,\n        \"fullHighlight\": false,\n        \"groupWidth\": 0.7,\n        \"legend\": {\n          \"calcs\": [],\n          \"displayMode\": \"list\",\n          \"placement\": \"bottom\",\n          \"showLegend\": false\n        },\n        \"orientation\": \"auto\",\n        \"showValue\": \"auto\",\n        \"stacking\": \"none\",\n        \"tooltip\": {\n          \"mode\": \"single\",\n          \"sort\": \"none\"\n        },\n        \"xTickLabelRotation\": 0,\n        \"xTickLabelSpacing\": 0\n      },\n      \"targets\": [\n        {\n          \"datasource\": {\n            \"default\": true,\n            \"type\": \"grafana-postgresql-datasource\",\n            \"uid\": \"be28nkzirtb0gd\"\n          },\n          \"editorMode\": \"code\",\n          \"format\": \"table\",\n          \"rawQuery\": true,\n          \"rawSql\": \"SELECT CAST(m.measurements->'fourth_compile_generate_time_secs' AS double precision) AS fourth_compile_generate_time_secs, left(b.commit_id, 7), m.time FROM benchmarks as b JOIN model_measurements AS m ON b.benchmark_id = m.benchmark_id WHERE b.branch = '${branch}' AND b.metadata->>'gpu_name' = '${gpu_name}' ORDER BY b.benchmark_id DESC LIMIT ${last_n_commits};\",\n          \"refId\": \"A\",\n          \"sql\": {\n            \"columns\": [\n              {\n                \"parameters\": [],\n                \"type\": \"function\"\n              }\n            ],\n            \"groupBy\": [\n              {\n                \"property\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"groupBy\"\n              }\n            ],\n            \"limit\": 50\n          }\n        }\n      ],\n      \"title\": \"Fourth compile generate\",\n      \"transformations\": [\n        {\n          \"id\": \"sortBy\",\n          \"options\": {\n            \"fields\": {},\n            \"sort\": [\n              {\n                \"field\": \"time\"\n              }\n            ]\n          }\n        }\n      ],\n      \"transparent\": true,\n      \"type\": \"barchart\"\n    },\n    {\n      \"collapsed\": true,\n      \"gridPos\": {\n        \"h\": 1,\n        \"w\": 24,\n        \"x\": 0,\n        \"y\": 64\n      },\n      \"id\": 15,\n      \"panels\": [\n        {\n          \"datasource\": {},\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisBorderShow\": false,\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"barWidthFactor\": 0.6,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"insertNulls\": 60000,\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"percent\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 9,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 65\n          },\n          \"id\": 1,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"default\": true,\n                \"type\": \"grafana-postgresql-datasource\",\n                \"uid\": \"be28nkzirtb0gd\"\n              },\n              \"editorMode\": \"code\",\n              \"format\": \"table\",\n              \"rawQuery\": true,\n              \"rawSql\": \"SELECT\\n  d.cpu_util,\\n  d.time\\nFROM\\n  benchmarks AS b\\n  JOIN device_measurements AS d ON b.benchmark_id = d.benchmark_id\\nWHERE\\n  branch = '${branch}';\",\n              \"refId\": \"A\",\n              \"sql\": {\n                \"columns\": [\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"cpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"\\\"time\\\"\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  }\n                ],\n                \"groupBy\": [\n                  {\n                    \"property\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"groupBy\"\n                  }\n                ],\n                \"limit\": 50,\n                \"whereJsonTree\": {\n                  \"children1\": [\n                    {\n                      \"id\": \"baa888b8-89ab-4cde-b012-31922f8671e9\",\n                      \"properties\": {\n                        \"field\": \"commit_id\",\n                        \"fieldSrc\": \"field\",\n                        \"operator\": \"equal\",\n                        \"value\": [\n                          \"${commit}\"\n                        ],\n                        \"valueError\": [\n                          null\n                        ],\n                        \"valueSrc\": [\n                          \"value\"\n                        ],\n                        \"valueType\": [\n                          \"text\"\n                        ]\n                      },\n                      \"type\": \"rule\"\n                    }\n                  ],\n                  \"id\": \"bab88a98-0123-4456-b89a-b1922f7d4f11\",\n                  \"type\": \"group\"\n                },\n                \"whereString\": \"commit_id = '${commit}'\"\n              },\n              \"table\": \"measurements\"\n            }\n          ],\n          \"title\": \"CPU Utilization\",\n          \"transparent\": true,\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {},\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisBorderShow\": false,\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"barWidthFactor\": 0.6,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"insertNulls\": 60000,\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"percent\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 9,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 65\n          },\n          \"id\": 4,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"default\": true,\n                \"type\": \"grafana-postgresql-datasource\",\n                \"uid\": \"be28nkzirtb0gd\"\n              },\n              \"editorMode\": \"code\",\n              \"format\": \"table\",\n              \"rawQuery\": true,\n              \"rawSql\": \"SELECT\\n  b.commit_id,\\n  d.gpu_util,\\n  d.time\\nFROM\\n  benchmarks AS b\\n  JOIN device_measurements AS d ON b.benchmark_id = d.benchmark_id\\nWHERE\\n  branch = '${branch}';\",\n              \"refId\": \"A\",\n              \"sql\": {\n                \"columns\": [\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"cpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"\\\"time\\\"\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  }\n                ],\n                \"groupBy\": [\n                  {\n                    \"property\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"groupBy\"\n                  }\n                ],\n                \"limit\": 50,\n                \"whereJsonTree\": {\n                  \"children1\": [\n                    {\n                      \"id\": \"baa888b8-89ab-4cde-b012-31922f8671e9\",\n                      \"properties\": {\n                        \"field\": \"commit_id\",\n                        \"fieldSrc\": \"field\",\n                        \"operator\": \"equal\",\n                        \"value\": [\n                          \"${commit}\"\n                        ],\n                        \"valueError\": [\n                          null\n                        ],\n                        \"valueSrc\": [\n                          \"value\"\n                        ],\n                        \"valueType\": [\n                          \"text\"\n                        ]\n                      },\n                      \"type\": \"rule\"\n                    }\n                  ],\n                  \"id\": \"bab88a98-0123-4456-b89a-b1922f7d4f11\",\n                  \"type\": \"group\"\n                },\n                \"whereString\": \"commit_id = '${commit}'\"\n              },\n              \"table\": \"measurements\"\n            }\n          ],\n          \"title\": \"GPU Utilization\",\n          \"transparent\": true,\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {},\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisBorderShow\": false,\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"barWidthFactor\": 0.6,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"insertNulls\": 60000,\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"decmbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 9,\n            \"w\": 12,\n            \"x\": 0,\n            \"y\": 74\n          },\n          \"id\": 2,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"default\": true,\n                \"type\": \"grafana-postgresql-datasource\",\n                \"uid\": \"be28nkzirtb0gd\"\n              },\n              \"editorMode\": \"code\",\n              \"format\": \"table\",\n              \"rawQuery\": true,\n              \"rawSql\": \"SELECT d.mem_megabytes, d.time FROM benchmarks AS b JOIN device_measurements AS d ON b.benchmark_id = d.benchmark_id WHERE branch = '${branch}';\",\n              \"refId\": \"A\",\n              \"sql\": {\n                \"columns\": [\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"cpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"\\\"time\\\"\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  }\n                ],\n                \"groupBy\": [\n                  {\n                    \"property\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"groupBy\"\n                  }\n                ],\n                \"limit\": 50,\n                \"whereJsonTree\": {\n                  \"children1\": [\n                    {\n                      \"id\": \"baa888b8-89ab-4cde-b012-31922f8671e9\",\n                      \"properties\": {\n                        \"field\": \"commit_id\",\n                        \"fieldSrc\": \"field\",\n                        \"operator\": \"equal\",\n                        \"value\": [\n                          \"${commit}\"\n                        ],\n                        \"valueError\": [\n                          null\n                        ],\n                        \"valueSrc\": [\n                          \"value\"\n                        ],\n                        \"valueType\": [\n                          \"text\"\n                        ]\n                      },\n                      \"type\": \"rule\"\n                    }\n                  ],\n                  \"id\": \"bab88a98-0123-4456-b89a-b1922f7d4f11\",\n                  \"type\": \"group\"\n                },\n                \"whereString\": \"commit_id = '${commit}'\"\n              },\n              \"table\": \"measurements\"\n            }\n          ],\n          \"title\": \"Memory usage\",\n          \"transparent\": true,\n          \"type\": \"timeseries\"\n        },\n        {\n          \"datasource\": {},\n          \"fieldConfig\": {\n            \"defaults\": {\n              \"color\": {\n                \"mode\": \"palette-classic\"\n              },\n              \"custom\": {\n                \"axisBorderShow\": false,\n                \"axisCenteredZero\": false,\n                \"axisColorMode\": \"text\",\n                \"axisLabel\": \"\",\n                \"axisPlacement\": \"auto\",\n                \"barAlignment\": 0,\n                \"barWidthFactor\": 0.6,\n                \"drawStyle\": \"line\",\n                \"fillOpacity\": 0,\n                \"gradientMode\": \"none\",\n                \"hideFrom\": {\n                  \"legend\": false,\n                  \"tooltip\": false,\n                  \"viz\": false\n                },\n                \"insertNulls\": 60000,\n                \"lineInterpolation\": \"linear\",\n                \"lineWidth\": 1,\n                \"pointSize\": 5,\n                \"scaleDistribution\": {\n                  \"type\": \"linear\"\n                },\n                \"showPoints\": \"auto\",\n                \"spanNulls\": false,\n                \"stacking\": {\n                  \"group\": \"A\",\n                  \"mode\": \"none\"\n                },\n                \"thresholdsStyle\": {\n                  \"mode\": \"off\"\n                }\n              },\n              \"mappings\": [],\n              \"thresholds\": {\n                \"mode\": \"absolute\",\n                \"steps\": [\n                  {\n                    \"color\": \"green\"\n                  },\n                  {\n                    \"color\": \"red\",\n                    \"value\": 80\n                  }\n                ]\n              },\n              \"unit\": \"decmbytes\"\n            },\n            \"overrides\": []\n          },\n          \"gridPos\": {\n            \"h\": 9,\n            \"w\": 12,\n            \"x\": 12,\n            \"y\": 74\n          },\n          \"id\": 3,\n          \"options\": {\n            \"legend\": {\n              \"calcs\": [],\n              \"displayMode\": \"list\",\n              \"placement\": \"bottom\",\n              \"showLegend\": true\n            },\n            \"tooltip\": {\n              \"mode\": \"single\",\n              \"sort\": \"none\"\n            }\n          },\n          \"targets\": [\n            {\n              \"datasource\": {\n                \"default\": true,\n                \"type\": \"grafana-postgresql-datasource\",\n                \"uid\": \"be28nkzirtb0gd\"\n              },\n              \"editorMode\": \"code\",\n              \"format\": \"table\",\n              \"rawQuery\": true,\n              \"rawSql\": \"SELECT\\n  d.gpu_mem_megabytes,\\n  d.time\\nFROM\\n  benchmarks AS b\\n  JOIN device_measurements AS d ON b.benchmark_id = d.benchmark_id\\nWHERE\\n  branch = '${branch}';\",\n              \"refId\": \"A\",\n              \"sql\": {\n                \"columns\": [\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"cpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_util\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"gpu_mem_megabytes\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  },\n                  {\n                    \"parameters\": [\n                      {\n                        \"name\": \"\\\"time\\\"\",\n                        \"type\": \"functionParameter\"\n                      }\n                    ],\n                    \"type\": \"function\"\n                  }\n                ],\n                \"groupBy\": [\n                  {\n                    \"property\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"groupBy\"\n                  }\n                ],\n                \"limit\": 50,\n                \"whereJsonTree\": {\n                  \"children1\": [\n                    {\n                      \"id\": \"baa888b8-89ab-4cde-b012-31922f8671e9\",\n                      \"properties\": {\n                        \"field\": \"commit_id\",\n                        \"fieldSrc\": \"field\",\n                        \"operator\": \"equal\",\n                        \"value\": [\n                          \"${commit}\"\n                        ],\n                        \"valueError\": [\n                          null\n                        ],\n                        \"valueSrc\": [\n                          \"value\"\n                        ],\n                        \"valueType\": [\n                          \"text\"\n                        ]\n                      },\n                      \"type\": \"rule\"\n                    }\n                  ],\n                  \"id\": \"bab88a98-0123-4456-b89a-b1922f7d4f11\",\n                  \"type\": \"group\"\n                },\n                \"whereString\": \"commit_id = '${commit}'\"\n              },\n              \"table\": \"measurements\"\n            }\n          ],\n          \"title\": \"GPU memory usage\",\n          \"transparent\": true,\n          \"type\": \"timeseries\"\n        }\n      ],\n      \"title\": \"Usage metrics\",\n      \"type\": \"row\"\n    }\n  ],\n  \"schemaVersion\": 39,\n  \"tags\": [],\n  \"templating\": {\n    \"list\": [\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"main\",\n          \"value\": \"main\"\n        },\n        \"datasource\": {\n          \"default\": true,\n          \"type\": \"grafana-postgresql-datasource\",\n          \"uid\": \"be28nkzirtb0gd\"\n        },\n        \"definition\": \"SELECT DISTINCT branch FROM benchmarks;\",\n        \"description\": \"\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"branch\",\n        \"multi\": false,\n        \"name\": \"branch\",\n        \"options\": [],\n        \"query\": \"SELECT DISTINCT branch FROM benchmarks;\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"1729701492845\",\n          \"value\": \"1729701492845\"\n        },\n        \"datasource\": {\n          \"default\": true,\n          \"type\": \"grafana-postgresql-datasource\",\n          \"uid\": \"be28nkzirtb0gd\"\n        },\n        \"definition\": \"SELECT created_at - INTERVAL '5 secs' FROM benchmarks WHERE branch = '${branch}' ORDER BY benchmark_id ASC LIMIT 1;\",\n        \"description\": \"\",\n        \"hide\": 2,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"name\": \"StartTime\",\n        \"options\": [],\n        \"query\": \"SELECT created_at - INTERVAL '5 secs' FROM benchmarks WHERE branch = '${branch}' ORDER BY benchmark_id ASC LIMIT 1;\",\n        \"refresh\": 2,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"1730393397577\",\n          \"value\": \"1730393397577\"\n        },\n        \"datasource\": {\n          \"default\": true,\n          \"type\": \"grafana-postgresql-datasource\",\n          \"uid\": \"be28nkzirtb0gd\"\n        },\n        \"definition\": \"SELECT time + INTERVAL '5 secs' FROM benchmarks AS b JOIN device_measurements AS d ON b.benchmark_id = d.benchmark_id WHERE branch = '${branch}' ORDER BY b.benchmark_id DESC, d.measurement_id DESC LIMIT 1;\",\n        \"description\": \"\",\n        \"hide\": 2,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"name\": \"EndTime\",\n        \"options\": [],\n        \"query\": \"SELECT time + INTERVAL '5 secs' FROM benchmarks AS b JOIN device_measurements AS d ON b.benchmark_id = d.benchmark_id WHERE branch = '${branch}' ORDER BY b.benchmark_id DESC, d.measurement_id DESC LIMIT 1;\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": false,\n          \"text\": \"NVIDIA A10G\",\n          \"value\": \"NVIDIA A10G\"\n        },\n        \"datasource\": {\n          \"type\": \"grafana-postgresql-datasource\",\n          \"uid\": \"be28nkzirtb0gd\"\n        },\n        \"definition\": \"SELECT DISTINCT metadata->>'gpu_name' FROM benchmarks;\",\n        \"description\": \"\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"GPU\",\n        \"multi\": false,\n        \"name\": \"gpu_name\",\n        \"options\": [],\n        \"query\": \"SELECT DISTINCT metadata->>'gpu_name' FROM benchmarks;\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"skipUrlSync\": false,\n        \"sort\": 0,\n        \"type\": \"query\"\n      },\n      {\n        \"current\": {\n          \"selected\": true,\n          \"text\": \"10\",\n          \"value\": \"10\"\n        },\n        \"description\": \"The number of commits to display, going from most recent to the nth commit.\",\n        \"hide\": 0,\n        \"label\": \"Last # of commits\",\n        \"name\": \"last_n_commits\",\n        \"options\": [\n          {\n            \"selected\": true,\n            \"text\": \"10\",\n            \"value\": \"10\"\n          }\n        ],\n        \"query\": \"10\",\n        \"skipUrlSync\": false,\n        \"type\": \"textbox\"\n      }\n    ]\n  },\n  \"time\": {\n    \"from\": \"now-1h\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"hidden\": false\n  },\n  \"timezone\": \"browser\",\n  \"title\": \"Transformers benchmarks\",\n  \"uid\": \"fdz33iyzln9c0a\",\n  \"version\": 10,\n  \"weekStart\": \"\"\n}\n",
        "# Copyright 2024 The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Testing suite for the PyTorch emu3 model.\"\"\"\n\nimport unittest\n\nimport numpy as np\nimport pytest\nimport requests\nfrom huggingface_hub import hf_hub_download\nfrom parameterized import parameterized\n\nfrom transformers import Emu3Config, Emu3TextConfig, is_torch_available, is_vision_available, set_seed\nfrom transformers.testing_utils import (\n    Expectations,\n    require_bitsandbytes,\n    require_torch,\n    require_torch_large_accelerator,\n    slow,\n    torch_device,\n)\n\nfrom ...generation.test_utils import GenerationTesterMixin\nfrom ...test_configuration_common import ConfigTester\nfrom ...test_modeling_common import ModelTesterMixin, floats_tensor, ids_tensor\nfrom ...test_pipeline_mixin import PipelineTesterMixin\n\n\nif is_vision_available():\n    from PIL import Image\n\nif is_torch_available():\n    import torch\n\n    from transformers import (\n        Emu3ForCausalLM,\n        Emu3ForConditionalGeneration,\n        Emu3Model,\n        Emu3Processor,\n        Emu3TextModel,\n    )\n\n\nclass Emu3Text2TextModelTester:\n    def __init__(\n        self,\n        parent,\n        batch_size=13,\n        seq_length=7,\n        is_training=False,\n        vocab_size=99,\n        hidden_size=32,\n        num_hidden_layers=2,\n        num_attention_heads=2,\n        num_key_value_heads=2,\n        intermediate_size=37,\n        max_position_embeddings=512,\n        initializer_range=0.02,\n        pad_token_id=0,\n        bos_token_id=1,\n        eos_token_id=2,\n    ):\n        self.parent = parent\n        self.batch_size = batch_size\n        self.seq_length = seq_length\n        self.is_training = is_training\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.num_key_value_heads = num_key_value_heads\n        self.intermediate_size = intermediate_size\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.pad_token_id = pad_token_id\n        self.bos_token_id = bos_token_id\n        self.eos_token_id = eos_token_id\n\n    def prepare_config_and_inputs(self):\n        input_ids = ids_tensor([self.batch_size, self.seq_length], self.vocab_size)\n        attention_mask = input_ids.ne(self.pad_token_id).to(torch_device)\n\n        config = self.get_config()\n\n        return config, input_ids, attention_mask\n\n    def get_config(self):\n        return Emu3TextConfig(\n            vocab_size=self.vocab_size,\n            hidden_size=self.hidden_size,\n            num_hidden_layers=self.num_hidden_layers,\n            num_attention_heads=self.num_attention_heads,\n            num_key_value_heads=self.num_key_value_heads,\n            intermediate_size=self.intermediate_size,\n            max_position_embeddings=self.max_position_embeddings,\n            is_decoder=False,\n            initializer_range=self.initializer_range,\n            pad_token_id=self.pad_token_id,\n            bos_token_id=self.bos_token_id,\n            eos_token_id=self.eos_token_id,\n        )\n\n    def prepare_config_and_inputs_for_common(self):\n        config_and_inputs = self.prepare_config_and_inputs()\n        (\n            config,\n            input_ids,\n            attention_mask,\n        ) = config_and_inputs\n        inputs_dict = {\"input_ids\": input_ids, \"attention_mask\": attention_mask}\n        return config, inputs_dict\n\n\n@require_torch\nclass Emu3Text2TextModelTest(ModelTesterMixin, GenerationTesterMixin, PipelineTesterMixin, unittest.TestCase):\n    all_model_classes = (Emu3ForCausalLM,) if is_torch_available() else ()\n    pipeline_model_mapping = (\n        {\n            \"text-generation\": Emu3ForCausalLM,\n        }\n        if is_torch_available()\n        else {}\n    )\n    test_headmasking = False\n    test_pruning = False\n    fx_compatible = False\n\n    def setUp(self):\n        self.model_tester = Emu3Text2TextModelTester(self)\n        self.config_tester = ConfigTester(self, config_class=Emu3TextConfig, hidden_size=37)\n\n    def test_config(self):\n        self.config_tester.run_common_tests()\n\n    @parameterized.expand([(\"linear\",), (\"dynamic\",)])\n    def test_model_rope_scaling(self, scaling_type):\n        config, _ = self.model_tester.prepare_config_and_inputs_for_common()\n        short_input = ids_tensor([1, 10], config.vocab_size)\n        long_input = ids_tensor([1, int(config.max_position_embeddings * 1.5)], config.vocab_size)\n\n        set_seed(42)  # Fixed seed at init time so the two models get the same random weights\n        original_model = Emu3TextModel(config)\n        original_model.to(torch_device)\n        original_model.eval()\n        original_short_output = original_model(short_input).last_hidden_state\n        original_long_output = original_model(long_input).last_hidden_state\n\n        set_seed(42)  # Fixed seed at init time so the two models get the same random weights\n        config.rope_scaling = {\"type\": scaling_type, \"factor\": 10.0}\n        scaled_model = Emu3TextModel(config)\n        scaled_model.to(torch_device)\n        scaled_model.eval()\n        scaled_short_output = scaled_model(short_input).last_hidden_state\n        scaled_long_output = scaled_model(long_input).last_hidden_state\n\n        # Dynamic scaling does not change the RoPE embeddings until it receives an input longer than the original\n        # maximum sequence length, so the outputs for the short input should match.\n        if scaling_type == \"dynamic\":\n            torch.testing.assert_close(original_short_output, scaled_short_output, rtol=1e-5, atol=1e-5)\n        else:\n            self.assertFalse(torch.allclose(original_short_output, scaled_short_output, atol=1e-5))\n\n        # The output should be different for long inputs\n        self.assertFalse(torch.allclose(original_long_output, scaled_long_output, atol=1e-5))\n\n    @unittest.skip(\"Doesn't work, tensors are not almost same\")  # TODO raushan fixme\n    def test_custom_4d_attention_mask(self):\n        pass\n\n\nclass Emu3Vision2TextModelTester:\n    def __init__(\n        self,\n        parent,\n        batch_size=13,\n        seq_length=7,\n        is_training=False,\n        vocab_size=99,\n        hidden_size=32,\n        num_hidden_layers=2,\n        num_attention_heads=2,\n        num_key_value_heads=2,\n        intermediate_size=37,\n        max_position_embeddings=512,\n        initializer_range=0.02,\n        pad_token_id=0,\n        bos_token_id=1,\n        eos_token_id=2,\n        image_token_id=3,\n        image_size=15,\n        codebook_size=20,\n        temporal_downsample_factor=1,\n        base_channels=32,\n        vq_channel_multiplier=[1, 2, 1],\n        image_seq_length=12,\n        vq_img_token_start_id=3,\n    ):\n        self.parent = parent\n        self.batch_size = batch_size\n        self.is_training = is_training\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.num_key_value_heads = num_key_value_heads\n        self.intermediate_size = intermediate_size\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.pad_token_id = pad_token_id\n        self.bos_token_id = bos_token_id\n        self.eos_token_id = eos_token_id\n        self.image_token_id = image_token_id\n        self.image_size = image_size\n        self.codebook_size = codebook_size\n        self.temporal_downsample_factor = temporal_downsample_factor\n        self.vq_channel_multiplier = vq_channel_multiplier\n        self.vq_img_token_start_id = vq_img_token_start_id\n        self.base_channels = base_channels\n        self.seq_length = seq_length + image_seq_length\n        self.image_seq_length = image_seq_length\n\n    def prepare_config_and_inputs(self):\n        config = self.get_config()\n\n        input_ids = ids_tensor([self.batch_size, self.seq_length], config.text_config.vocab_size)\n        input_ids[input_ids == self.image_token_id] = self.pad_token_id\n        input_ids[:, : self.image_seq_length] = self.image_token_id\n        attention_mask = input_ids.ne(self.pad_token_id).to(torch_device)\n\n        pixel_values = floats_tensor(\n            [\n                self.batch_size,\n                3,\n                self.image_size,\n                self.image_size,\n            ]\n        )\n        image_sizes = [[self.image_size, self.image_size]] * self.batch_size\n        image_sizes = torch.tensor(image_sizes, device=torch_device, dtype=torch.int64)\n\n        return config, input_ids, attention_mask, pixel_values, image_sizes\n\n    def get_config(self):\n        # create dummy vocab map for image2bpe mapping if it needs remapping\n        # we assume that vocab size is big enough to account for `codebook_size` amount of\n        # image tokens somewhere at the beginning of total vocab size\n\n        vocab_map = {i: chr(i) for i in range(self.vocab_size)}\n        start = self.vq_img_token_start_id\n        end = self.vq_img_token_start_id + self.codebook_size\n        for i in range(start, end):\n            # dummy str for each token, anything that fits pattern \"<|visual token XXXXXX|>\"\n            vocab_map[i] = f\"<|visual token{i:06d}|>\"\n\n        # add tokens that have to be in the vocab, we'll retrieve their ids later in modeling code\n        vocab_map[self.image_token_id] = \"<image>\"\n        vocab_map[self.image_token_id + 1] = \"<|extra_200|>\"\n        vocab_map = {v: k for k, v in vocab_map.items()}\n\n        text_config = Emu3TextConfig(\n            vocab_size=self.vocab_size,\n            hidden_size=self.hidden_size,\n            num_hidden_layers=self.num_hidden_layers,\n            num_attention_heads=self.num_attention_heads,\n            num_key_value_heads=self.num_key_value_heads,\n            intermediate_size=self.intermediate_size,\n            max_position_embeddings=self.max_position_embeddings,\n            initializer_range=self.initializer_range,\n            pad_token_id=self.pad_token_id,\n            bos_token_id=self.bos_token_id,\n            eos_token_id=self.eos_token_id,\n        )\n\n        vq_config = {\n            \"codebook_size\": self.codebook_size,\n            \"temporal_downsample_factor\": self.temporal_downsample_factor,\n            \"base_channels\": self.base_channels,\n            \"channel_multiplier\": self.vq_channel_multiplier,\n            \"hidden_size\": self.base_channels,\n            \"attn_resolutions\": [],\n        }\n        return Emu3Config(text_config=text_config, vq_config=vq_config, vocabulary_map=vocab_map)\n\n    def prepare_config_and_inputs_for_common(self):\n        config_and_inputs = self.prepare_config_and_inputs()\n        (\n            config,\n            input_ids,\n            attention_mask,\n            pixel_values,\n            image_sizes,\n        ) = config_and_inputs\n        inputs_dict = {\n            \"input_ids\": input_ids,\n            \"attention_mask\": attention_mask,\n            \"pixel_values\": pixel_values,\n            \"image_sizes\": image_sizes,\n        }\n        return config, inputs_dict\n\n\n@require_torch\nclass Emu3Vision2TextModelTest(ModelTesterMixin, GenerationTesterMixin, PipelineTesterMixin, unittest.TestCase):\n    all_model_classes = (\n        (\n            Emu3Model,\n            Emu3ForConditionalGeneration,\n        )\n        if is_torch_available()\n        else ()\n    )\n    pipeline_model_mapping = {}\n    test_headmasking = False\n    test_pruning = False\n    fx_compatible = False\n\n    def setUp(self):\n        self.model_tester = Emu3Vision2TextModelTester(self)\n        self.config_tester = ConfigTester(self, config_class=Emu3Config, has_text_modality=False, hidden_size=37)\n\n    def test_config(self):\n        self.config_tester.run_common_tests()\n\n    @unittest.skip(\n        \"Emu3 has a VQ module that uses `weight.data` directly in forward which prevent offloding on that module\"\n    )\n    def test_disk_offload_safetensors(self):\n        pass\n\n    @unittest.skip(\n        \"Emu3 has a VQ module that uses `weight.data` directly in forward which prevent offloding on that module\"\n    )\n    def test_disk_offload_bin(self):\n        pass\n\n    @unittest.skip(\n        \"Emu3 has a VQ module that uses `weight.data` directly in forward which prevent offloding on that module\"\n    )\n    def test_cpu_offload(self):\n        pass\n\n    @unittest.skip(\"VQ-VAE module doesn't initialize weights properly\")\n    def test_initialization(self):\n        pass\n\n    @pytest.mark.generate\n    @unittest.skip(\"Emu3 has dynamic control flow in vision backbone\")\n    def test_generate_with_static_cache(self):\n        pass\n\n    # @unittest.skip(\"Emu3 can't be smaller than currently if we want to downsample images\")\n    # def test_model_is_small(self):\n    #     pass\n\n\n@require_torch\nclass Emu3IntegrationTest(unittest.TestCase):\n    @slow\n    @require_bitsandbytes\n    def test_model_generation(self):\n        model = Emu3ForConditionalGeneration.from_pretrained(\"BAAI/Emu3-Chat-hf\", load_in_4bit=True)\n        processor = Emu3Processor.from_pretrained(\"BAAI/Emu3-Chat-hf\")\n\n        image = Image.open(requests.get(\"https://picsum.photos/id/237/200/200\", stream=True).raw)\n        prompt = \"USER: <image>Describe what do you see here and tell me about the history behind it? ASSISTANT:\"\n\n        inputs = processor(images=image, text=prompt, return_tensors=\"pt\").to(model.device, torch.float16)\n\n        # greedy generation outputs\n        EXPECTED_TEXT_COMPLETION = ['USER: 64*64Describe what do you see here and tell me about the history behind it? ASSISTANT: The image captures a moment of tranquility with a black Labrador Retriever resting on a wooden floor. The dog, with its glossy black coat, is lying down with its front legs stretched out in']  # fmt: skip\n        generated_ids = model.generate(**inputs, max_new_tokens=40, do_sample=False)\n        text = processor.batch_decode(generated_ids, skip_special_tokens=True)\n        self.assertEqual(EXPECTED_TEXT_COMPLETION, text)\n\n    @slow\n    @require_bitsandbytes\n    @require_torch_large_accelerator\n    def test_model_generation_batched(self):\n        model = Emu3ForConditionalGeneration.from_pretrained(\"BAAI/Emu3-Chat-hf\", load_in_4bit=True)\n        processor = Emu3Processor.from_pretrained(\"BAAI/Emu3-Chat-hf\")\n        processor.tokenizer.padding_side = \"left\"\n\n        image = Image.open(requests.get(\"https://picsum.photos/id/237/50/50\", stream=True).raw)\n        image_2 = Image.open(requests.get(\"https://picsum.photos/id/247/50/50\", stream=True).raw)\n        prompts = [\n            \"USER: <image>Describe what do you see here? ASSISTANT:\",\n            \"USER: <image>What can you say about the image? ASSISTANT:\",\n        ]\n\n        inputs = processor(images=[image, image_2], text=prompts, padding=True, return_tensors=\"pt\").to(\n            model.device, torch.float16\n        )\n\n        # greedy generation outputs\n        EXPECTED_TEXT_COMPLETIONS = Expectations(\n            {\n                (\"xpu\", 3): [\n                    \"USER: 64*64Describe what do you see here? ASSISTANT: The image depicts a black panther in a crouched position. The panther's body is elongated and its head is lowered, suggesting a state of alertness or readiness. The animal's\",\n                    \"USER: 64*64What can you say about the image? ASSISTANT: The image depicts a serene natural landscape. The foreground consists of a grassy area with some patches of bare earth. The middle ground shows a gently sloping hill with a reddish-brown hue,\",\n                ],\n                (None, None): [\n                    \"USER: 64*64Describe what do you see here? ASSISTANT: The image depicts a black panther in a crouched position. The panther's body is elongated and curved, with its head lowered and ears pointed forward, suggesting alertness or focus.\",\n                    \"USER: 64*64What can you say about the image? ASSISTANT: The image depicts a serene natural landscape. The foreground consists of a grassy area with some patches of bare earth. The middle ground shows a steep, reddish-brown cliff, which could be a\",\n                ],\n                # We switch to A10 on 2025/06/29, and A10 gives strange values\n                (\"cuda\", 8): [\n                    'USER: 64*64Describe what do you see here? ASSISTANT: 1.Filed with 1.Computing theComputing.Computing.',\n                    'USER: 64*64What can you say about the image? ASSISTANT: 1.Filed with theComputing theComputing.Computing.',\n                ],\n            }\n        )  # fmt: skip\n        EXPECTED_TEXT_COMPLETION = EXPECTED_TEXT_COMPLETIONS.get_expectation()\n\n        generated_ids = model.generate(**inputs, max_new_tokens=40, do_sample=False)\n        text = processor.batch_decode(generated_ids, skip_special_tokens=True)\n        self.assertEqual(EXPECTED_TEXT_COMPLETION, text)\n\n    @slow\n    @require_bitsandbytes\n    @require_torch_large_accelerator\n    def test_model_generation_multi_image(self):\n        model = Emu3ForConditionalGeneration.from_pretrained(\"BAAI/Emu3-Chat-hf\", load_in_4bit=True)\n        processor = Emu3Processor.from_pretrained(\"BAAI/Emu3-Chat-hf\")\n\n        image = Image.open(requests.get(\"https://picsum.photos/id/237/50/50\", stream=True).raw)\n        image_2 = Image.open(requests.get(\"https://picsum.photos/id/247/50/50\", stream=True).raw)\n        prompt = \"USER: <image><image>What do these two images have in common? ASSISTANT:\"\n\n        inputs = processor(images=[image, image_2], text=prompt, return_tensors=\"pt\").to(model.device, torch.float16)\n\n        # greedy generation outputs\n        EXPECTED_TEXT_COMPLETIONS = Expectations(\n                {\n                    (\"xpu\", 3): ['USER: 64*6464*64What do these two images have in common? ASSISTANT: The two images both depict a rhinoceros, yet they are significantly different in terms of focus and clarity. The rhinoceros in the upper image is in sharp focus, showing detailed textures'],\n                    (None, None): [\"USER: 64*6464*64What do these two images have in common? ASSISTANT: Both images feature a black animal, but they are not the same animal. The top image shows a close-up of a black cow's head, while the bottom image depicts a black cow in a natural\"],\n                    # We switch to A10 on 2025/06/29, and A10 gives strange values\n                    (\"cuda\", 8): ['USER: 64*6464*64What do these two images have in common? ASSISTANT:Computing.Filed.Filed.11.Computing theComputing.Computing.'],\n                }\n            )  # fmt: skip\n        EXPECTED_TEXT_COMPLETION = EXPECTED_TEXT_COMPLETIONS.get_expectation()\n        generated_ids = model.generate(**inputs, max_new_tokens=40, do_sample=False)\n        text = processor.batch_decode(generated_ids, skip_special_tokens=True)\n        self.assertEqual(EXPECTED_TEXT_COMPLETION, text)\n\n    @slow\n    @require_bitsandbytes\n    @require_torch_large_accelerator\n    def test_model_generate_images(self):\n        model = Emu3ForConditionalGeneration.from_pretrained(\"BAAI/Emu3-Gen-hf\", load_in_4bit=True)\n        processor = Emu3Processor.from_pretrained(\"BAAI/Emu3-Gen-hf\")\n\n        inputs = processor(\n            text=[\"a portrait of young girl. masterpiece, film grained, best quality.\"],\n            padding=True,\n            return_tensors=\"pt\",\n            return_for_image_generation=True,\n            image_area=1600,\n        ).to(model.device)\n        self.assertTrue(inputs.input_ids.shape[1] == 21)\n\n        image_sizes = inputs.pop(\"image_sizes\")\n        HEIGHT, WIDTH = image_sizes[0]\n        VISUAL_TOKENS = model.vocabulary_mapping.image_tokens\n\n        def prefix_allowed_tokens_fn(batch_id, input_ids):\n            height, width = HEIGHT, WIDTH\n            visual_tokens = VISUAL_TOKENS\n            image_wrapper_token_id = torch.tensor([processor.tokenizer.image_wrapper_token_id], device=model.device)\n            eoi_token_id = torch.tensor([processor.tokenizer.eoi_token_id], device=model.device)\n            eos_token_id = torch.tensor([processor.tokenizer.eos_token_id], device=model.device)\n            pad_token_id = torch.tensor([processor.tokenizer.pad_token_id], device=model.device)\n            eof_token_id = torch.tensor([processor.tokenizer.eof_token_id], device=model.device)\n            eol_token_id = processor.tokenizer.encode(\"<|extra_200|>\", return_tensors=\"pt\")[0]\n\n            position = torch.nonzero(input_ids == image_wrapper_token_id, as_tuple=True)[0][0]\n            offset = input_ids.shape[0] - position\n            if offset % (width + 1) == 0:\n                return (eol_token_id,)\n            elif offset == (width + 1) * height + 1:\n                return (eof_token_id,)\n            elif offset == (width + 1) * height + 2:\n                return (eoi_token_id,)\n            elif offset == (width + 1) * height + 3:\n                return (eos_token_id,)\n            elif offset > (width + 1) * height + 3:\n                return (pad_token_id,)\n            else:\n                return visual_tokens\n\n        out = model.generate(\n            **inputs,\n            max_new_tokens=200,\n            prefix_allowed_tokens_fn=prefix_allowed_tokens_fn,\n            do_sample=False,\n        )\n        self.assertTrue(out.shape[1] == 54)\n\n        image = model.decode_image_tokens(image_tokens=out[:, inputs.input_ids.shape[1] :], height=HEIGHT, width=WIDTH)\n        images = processor.postprocess(list(image.float()), return_tensors=\"np\")\n        self.assertTrue(images[\"pixel_values\"].shape == (3, 40, 40))\n        self.assertTrue(isinstance(images[\"pixel_values\"], np.ndarray))\n\n        filepath = hf_hub_download(\n            repo_id=\"raushan-testing-hf/images_test\",\n            filename=\"emu3_image.npy\",\n            repo_type=\"dataset\",\n        )\n        original_pixels = np.load(filepath)\n        self.assertTrue(np.allclose(original_pixels, images[\"pixel_values\"], atol=1))\n",
        "# Copyright 2018 Google T5 Authors and HuggingFace Inc. team.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport copy\nimport os\nimport pickle\nimport tempfile\nimport unittest\n\nfrom transformers import T5Config, is_torch_available\nfrom transformers.models.auto.modeling_auto import MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES\nfrom transformers.pytorch_utils import is_torch_greater_or_equal_than_2_4\nfrom transformers.testing_utils import (\n    cleanup,\n    require_accelerate,\n    require_sentencepiece,\n    require_tokenizers,\n    require_torch,\n    require_torch_accelerator,\n    slow,\n    torch_device,\n)\nfrom transformers.utils import cached_property\nfrom transformers.utils.fx import symbolic_trace\n\nfrom ...generation.test_utils import GenerationTesterMixin\nfrom ...test_configuration_common import ConfigTester\nfrom ...test_modeling_common import ModelTesterMixin, _config_zero_init, ids_tensor\nfrom ...test_pipeline_mixin import PipelineTesterMixin\n\n\nif is_torch_available():\n    import torch\n    import torch.nn.functional as F\n\n    from transformers import (\n        AutoTokenizer,\n        ByT5Tokenizer,\n        T5EncoderModel,\n        T5ForConditionalGeneration,\n        T5ForQuestionAnswering,\n        T5ForSequenceClassification,\n        T5ForTokenClassification,\n        T5Model,\n        T5Tokenizer,\n    )\n\n\nclass T5ModelTester:\n    def __init__(\n        self,\n        parent,\n        vocab_size=99,\n        batch_size=13,\n        encoder_seq_length=7,\n        decoder_seq_length=7,\n        # For common tests\n        is_training=True,\n        use_attention_mask=True,\n        use_labels=True,\n        hidden_size=32,\n        num_hidden_layers=2,\n        num_attention_heads=4,\n        d_ff=37,\n        relative_attention_num_buckets=8,\n        dropout_rate=0.1,\n        initializer_factor=0.002,\n        eos_token_id=1,\n        pad_token_id=0,\n        decoder_start_token_id=0,\n        scope=None,\n        decoder_layers=None,\n    ):\n        self.parent = parent\n        self.batch_size = batch_size\n        self.encoder_seq_length = encoder_seq_length\n        self.decoder_seq_length = decoder_seq_length\n        # For common tests\n        self.seq_length = self.decoder_seq_length\n        self.is_training = is_training\n        self.use_attention_mask = use_attention_mask\n        self.use_labels = use_labels\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.d_ff = d_ff\n        self.relative_attention_num_buckets = relative_attention_num_buckets\n        self.dropout_rate = dropout_rate\n        self.initializer_factor = initializer_factor\n        self.eos_token_id = eos_token_id\n        self.pad_token_id = pad_token_id\n        self.decoder_start_token_id = decoder_start_token_id\n        self.scope = None\n        self.decoder_layers = decoder_layers\n\n    def get_large_model_config(self):\n        return T5Config.from_pretrained(\"google-t5/t5-base\")\n\n    def prepare_config_and_inputs(self):\n        input_ids = ids_tensor([self.batch_size, self.encoder_seq_length], self.vocab_size).clamp(2)\n        input_ids[:, -1] = self.eos_token_id  # Eos Token\n        decoder_input_ids = ids_tensor([self.batch_size, self.decoder_seq_length], self.vocab_size)\n\n        attention_mask = None\n        decoder_attention_mask = None\n        if self.use_attention_mask:\n            attention_mask = ids_tensor([self.batch_size, self.encoder_seq_length], vocab_size=2)\n            decoder_attention_mask = ids_tensor([self.batch_size, self.decoder_seq_length], vocab_size=2)\n\n        lm_labels = None\n        if self.use_labels:\n            lm_labels = ids_tensor([self.batch_size, self.decoder_seq_length], self.vocab_size)\n\n        config = self.get_config()\n\n        return (\n            config,\n            input_ids,\n            decoder_input_ids,\n            attention_mask,\n            decoder_attention_mask,\n            lm_labels,\n        )\n\n    def get_pipeline_config(self):\n        return T5Config(\n            vocab_size=166,  # t5 forces 100 extra tokens\n            d_model=self.hidden_size,\n            d_ff=self.d_ff,\n            d_kv=self.hidden_size // self.num_attention_heads,\n            num_layers=self.num_hidden_layers,\n            num_decoder_layers=self.decoder_layers,\n            num_heads=self.num_attention_heads,\n            relative_attention_num_buckets=self.relative_attention_num_buckets,\n            dropout_rate=self.dropout_rate,\n            initializer_factor=self.initializer_factor,\n            eos_token_id=self.eos_token_id,\n            bos_token_id=self.pad_token_id,\n            pad_token_id=self.pad_token_id,\n            decoder_start_token_id=self.decoder_start_token_id,\n        )\n\n    def get_config(self):\n        return T5Config(\n            vocab_size=self.vocab_size,\n            d_model=self.hidden_size,\n            d_ff=self.d_ff,\n            d_kv=self.hidden_size // self.num_attention_heads,\n            num_layers=self.num_hidden_layers,\n            num_decoder_layers=self.decoder_layers,\n            num_heads=self.num_attention_heads,\n            relative_attention_num_buckets=self.relative_attention_num_buckets,\n            dropout_rate=self.dropout_rate,\n            initializer_factor=self.initializer_factor,\n            eos_token_id=self.eos_token_id,\n            bos_token_id=self.pad_token_id,\n            pad_token_id=self.pad_token_id,\n            decoder_start_token_id=self.decoder_start_token_id,\n        )\n\n    def check_prepare_lm_labels_via_shift_left(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5Model(config=config)\n        model.to(torch_device)\n        model.eval()\n\n        # make sure that lm_labels are correctly padded from the right\n        lm_labels.masked_fill_((lm_labels == self.decoder_start_token_id), self.eos_token_id)\n\n        # add casaul pad token mask\n        triangular_mask = torch.tril(lm_labels.new_ones(lm_labels.shape)).logical_not()\n        lm_labels.masked_fill_(triangular_mask, self.pad_token_id)\n        decoder_input_ids = model._shift_right(lm_labels)\n\n        for i, (decoder_input_ids_slice, lm_labels_slice) in enumerate(zip(decoder_input_ids, lm_labels)):\n            # first item\n            self.parent.assertEqual(decoder_input_ids_slice[0].item(), self.decoder_start_token_id)\n            if i < decoder_input_ids_slice.shape[-1]:\n                if i < decoder_input_ids.shape[-1] - 1:\n                    # items before diagonal\n                    self.parent.assertListEqual(\n                        decoder_input_ids_slice[1 : i + 1].tolist(), lm_labels_slice[:i].tolist()\n                    )\n                # pad items after diagonal\n                if i < decoder_input_ids.shape[-1] - 2:\n                    self.parent.assertListEqual(\n                        decoder_input_ids_slice[i + 2 :].tolist(), lm_labels_slice[i + 1 : -1].tolist()\n                    )\n            else:\n                # all items after square\n                self.parent.assertListEqual(decoder_input_ids_slice[1:].tolist(), lm_labels_slice[:-1].tolist())\n\n    def create_and_check_model(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5Model(config=config)\n        model.to(torch_device)\n        model.eval()\n        result = model(\n            input_ids=input_ids,\n            decoder_input_ids=decoder_input_ids,\n            attention_mask=attention_mask,\n            decoder_attention_mask=decoder_attention_mask,\n        )\n        result = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)\n        decoder_output = result.last_hidden_state\n        decoder_past = result.past_key_values\n        encoder_output = result.encoder_last_hidden_state\n\n        self.parent.assertEqual(encoder_output.size(), (self.batch_size, self.encoder_seq_length, self.hidden_size))\n        self.parent.assertEqual(decoder_output.size(), (self.batch_size, self.decoder_seq_length, self.hidden_size))\n        # There should be `num_layers` key value embeddings stored in decoder_past\n        self.parent.assertEqual(len(decoder_past), config.num_layers)\n        # There should be a self attn key, a self attn value, a cross attn key and a cross attn value stored in each decoder_past tuple\n        self.parent.assertEqual(len(decoder_past[0]), 4)\n\n    def create_and_check_with_lm_head(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5ForConditionalGeneration(config=config).to(torch_device).eval()\n        outputs = model(\n            input_ids=input_ids,\n            decoder_input_ids=decoder_input_ids,\n            decoder_attention_mask=decoder_attention_mask,\n            labels=lm_labels,\n        )\n        self.parent.assertEqual(len(outputs), 4)\n        self.parent.assertEqual(outputs[\"logits\"].size(), (self.batch_size, self.decoder_seq_length, self.vocab_size))\n        self.parent.assertEqual(outputs[\"loss\"].size(), ())\n\n    def create_and_check_with_sequence_classification_head(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        labels = torch.tensor([1] * self.batch_size, dtype=torch.long, device=torch_device)\n        model = T5ForSequenceClassification(config=config).to(torch_device).eval()\n        outputs = model(\n            input_ids=input_ids,\n            decoder_input_ids=input_ids,\n            labels=labels,\n        )\n        # self.parent.assertEqual(len(outputs), 4)\n        self.parent.assertEqual(outputs[\"logits\"].size(), (self.batch_size, config.num_labels))\n        self.parent.assertEqual(outputs[\"loss\"].size(), ())\n\n    def create_and_check_decoder_model_past(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5Model(config=config).get_decoder().to(torch_device).eval()\n        # first forward pass\n        outputs = model(input_ids, use_cache=True)\n        outputs_use_cache_conf = model(input_ids)\n        outputs_no_past = model(input_ids, use_cache=False)\n\n        self.parent.assertTrue(len(outputs) == len(outputs_use_cache_conf))\n        self.parent.assertTrue(len(outputs) == len(outputs_no_past) + 1)\n\n        output, past_key_values = outputs.to_tuple()\n\n        # create hypothetical next token and extent to next_input_ids\n        next_tokens = ids_tensor((self.batch_size, 1), config.vocab_size)\n\n        # append to next input_ids and\n        next_input_ids = torch.cat([input_ids, next_tokens], dim=-1)\n\n        output_from_no_past = model(next_input_ids)[\"last_hidden_state\"]\n        output_from_past = model(next_tokens, past_key_values=past_key_values)[\"last_hidden_state\"]\n\n        # select random slice\n        random_slice_idx = ids_tensor((1,), output_from_past.shape[-1]).item()\n        output_from_no_past_slice = output_from_no_past[:, -1, random_slice_idx].detach()\n        output_from_past_slice = output_from_past[:, 0, random_slice_idx].detach()\n\n        # test that outputs are equal for slice\n        self.parent.assertTrue(torch.allclose(output_from_past_slice, output_from_no_past_slice, atol=1e-3))\n\n    def create_and_check_decoder_model_attention_mask_past(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5Model(config=config).get_decoder()\n        model.to(torch_device)\n        model.eval()\n\n        # create attention mask\n        attn_mask = torch.ones(input_ids.shape, dtype=torch.long, device=torch_device)\n\n        half_seq_length = input_ids.shape[-1] // 2\n        attn_mask[:, half_seq_length:] = 0\n\n        # first forward pass\n        output, past_key_values = model(input_ids, attention_mask=attn_mask, use_cache=True).to_tuple()\n\n        # create hypothetical next token and extent to next_input_ids\n        next_tokens = ids_tensor((self.batch_size, 1), config.vocab_size)\n\n        # change a random masked slice from input_ids\n        random_seq_idx_to_change = ids_tensor((1,), half_seq_length).item() + 1\n        random_other_next_tokens = ids_tensor((self.batch_size, 1), config.vocab_size).squeeze(-1)\n        input_ids[:, -random_seq_idx_to_change] = random_other_next_tokens\n\n        # append to next input_ids and attn_mask\n        next_input_ids = torch.cat([input_ids, next_tokens], dim=-1)\n        attn_mask = torch.cat(\n            [attn_mask, torch.ones((attn_mask.shape[0], 1), dtype=torch.long, device=torch_device)],\n            dim=1,\n        )\n\n        # get two different outputs\n        output_from_no_past = model(next_input_ids, attention_mask=attn_mask)[\"last_hidden_state\"]\n        output_from_past = model(next_tokens, past_key_values=past_key_values, attention_mask=attn_mask)[\n            \"last_hidden_state\"\n        ]\n\n        # select random slice\n        random_slice_idx = ids_tensor((1,), output_from_past.shape[-1]).item()\n        output_from_no_past_slice = output_from_no_past[:, -1, random_slice_idx].detach()\n        output_from_past_slice = output_from_past[:, 0, random_slice_idx].detach()\n\n        # test that outputs are equal for slice\n        self.parent.assertTrue(torch.allclose(output_from_past_slice, output_from_no_past_slice, atol=1e-3))\n\n    def create_and_check_decoder_model_past_large_inputs(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5Model(config=config).get_decoder().to(torch_device).eval()\n        # first forward pass\n        outputs = model(input_ids, attention_mask=attention_mask, use_cache=True)\n\n        output, past_key_values = outputs.to_tuple()\n\n        # create hypothetical multiple next token and extent to next_input_ids\n        next_tokens = ids_tensor((self.batch_size, 3), config.vocab_size)\n        next_mask = ids_tensor((self.batch_size, 3), vocab_size=2)\n\n        # append to next input_ids and\n        next_input_ids = torch.cat([input_ids, next_tokens], dim=-1)\n        next_attention_mask = torch.cat([attention_mask, next_mask], dim=-1)\n\n        output_from_no_past = model(next_input_ids, attention_mask=next_attention_mask)[\"last_hidden_state\"]\n        output_from_past = model(next_tokens, attention_mask=next_attention_mask, past_key_values=past_key_values)[\n            \"last_hidden_state\"\n        ]\n\n        # select random slice\n        random_slice_idx = ids_tensor((1,), output_from_past.shape[-1]).item()\n        output_from_no_past_slice = output_from_no_past[:, -3:, random_slice_idx].detach()\n        output_from_past_slice = output_from_past[:, :, random_slice_idx].detach()\n\n        self.parent.assertTrue(output_from_past_slice.shape[1] == next_tokens.shape[1])\n\n        # test that outputs are equal for slice\n        self.parent.assertTrue(torch.allclose(output_from_past_slice, output_from_no_past_slice, atol=1e-3))\n\n    def create_and_check_generate_with_past_key_values(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5ForConditionalGeneration(config=config).to(torch_device).eval()\n        torch.manual_seed(0)\n        output_without_past_cache = model.generate(\n            input_ids[:1], num_beams=2, max_length=5, do_sample=True, use_cache=False\n        )\n        torch.manual_seed(0)\n        output_with_past_cache = model.generate(input_ids[:1], num_beams=2, max_length=5, do_sample=True)\n        self.parent.assertTrue(torch.all(output_with_past_cache == output_without_past_cache))\n\n    def create_and_check_model_fp16_forward(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        model = T5Model(config=config).to(torch_device).half().eval()\n        output = model(input_ids, decoder_input_ids=input_ids, attention_mask=attention_mask)[\"last_hidden_state\"]\n        self.parent.assertFalse(torch.isnan(output).any().item())\n\n    def create_and_check_encoder_decoder_shared_weights(\n        self,\n        config,\n        input_ids,\n        decoder_input_ids,\n        attention_mask,\n        decoder_attention_mask,\n        lm_labels,\n    ):\n        for model_class in [T5Model, T5ForConditionalGeneration]:\n            torch.manual_seed(0)\n            model = model_class(config=config).to(torch_device).eval()\n            # load state dict copies weights but does not tie them\n            model.encoder.load_state_dict(model.decoder.state_dict(), strict=False)\n\n            torch.manual_seed(0)\n            tied_config = copy.deepcopy(config)\n            tied_config.tie_encoder_decoder = True\n            tied_model = model_class(config=tied_config).to(torch_device).eval()\n\n            model_result = model(\n                input_ids=input_ids,\n                decoder_input_ids=decoder_input_ids,\n                attention_mask=attention_mask,\n                decoder_attention_mask=decoder_attention_mask,\n            )\n\n            tied_model_result = tied_model(\n                input_ids=input_ids,\n                decoder_input_ids=decoder_input_ids,\n                attention_mask=attention_mask,\n                decoder_attention_mask=decoder_attention_mask,\n            )\n\n            # check that models has less parameters\n            self.parent.assertLess(\n                sum(p.numel() for p in tied_model.parameters()), sum(p.numel() for p in model.parameters())\n            )\n            random_slice_idx = ids_tensor((1,), model_result[0].shape[-1]).item()\n\n            # check that outputs are equal\n            self.parent.assertTrue(\n                torch.allclose(\n                    model_result[0][0, :, random_slice_idx], tied_model_result[0][0, :, random_slice_idx], atol=1e-4\n                )\n            )\n\n            # check that outputs after saving and loading are equal\n            with tempfile.TemporaryDirectory() as tmpdirname:\n                tied_model.save_pretrained(tmpdirname)\n                tied_model = model_class.from_pretrained(tmpdirname)\n                tied_model.to(torch_device)\n                tied_model.eval()\n\n                # check that models has less parameters\n                self.parent.assertLess(\n                    sum(p.numel() for p in tied_model.parameters()), sum(p.numel() for p in model.parameters())\n                )\n                random_slice_idx = ids_tensor((1,), model_result[0].shape[-1]).item()\n\n                tied_model_result = tied_model(\n                    input_ids=input_ids,\n                    decoder_input_ids=decoder_input_ids,\n                    attention_mask=attention_mask,\n                    decoder_attention_mask=decoder_attention_mask,\n                )\n\n                # check that outputs are equal\n                self.parent.assertTrue(\n                    torch.allclose(\n                        model_result[0][0, :, random_slice_idx],\n                        tied_model_result[0][0, :, random_slice_idx],\n                        atol=1e-4,\n                    )\n                )\n\n    def check_resize_embeddings_t5_v1_1(\n        self,\n        config,\n    ):\n        prev_vocab_size = config.vocab_size\n\n        config.tie_word_embeddings = False\n        model = T5ForConditionalGeneration(config=config).to(torch_device).eval()\n        model.resize_token_embeddings(prev_vocab_size - 10)\n\n        self.parent.assertEqual(model.get_input_embeddings().weight.shape[0], prev_vocab_size - 10)\n        self.parent.assertEqual(model.get_output_embeddings().weight.shape[0], prev_vocab_size - 10)\n        self.parent.assertEqual(model.config.vocab_size, prev_vocab_size - 10)\n\n    def prepare_config_and_inputs_for_common(self):\n        config_and_inputs = self.prepare_config_and_inputs()\n        (\n            config,\n            input_ids,\n            decoder_input_ids,\n            attention_mask,\n            decoder_attention_mask,\n            lm_labels,\n        ) = config_and_inputs\n\n        inputs_dict = {\n            \"input_ids\": input_ids,\n            \"attention_mask\": attention_mask,\n            \"decoder_input_ids\": decoder_input_ids,\n            \"decoder_attention_mask\": decoder_attention_mask,\n        }\n        return config, inputs_dict\n\n\n@require_torch\nclass T5ModelTest(ModelTesterMixin, GenerationTesterMixin, PipelineTesterMixin, unittest.TestCase):\n    all_model_classes = (\n        (T5Model, T5ForConditionalGeneration, T5ForSequenceClassification, T5ForQuestionAnswering)\n        if is_torch_available()\n        else ()\n    )\n    pipeline_model_mapping = (\n        {\n            \"feature-extraction\": T5Model,\n            \"question-answering\": T5ForQuestionAnswering,\n            \"summarization\": T5ForConditionalGeneration,\n            \"text-classification\": T5ForSequenceClassification,\n            \"text2text-generation\": T5ForConditionalGeneration,\n            \"translation\": T5ForConditionalGeneration,\n            \"zero-shot\": T5ForSequenceClassification,\n        }\n        if is_torch_available()\n        else {}\n    )\n    all_parallelizable_model_classes = (T5Model, T5ForConditionalGeneration) if is_torch_available() else ()\n    fx_compatible = True\n    test_pruning = False\n    test_resize_embeddings = True\n    test_model_parallel = True\n    is_encoder_decoder = True\n    # The small T5 model needs higher percentages for CPU/MP tests\n    model_split_percents = [0.5, 0.8, 0.9]\n\n    def setUp(self):\n        self.model_tester = T5ModelTester(self)\n        self.config_tester = ConfigTester(self, config_class=T5Config, d_model=37)\n\n    # `QAPipelineTests` is not working well with slow tokenizers (for some models) and we don't want to touch the file\n    # `src/transformers/data/processors/squad.py` (where this test fails for this model)\n    def is_pipeline_test_to_skip(\n        self,\n        pipeline_test_case_name,\n        config_class,\n        model_architecture,\n        tokenizer_name,\n        image_processor_name,\n        feature_extractor_name,\n        processor_name,\n    ):\n        if tokenizer_name is None:\n            return True\n        if pipeline_test_case_name == \"QAPipelineTests\" and not tokenizer_name.endswith(\"Fast\"):\n            return True\n\n        return False\n\n    def _create_and_check_torch_fx_tracing(self, config, inputs_dict, output_loss=False):\n        if not self.fx_compatible:\n            self.skipTest(reason=\"torch.fx is not compatible with this model\")\n\n        configs_no_init = _config_zero_init(config)  # To be sure we have no Nan\n        configs_no_init.return_dict = False\n\n        for model_class in self.all_model_classes:\n            if model_class.__name__ == \"T5ForSequenceClassification\":\n                continue\n            model = model_class(config=configs_no_init)\n            model.to(torch_device)\n            model.eval()\n            inputs = self._prepare_for_class(inputs_dict, model_class, return_labels=output_loss)\n\n            try:\n                if model.config.is_encoder_decoder:\n                    model.config.use_cache = False  # FSTM still requires this hack -> FSTM should probably be refactored similar to BART afterward\n                    labels = inputs.get(\"labels\", None)\n                    input_names = [\n                        \"attention_mask\",\n                        \"decoder_attention_mask\",\n                        \"decoder_input_ids\",\n                        \"input_features\",\n                        \"input_ids\",\n                        \"input_values\",\n                    ]\n                    if labels is not None:\n                        input_names.append(\"labels\")\n                    filtered_inputs = {k: v for (k, v) in inputs.items() if k in input_names}\n                    input_names = list(filtered_inputs.keys())\n                    model_output = model(**filtered_inputs)\n                    traced_model = symbolic_trace(model, input_names)\n                    traced_output = traced_model(**filtered_inputs)\n                else:\n                    input_names = [\n                        \"attention_mask\",\n                        \"bbox\",\n                        \"input_features\",\n                        \"input_ids\",\n                        \"input_values\",\n                        \"pixel_values\",\n                        \"token_type_ids\",\n                        \"visual_feats\",\n                        \"visual_pos\",\n                    ]\n                    labels = inputs.get(\"labels\", None)\n                    start_positions = inputs.get(\"start_positions\", None)\n                    end_positions = inputs.get(\"end_positions\", None)\n                    if labels is not None:\n                        input_names.append(\"labels\")\n                    if start_positions is not None:\n                        input_names.append(\"start_positions\")\n                    if end_positions is not None:\n                        input_names.append(\"end_positions\")\n                    filtered_inputs = {k: v for (k, v) in inputs.items() if k in input_names}\n                    input_names = list(filtered_inputs.keys())\n                    if model.__class__.__name__ in set(MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES.values()) and (\n                        not hasattr(model.config, \"problem_type\") or model.config.problem_type is None\n                    ):\n                        model.config.problem_type = \"single_label_classification\"\n                    traced_model = symbolic_trace(model, input_names)\n                    traced_output = traced_model(**filtered_inputs)\n                    model_output = model(**filtered_inputs)\n\n            except Exception as e:\n                self.fail(f\"Couldn't trace module: {e}\")\n\n            def flatten_output(output):\n                flatten = []\n                for x in output:\n                    if isinstance(x, (tuple, list)):\n                        flatten += flatten_output(x)\n                    elif not isinstance(x, torch.Tensor):\n                        continue\n                    else:\n                        flatten.append(x)\n                return flatten\n\n            model_output = flatten_output(model_output)\n            traced_output = flatten_output(traced_output)\n            num_outputs = len(model_output)\n\n            for i in range(num_outputs):\n                self.assertTrue(\n                    torch.allclose(model_output[i], traced_output[i]),\n                    f\"traced {i}th output doesn't match model {i}th output for {model_class}\",\n                )\n\n            # Test that the model can be serialized and restored properly\n            with tempfile.TemporaryDirectory() as tmp_dir_name:\n                pkl_file_name = os.path.join(tmp_dir_name, \"model.pkl\")\n                try:\n                    with open(pkl_file_name, \"wb\") as f:\n                        pickle.dump(traced_model, f)\n                    with open(pkl_file_name, \"rb\") as f:\n                        loaded = pickle.load(f)\n                except Exception as e:\n                    self.fail(f\"Couldn't serialize / deserialize the traced model: {e}\")\n\n                loaded_output = loaded(**filtered_inputs)\n                loaded_output = flatten_output(loaded_output)\n\n                for i in range(num_outputs):\n                    self.assertTrue(\n                        torch.allclose(model_output[i], loaded_output[i]),\n                        f\"serialized model {i}th output doesn't match model {i}th output for {model_class}\",\n                    )\n\n            # Avoid memory leak. Without this, each call increase RAM usage by ~20MB.\n            # (Even with this call, there are still memory leak by ~0.04MB)\n            self.clear_torch_jit_class_registry()\n\n    # overwrite because T5 doesn't accept position ids as input and expects `decoder_input_ids`\n    def test_custom_4d_attention_mask(self):\n        for model_class in self.all_generative_model_classes:\n            config, input_dict = self.model_tester.prepare_config_and_inputs_for_common()\n            model = model_class(config).to(device=torch_device, dtype=torch.float32)\n\n            (\n                input_ids,\n                _,\n                input_ids_shared_prefix,\n                mask_shared_prefix,\n                _,\n            ) = self._get_custom_4d_mask_test_data()\n\n            logits = model.forward(\n                decoder_input_ids=input_ids,\n                input_ids=input_dict[\"input_ids\"][:3],\n            ).logits\n            # logits.shape == torch.Size([3, 4, ...])\n\n            logits_shared_prefix = model(\n                input_ids=input_dict[\"input_ids\"][:1],\n                decoder_input_ids=input_ids_shared_prefix,\n                decoder_attention_mask=mask_shared_prefix,\n            )[0]\n            # logits_shared_prefix.shape == torch.Size([1, 6, ...])\n\n            out_last_tokens = logits[:, -1, :]  # last tokens in each batch line\n            out_shared_prefix_last_tokens = logits_shared_prefix[0, -3:, :]  # last three tokens\n\n            # comparing softmax-normalized logits:\n            normalized_0 = F.softmax(out_last_tokens)\n            normalized_1 = F.softmax(out_shared_prefix_last_tokens)\n            torch.testing.assert_close(normalized_0, normalized_1, rtol=1e-3, atol=1e-4)\n\n    def test_config(self):\n        self.config_tester.run_common_tests()\n\n    def test_shift_right(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.check_prepare_lm_labels_via_shift_left(*config_and_inputs)\n\n    def test_model(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_model(*config_and_inputs)\n\n    def test_model_v1_1(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        # check that gated gelu feed forward and different word embeddings work\n        config = config_and_inputs[0]\n        config.tie_word_embeddings = False\n        config.feed_forward_proj = \"gated-gelu\"\n        self.model_tester.create_and_check_model(config, *config_and_inputs[1:])\n\n    # T5ForSequenceClassification does not support inputs_embeds\n    def test_inputs_embeds(self):\n        config, inputs_dict = self.model_tester.prepare_config_and_inputs_for_common()\n\n        for model_class in (T5Model, T5ForConditionalGeneration, T5ForQuestionAnswering):\n            model = model_class(config)\n            model.to(torch_device)\n            model.eval()\n\n            inputs = copy.deepcopy(self._prepare_for_class(inputs_dict, model_class))\n\n            if not self.is_encoder_decoder:\n                input_ids = inputs[\"input_ids\"]\n                del inputs[\"input_ids\"]\n            else:\n                encoder_input_ids = inputs[\"input_ids\"]\n                decoder_input_ids = inputs.get(\"decoder_input_ids\", encoder_input_ids)\n                del inputs[\"input_ids\"]\n                inputs.pop(\"decoder_input_ids\", None)\n\n            wte = model.get_input_embeddings()\n            if not self.is_encoder_decoder:\n                inputs[\"inputs_embeds\"] = wte(input_ids)\n            else:\n                inputs[\"inputs_embeds\"] = wte(encoder_input_ids)\n                inputs[\"decoder_inputs_embeds\"] = wte(decoder_input_ids)\n\n            with torch.no_grad():\n                model(**inputs)[0]\n\n    def test_config_and_model_silu_gated(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        config = config_and_inputs[0]\n        config.feed_forward_proj = \"gated-silu\"\n        self.model_tester.create_and_check_model(*config_and_inputs)\n\n    def test_with_lm_head(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_with_lm_head(*config_and_inputs)\n\n    def test_with_sequence_classification_head(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_with_sequence_classification_head(*config_and_inputs)\n\n    def test_decoder_model_past(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_decoder_model_past(*config_and_inputs)\n\n    def test_decoder_model_past_with_attn_mask(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_decoder_model_attention_mask_past(*config_and_inputs)\n\n    def test_decoder_model_past_with_3d_attn_mask(self):\n        (\n            config,\n            input_ids,\n            decoder_input_ids,\n            attention_mask,\n            decoder_attention_mask,\n            lm_labels,\n        ) = self.model_tester.prepare_config_and_inputs()\n\n        attention_mask = ids_tensor(\n            [self.model_tester.batch_size, self.model_tester.encoder_seq_length, self.model_tester.encoder_seq_length],\n            vocab_size=2,\n        )\n        decoder_attention_mask = ids_tensor(\n            [self.model_tester.batch_size, self.model_tester.decoder_seq_length, self.model_tester.decoder_seq_length],\n            vocab_size=2,\n        )\n\n        self.model_tester.create_and_check_decoder_model_attention_mask_past(\n            config,\n            input_ids,\n            decoder_input_ids,\n            attention_mask,\n            decoder_attention_mask,\n            lm_labels,\n        )\n\n    def test_decoder_model_past_with_large_inputs(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_decoder_model_past_large_inputs(*config_and_inputs)\n\n    def test_generate_with_past_key_values(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_generate_with_past_key_values(*config_and_inputs)\n\n    def test_encoder_decoder_shared_weights(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_encoder_decoder_shared_weights(*config_and_inputs)\n\n    @unittest.skipIf(torch_device == \"cpu\", \"Can't do half precision\")\n    def test_model_fp16_forward(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_model_fp16_forward(*config_and_inputs)\n\n    def test_v1_1_resize_embeddings(self):\n        config = self.model_tester.prepare_config_and_inputs()[0]\n        self.model_tester.check_resize_embeddings_t5_v1_1(config)\n\n    @slow\n    def test_model_from_pretrained(self):\n        model_name = \"google-t5/t5-small\"\n        model = T5Model.from_pretrained(model_name)\n        self.assertIsNotNone(model)\n\n\nclass T5EncoderOnlyModelTester:\n    def __init__(\n        self,\n        parent,\n        vocab_size=99,\n        batch_size=13,\n        encoder_seq_length=7,\n        # For common tests\n        use_attention_mask=True,\n        hidden_size=32,\n        num_hidden_layers=2,\n        num_attention_heads=4,\n        d_ff=37,\n        relative_attention_num_buckets=8,\n        is_training=False,\n        dropout_rate=0.1,\n        initializer_factor=0.002,\n        is_encoder_decoder=False,\n        eos_token_id=1,\n        pad_token_id=0,\n        scope=None,\n    ):\n        self.parent = parent\n        self.batch_size = batch_size\n        self.encoder_seq_length = encoder_seq_length\n        # For common tests\n        self.seq_length = self.encoder_seq_length\n        self.use_attention_mask = use_attention_mask\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.d_ff = d_ff\n        self.relative_attention_num_buckets = relative_attention_num_buckets\n        self.dropout_rate = dropout_rate\n        self.initializer_factor = initializer_factor\n        self.eos_token_id = eos_token_id\n        self.pad_token_id = pad_token_id\n        self.is_encoder_decoder = is_encoder_decoder\n        self.scope = None\n        self.is_training = is_training\n\n    def get_large_model_config(self):\n        return T5Config.from_pretrained(\"google-t5/t5-base\")\n\n    def prepare_config_and_inputs(self):\n        input_ids = ids_tensor([self.batch_size, self.encoder_seq_length], self.vocab_size)\n\n        attention_mask = None\n        if self.use_attention_mask:\n            attention_mask = ids_tensor([self.batch_size, self.encoder_seq_length], vocab_size=2)\n\n        config = T5Config(\n            vocab_size=self.vocab_size,\n            d_model=self.hidden_size,\n            d_ff=self.d_ff,\n            d_kv=self.hidden_size // self.num_attention_heads,\n            num_layers=self.num_hidden_layers,\n            num_heads=self.num_attention_heads,\n            relative_attention_num_buckets=self.relative_attention_num_buckets,\n            dropout_rate=self.dropout_rate,\n            initializer_factor=self.initializer_factor,\n            eos_token_id=self.eos_token_id,\n            bos_token_id=self.pad_token_id,\n            pad_token_id=self.pad_token_id,\n            is_encoder_decoder=self.is_encoder_decoder,\n        )\n\n        return (\n            config,\n            input_ids,\n            attention_mask,\n        )\n\n    def create_and_check_model(\n        self,\n        config,\n        input_ids,\n        attention_mask,\n    ):\n        model = T5EncoderModel(config=config)\n        model.to(torch_device)\n        model.eval()\n        result = model(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n        )\n        result = model(input_ids=input_ids)\n        encoder_output = result.last_hidden_state\n\n        self.parent.assertEqual(encoder_output.size(), (self.batch_size, self.encoder_seq_length, self.hidden_size))\n\n    def create_and_check_model_fp16_forward(\n        self,\n        config,\n        input_ids,\n        attention_mask,\n    ):\n        model = T5EncoderModel(config=config).to(torch_device).half().eval()\n        output = model(input_ids, attention_mask=attention_mask)[\"last_hidden_state\"]\n        self.parent.assertFalse(torch.isnan(output).any().item())\n\n    def create_and_check_with_token_classification_head(\n        self,\n        config,\n        input_ids,\n        attention_mask,\n    ):\n        labels = torch.tensor([1] * self.seq_length * self.batch_size, dtype=torch.long, device=torch_device)\n        model = T5ForTokenClassification(config=config).to(torch_device).eval()\n        outputs = model(\n            input_ids=input_ids,\n            labels=labels,\n            attention_mask=attention_mask,\n        )\n        self.parent.assertEqual(outputs[\"logits\"].size(), (self.batch_size, self.seq_length, config.num_labels))\n        self.parent.assertEqual(outputs[\"loss\"].size(), ())\n\n    def prepare_config_and_inputs_for_common(self):\n        config_and_inputs = self.prepare_config_and_inputs()\n        (\n            config,\n            input_ids,\n            attention_mask,\n        ) = config_and_inputs\n\n        inputs_dict = {\n            \"input_ids\": input_ids,\n            \"attention_mask\": attention_mask,\n        }\n        return config, inputs_dict\n\n\nclass T5EncoderOnlyModelTest(ModelTesterMixin, PipelineTesterMixin, unittest.TestCase):\n    all_model_classes = (T5EncoderModel, T5ForTokenClassification) if is_torch_available() else ()\n    test_pruning = False\n    test_resize_embeddings = False\n    test_model_parallel = True\n    pipeline_model_mapping = (\n        {\n            \"token-classification\": T5ForTokenClassification,\n        }\n        if is_torch_available()\n        else {}\n    )\n    all_parallelizable_model_classes = (T5EncoderModel,) if is_torch_available() else ()\n\n    def setUp(self):\n        self.model_tester = T5EncoderOnlyModelTester(self)\n        self.config_tester = ConfigTester(self, config_class=T5Config, d_model=37)\n\n    def test_config(self):\n        self.config_tester.run_common_tests()\n\n    def test_model(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_model(*config_and_inputs)\n\n    @unittest.skipIf(torch_device == \"cpu\", \"Can't do half precision\")\n    def test_model_fp16_forward(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_model_fp16_forward(*config_and_inputs)\n\n    def test_with_token_classification_head(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_with_token_classification_head(*config_and_inputs)\n\n    def is_pipeline_test_to_skip(\n        self,\n        pipeline_test_case_name,\n        config_class,\n        model_architecture,\n        tokenizer_name,\n        image_processor_name,\n        feature_extractor_name,\n        processor_name,\n    ):\n        if tokenizer_name is None:\n            return True\n\n        # `T5EncoderOnlyModelTest` is not working well with slow tokenizers (for some models) and we don't want to touch the file\n        # `src/transformers/data/processors/squad.py` (where this test fails for this model)\n        if pipeline_test_case_name == \"TokenClassificationPipelineTests\" and not tokenizer_name.endswith(\"Fast\"):\n            return True\n\n        return False\n\n\ndef use_task_specific_params(model, task):\n    model.config.update(model.config.task_specific_params[task])\n\n\n@require_torch\n@require_accelerate\n@require_tokenizers\n@slow\nclass T5ModelFp16Tests(unittest.TestCase):\n    def test_fp16_fp32_conversion(self):\n        r\"\"\"\n        A test to check whether the argument `keep_in_fp32_modules` correctly does its job\n        \"\"\"\n        orig_import = __import__\n        accelerate_mock = unittest.mock.Mock()\n\n        # mock import of accelerate\n        def import_accelerate_mock(name, *args, **kwargs):\n            if name == \"accelerate\":\n                if accelerate_available:\n                    return accelerate_mock\n                else:\n                    raise ImportError\n            return orig_import(name, *args, **kwargs)\n\n        # Load without using `accelerate`\n        with unittest.mock.patch(\"builtins.__import__\", side_effect=import_accelerate_mock):\n            accelerate_available = False\n\n            model = T5ForConditionalGeneration.from_pretrained(\"google-t5/t5-small\", torch_dtype=torch.float16)\n            self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wo.weight.dtype == torch.float32)\n            self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wi.weight.dtype == torch.float16)\n\n            # Load without in bf16\n            model = T5ForConditionalGeneration.from_pretrained(\"google-t5/t5-small\", torch_dtype=torch.bfloat16)\n            self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wo.weight.dtype == torch.bfloat16)\n            self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wi.weight.dtype == torch.bfloat16)\n\n        # Load using `accelerate` in bf16\n        model = T5ForConditionalGeneration.from_pretrained(\n            \"google-t5/t5-small\", torch_dtype=torch.bfloat16, device_map=\"auto\"\n        )\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wo.weight.dtype == torch.bfloat16)\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wi.weight.dtype == torch.bfloat16)\n\n        # Load using `accelerate` in bf16\n        model = T5ForConditionalGeneration.from_pretrained(\n            \"google-t5/t5-small\",\n            torch_dtype=torch.bfloat16,\n        )\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wo.weight.dtype == torch.bfloat16)\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wi.weight.dtype == torch.bfloat16)\n\n        # Load without using `accelerate`\n        model = T5ForConditionalGeneration.from_pretrained(\n            \"google-t5/t5-small\",\n            torch_dtype=torch.float16,\n        )\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wo.weight.dtype == torch.float32)\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wi.weight.dtype == torch.float16)\n\n        # Load using `accelerate`\n        model = T5ForConditionalGeneration.from_pretrained(\n            \"google-t5/t5-small\", torch_dtype=torch.float16, device_map=\"auto\"\n        )\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wo.weight.dtype == torch.float32)\n        self.assertTrue(model.decoder.block[0].layer[2].DenseReluDense.wi.weight.dtype == torch.float16)\n\n\n@require_torch\n@require_sentencepiece\n@require_tokenizers\nclass T5ModelIntegrationTests(unittest.TestCase):\n    def tearDown(self):\n        # See LlamaIntegrationTest.tearDown(). Can be removed once LlamaIntegrationTest.tearDown() is removed.\n        cleanup(torch_device, gc_collect=False)\n\n    @cached_property\n    def model(self):\n        return T5ForConditionalGeneration.from_pretrained(\"google-t5/t5-base\").to(torch_device)\n\n    @cached_property\n    def tokenizer(self):\n        return T5Tokenizer.from_pretrained(\"google-t5/t5-base\")\n\n    @slow\n    def test_torch_quant(self):\n        r\"\"\"\n        Test that a simple `torch.quantization.quantize_dynamic` call works on a T5 model.\n        \"\"\"\n        model_name = \"google/flan-t5-small\"\n        tokenizer = T5Tokenizer.from_pretrained(model_name)\n        model = T5ForConditionalGeneration.from_pretrained(model_name)\n        model = torch.quantization.quantize_dynamic(model, {torch.nn.Linear}, dtype=torch.qint8)\n        input_text = \"Answer the following yes/no question by reasoning step-by-step. Can you write a whole Haiku in a single tweet?\"\n        input_ids = tokenizer(input_text, return_tensors=\"pt\").input_ids\n        _ = model.generate(input_ids)\n\n    @slow\n    def test_small_generation(self):\n        model = T5ForConditionalGeneration.from_pretrained(\"google-t5/t5-small\").to(torch_device)\n        model.config.max_length = 8\n        model.config.num_beams = 1\n        model.config.do_sample = False\n        tokenizer = T5Tokenizer.from_pretrained(\"google-t5/t5-small\")\n\n        input_ids = tokenizer(\"summarize: Hello there\", return_tensors=\"pt\").input_ids.to(torch_device)\n\n        sequences = model.generate(input_ids)\n\n        output_str = tokenizer.batch_decode(sequences, skip_special_tokens=True)[0]\n        self.assertTrue(output_str == \"Hello there!\")\n\n    @slow\n    def test_small_integration_test(self):\n        \"\"\"\n        For comparison run:\n        >>> import t5  # pip install t5==0.7.1\n        >>> from t5.data.sentencepiece_vocabulary import SentencePieceVocabulary\n\n        >>> path_to_mtf_small_t5_checkpoint = '<fill_in>'\n        >>> path_to_mtf_small_spm_model_path = '<fill_in>'\n        >>> t5_model = t5.models.MtfModel(model_dir=path_to_mtf_small_t5_checkpoint, batch_size=1, tpu=None)\n        >>> vocab = SentencePieceVocabulary(path_to_mtf_small_spm_model_path, extra_ids=100)\n        >>> score = t5_model.score(inputs=[\"Hello there\"], targets=[\"Hi I am\"], vocabulary=vocab)\n        \"\"\"\n\n        model = T5ForConditionalGeneration.from_pretrained(\"google-t5/t5-small\").to(torch_device)\n        tokenizer = T5Tokenizer.from_pretrained(\"google-t5/t5-small\")\n\n        input_ids = tokenizer(\"Hello there\", return_tensors=\"pt\").input_ids\n        labels = tokenizer(\"Hi I am\", return_tensors=\"pt\").input_ids\n\n        loss = model(input_ids.to(torch_device), labels=labels.to(torch_device)).loss\n        mtf_score = -(labels.shape[-1] * loss.item())\n\n        EXPECTED_SCORE = -19.0845\n        self.assertTrue(abs(mtf_score - EXPECTED_SCORE) < 1e-4)\n\n    @slow\n    def test_small_v1_1_integration_test(self):\n        \"\"\"\n        For comparison run:\n        >>> import t5  # pip install t5==0.7.1\n        >>> from t5.data.sentencepiece_vocabulary import SentencePieceVocabulary\n\n        >>> path_to_mtf_small_t5_v1_1_checkpoint = '<fill_in>'\n        >>> path_to_mtf_small_spm_model_path = '<fill_in>'\n        >>> t5_model = t5.models.MtfModel(model_dir=path_to_mtf_small_t5_v1_1_checkpoint, batch_size=1, tpu=None)\n        >>> vocab = SentencePieceVocabulary(path_to_mtf_small_spm_model_path, extra_ids=100)\n        >>> score = t5_model.score(inputs=[\"Hello there\"], targets=[\"Hi I am\"], vocabulary=vocab)\n        \"\"\"\n\n        model = T5ForConditionalGeneration.from_pretrained(\"google/t5-v1_1-small\").to(torch_device)\n        tokenizer = T5Tokenizer.from_pretrained(\"google/t5-v1_1-small\")\n\n        input_ids = tokenizer(\"Hello there\", return_tensors=\"pt\").input_ids\n        labels = tokenizer(\"Hi I am\", return_tensors=\"pt\").input_ids\n\n        loss = model(input_ids.to(torch_device), labels=labels.to(torch_device)).loss\n        mtf_score = -(labels.shape[-1] * loss.item())\n\n        EXPECTED_SCORE = -59.0293\n        self.assertTrue(abs(mtf_score - EXPECTED_SCORE) < 1e-4)\n\n    @slow\n    def test_small_byt5_integration_test(self):\n        \"\"\"\n        For comparison run:\n        >>> import t5  # pip install t5==0.9.1\n\n        >>> path_to_byt5_small_checkpoint = '<fill_in>'\n        >>> t5_model = t5.models.MtfModel(model_dir=path_to_tf_checkpoint, batch_size=1, tpu=None)\n        >>> vocab = t5.data.ByteVocabulary()\n        >>> score = t5_model.score(inputs=[\"Hello there\"], targets=[\"Hi I am\"], vocabulary=vocab)\n        \"\"\"\n\n        model = T5ForConditionalGeneration.from_pretrained(\"google/byt5-small\").to(torch_device)\n        tokenizer = ByT5Tokenizer.from_pretrained(\"google/byt5-small\")\n\n        input_ids = tokenizer(\"Hello there\", return_tensors=\"pt\").input_ids\n        labels = tokenizer(\"Hi I am\", return_tensors=\"pt\").input_ids\n\n        loss = model(input_ids.to(torch_device), labels=labels.to(torch_device)).loss\n        mtf_score = -(labels.shape[-1] * loss.item())\n\n        EXPECTED_SCORE = -60.7397\n        self.assertTrue(abs(mtf_score - EXPECTED_SCORE) < 1e-4)\n\n    @slow\n    def test_summarization(self):\n        model = self.model\n        tok = self.tokenizer\n\n        FRANCE_ARTICLE = (  # @noqa\n            \"Marseille, France (CNN)The French prosecutor leading an investigation into the crash of Germanwings\"\n            \" Flight 9525 insisted Wednesday that he was not aware of any video footage from on board the plane.\"\n            ' Marseille prosecutor Brice Robin told CNN that \"so far no videos were used in the crash investigation.\"'\n            ' He added, \"A person who has such a video needs to immediately give it to the investigators.\" Robin\\'s'\n            \" comments follow claims by two magazines, German daily Bild and French Paris Match, of a cell phone video\"\n            \" showing the harrowing final seconds from on board Germanwings Flight 9525 as it crashed into the French\"\n            \" Alps. All 150 on board were killed. Paris Match and Bild reported that the video was recovered from a\"\n            \" phone at the wreckage site. The two publications described the supposed video, but did not post it on\"\n            \" their websites. The publications said that they watched the video, which was found by a source close to\"\n            \" the investigation. \\\"One can hear cries of 'My God' in several languages,\\\" Paris Match reported.\"\n            ' \"Metallic banging can also be heard more than three times, perhaps of the pilot trying to open the'\n            \" cockpit door with a heavy object.  Towards the end, after a heavy shake, stronger than the others, the\"\n            ' screaming intensifies. Then nothing.\" \"It is a very disturbing scene,\" said Julian Reichelt,'\n            \" editor-in-chief of Bild online. An official with France's accident investigation agency, the BEA, said\"\n            \" the agency is not aware of any such video. Lt. Col. Jean-Marc Menichini, a French Gendarmerie spokesman\"\n            \" in charge of communications on rescue efforts around the Germanwings crash site, told CNN that the\"\n            ' reports were \"completely wrong\" and \"unwarranted.\" Cell phones have been collected at the site, he said,'\n            ' but that they \"hadn\\'t been exploited yet.\" Menichini said he believed the cell phones would need to be'\n            \" sent to the Criminal Research Institute in Rosny sous-Bois, near Paris, in order to be analyzed by\"\n            \" specialized technicians working hand-in-hand with investigators. But none of the cell phones found so\"\n            \" far have been sent to the institute, Menichini said. Asked whether staff involved in the search could\"\n            ' have leaked a memory card to the media, Menichini answered with a categorical \"no.\" Reichelt told \"Erin'\n            ' Burnett: Outfront\" that he had watched the video and stood by the report, saying Bild and Paris Match'\n            ' are \"very confident\" that the clip is real. He noted that investigators only revealed they\\'d recovered'\n            ' cell phones from the crash site after Bild and Paris Match published their reports. \"That is something'\n            \" we did not know before. ... Overall we can say many things of the investigation weren't revealed by the\"\n            ' investigation at the beginning,\" he said. What was mental state of Germanwings co-pilot? German airline'\n            \" Lufthansa confirmed Tuesday that co-pilot Andreas Lubitz had battled depression years before he took the\"\n            \" controls of Germanwings Flight 9525, which he's accused of deliberately crashing last week in the\"\n            ' French Alps. Lubitz told his Lufthansa flight training school in 2009 that he had a \"previous episode of'\n            ' severe depression,\" the airline said Tuesday. Email correspondence between Lubitz and the school'\n            \" discovered in an internal investigation, Lufthansa said, included medical documents he submitted in\"\n            \" connection with resuming his flight training. The announcement indicates that Lufthansa, the parent\"\n            \" company of Germanwings, knew of Lubitz's battle with depression, allowed him to continue training and\"\n            \" ultimately put him in the cockpit. Lufthansa, whose CEO Carsten Spohr previously said Lubitz was 100%\"\n            ' fit to fly, described its statement Tuesday as a \"swift and seamless clarification\" and said it was'\n            \" sharing the information and documents -- including training and medical records -- with public\"\n            \" prosecutors. Spohr traveled to the crash site Wednesday, where recovery teams have been working for the\"\n            \" past week to recover human remains and plane debris scattered across a steep mountainside. He saw the\"\n            \" crisis center set up in Seyne-les-Alpes, laid a wreath in the village of Le Vernet, closer to the crash\"\n            \" site, where grieving families have left flowers at a simple stone memorial. Menichini told CNN late\"\n            \" Tuesday that no visible human remains were left at the site but recovery teams would keep searching.\"\n            \" French President Francois Hollande, speaking Tuesday, said that it should be possible to identify all\"\n            \" the victims using DNA analysis by the end of the week, sooner than authorities had previously suggested.\"\n            \" In the meantime, the recovery of the victims' personal belongings will start Wednesday, Menichini said.\"\n            \" Among those personal belongings could be more cell phones belonging to the 144 passengers and six crew\"\n            \" on board. Check out the latest from our correspondents . The details about Lubitz's correspondence with\"\n            \" the flight school during his training were among several developments as investigators continued to\"\n            \" delve into what caused the crash and Lubitz's possible motive for downing the jet. A Lufthansa\"\n            \" spokesperson told CNN on Tuesday that Lubitz had a valid medical certificate, had passed all his\"\n            ' examinations and \"held all the licenses required.\" Earlier, a spokesman for the prosecutor\\'s office in'\n            \" Dusseldorf, Christoph Kumpa, said medical records reveal Lubitz suffered from suicidal tendencies at\"\n            \" some point before his aviation career and underwent psychotherapy before he got his pilot's license.\"\n            \" Kumpa emphasized there's no evidence suggesting Lubitz was suicidal or acting aggressively before the\"\n            \" crash. Investigators are looking into whether Lubitz feared his medical condition would cause him to\"\n            \" lose his pilot's license, a European government official briefed on the investigation told CNN on\"\n            ' Tuesday. While flying was \"a big part of his life,\" the source said, it\\'s only one theory being'\n            \" considered. Another source, a law enforcement official briefed on the investigation, also told CNN that\"\n            \" authorities believe the primary motive for Lubitz to bring down the plane was that he feared he would\"\n            \" not be allowed to fly because of his medical problems. Lubitz's girlfriend told investigators he had\"\n            \" seen an eye doctor and a neuropsychologist, both of whom deemed him unfit to work recently and concluded\"\n            \" he had psychological issues, the European government official said. But no matter what details emerge\"\n            \" about his previous mental health struggles, there's more to the story, said Brian Russell, a forensic\"\n            ' psychologist. \"Psychology can explain why somebody would turn rage inward on themselves about the fact'\n            \" that maybe they weren't going to keep doing their job and they're upset about that and so they're\"\n            ' suicidal,\" he said. \"But there is no mental illness that explains why somebody then feels entitled to'\n            \" also take that rage and turn it outward on 149 other people who had nothing to do with the person's\"\n            ' problems.\" Germanwings crash compensation: What we know . Who was the captain of Germanwings Flight'\n            \" 9525? CNN's Margot Haddad reported from Marseille and Pamela Brown from Dusseldorf, while Laura\"\n            \" Smith-Spark wrote from London. CNN's Frederik Pleitgen, Pamela Boykoff, Antonia Mortensen, Sandrine\"\n            \" Amiel and Anna-Maja Rappard contributed to this report.\"\n        )\n        SHORTER_ARTICLE = (\n            \"(CNN)The Palestinian Authority officially became the 123rd member of the International Criminal Court on\"\n            \" Wednesday, a step that gives the court jurisdiction over alleged crimes in Palestinian territories. The\"\n            \" formal accession was marked with a ceremony at The Hague, in the Netherlands, where the court is based.\"\n            \" The Palestinians signed the ICC's founding Rome Statute in January, when they also accepted its\"\n            ' jurisdiction over alleged crimes committed \"in the occupied Palestinian territory, including East'\n            ' Jerusalem, since June 13, 2014.\" Later that month, the ICC opened a preliminary examination into the'\n            \" situation in Palestinian territories, paving the way for possible war crimes investigations against\"\n            \" Israelis. As members of the court, Palestinians may be subject to counter-charges as well. Israel and\"\n            \" the United States, neither of which is an ICC member, opposed the Palestinians' efforts to join the\"\n            \" body. But Palestinian Foreign Minister Riad al-Malki, speaking at Wednesday's ceremony, said it was a\"\n            ' move toward greater justice. \"As Palestine formally becomes a State Party to the Rome Statute today, the'\n            ' world is also a step closer to ending a long era of impunity and injustice,\" he said, according to an'\n            ' ICC news release. \"Indeed, today brings us closer to our shared goals of justice and peace.\" Judge'\n            \" Kuniko Ozaki, a vice president of the ICC, said acceding to the treaty was just the first step for the\"\n            ' Palestinians. \"As the Rome Statute today enters into force for the State of Palestine, Palestine'\n            \" acquires all the rights as well as responsibilities that come with being a State Party to the Statute.\"\n            ' These are substantive commitments, which cannot be taken lightly,\" she said. Rights group Human Rights'\n            ' Watch welcomed the development. \"Governments seeking to penalize Palestine for joining the ICC should'\n            \" immediately end their pressure, and countries that support universal acceptance of the court's treaty\"\n            ' should speak out to welcome its membership,\" said Balkees Jarrah, international justice counsel for the'\n            \" group. \\\"What's objectionable is the attempts to undermine international justice, not Palestine's\"\n            ' decision to join a treaty to which over 100 countries around the world are members.\" In January, when'\n            \" the preliminary ICC examination was opened, Israeli Prime Minister Benjamin Netanyahu described it as an\"\n            ' outrage, saying the court was overstepping its boundaries. The United States also said it \"strongly\"'\n            \" disagreed with the court's decision. \\\"As we have said repeatedly, we do not believe that Palestine is a\"\n            ' state and therefore we do not believe that it is eligible to join the ICC,\" the State Department said in'\n            ' a statement. It urged the warring sides to resolve their differences through direct negotiations. \"We'\n            ' will continue to oppose actions against Israel at the ICC as counterproductive to the cause of peace,\"'\n            \" it said. But the ICC begs to differ with the definition of a state for its purposes and refers to the\"\n            ' territories as \"Palestine.\" While a preliminary examination is not a formal investigation, it allows the'\n            \" court to review evidence and determine whether to investigate suspects on both sides. Prosecutor Fatou\"\n            ' Bensouda said her office would \"conduct its analysis in full independence and impartiality.\" The war'\n            \" between Israel and Hamas militants in Gaza last summer left more than 2,000 people dead. The inquiry\"\n            \" will include alleged war crimes committed since June. The International Criminal Court was set up in\"\n            \" 2002 to prosecute genocide, crimes against humanity and war crimes. CNN's Vasco Cotovio, Kareem Khadder\"\n            \" and Faith Karimi contributed to this report.\"\n        )\n        IRAN_ARTICLE = (\n            \"(CNN)The United States and its negotiating partners reached a very strong framework agreement with Iran\"\n            \" in Lausanne, Switzerland, on Thursday that limits Iran's nuclear program in such a way as to effectively\"\n            \" block it from building a nuclear weapon. Expect pushback anyway, if the recent past is any harbinger.\"\n            \" Just last month, in an attempt to head off such an agreement, House Speaker John Boehner invited Israeli\"\n            \" Prime Minister Benjamin Netanyahu to preemptively blast it before Congress, and 47 senators sent a\"\n            \" letter to the Iranian leadership warning them away from a deal. The debate that has already begun since\"\n            \" the announcement of the new framework will likely result in more heat than light. It will not be helped\"\n            \" by the gathering swirl of dubious assumptions and doubtful assertions. Let us address some of these: .\"\n            \" The most misleading assertion, despite universal rejection by experts, is that the negotiations'\"\n            \" objective at the outset was the total elimination of any nuclear program in Iran. That is the position\"\n            \" of Netanyahu and his acolytes in the U.S. Congress. But that is not and never was the objective. If it\"\n            \" had been, there would have been no Iranian team at the negotiating table. Rather, the objective has\"\n            \" always been to structure an agreement or series of agreements so that Iran could not covertly develop a\"\n            \" nuclear arsenal before the United States and its allies could respond. The new framework has exceeded\"\n            \" expectations in achieving that goal. It would reduce Iran's low-enriched uranium stockpile, cut by\"\n            \" two-thirds its number of installed centrifuges and implement a rigorous inspection regime. Another\"\n            \" dubious assumption of opponents is that the Iranian nuclear program is a covert weapons program. Despite\"\n            \" sharp accusations by some in the United States and its allies, Iran denies having such a program, and\"\n            \" U.S. intelligence contends that Iran has not yet made the decision to build a nuclear weapon. Iran's\"\n            \" continued cooperation with International Atomic Energy Agency inspections is further evidence on this\"\n            \" point, and we'll know even more about Iran's program in the coming months and years because of the deal.\"\n            \" In fact, the inspections provisions that are part of this agreement are designed to protect against any\"\n            \" covert action by the Iranians. What's more, the rhetoric of some members of Congress has implied that\"\n            \" the negotiations have been between only the United States and Iran (i.e., the 47 senators' letter\"\n            \" warning that a deal might be killed by Congress or a future president). This of course is not the case.\"\n            \" The talks were between Iran and the five permanent members of the U.N. Security Council (United States,\"\n            \" United Kingdom, France, China and Russia) plus Germany, dubbed the P5+1. While the United States has\"\n            \" played a leading role in the effort, it negotiated the terms alongside its partners. If the agreement\"\n            \" reached by the P5+1 is rejected by Congress, it could result in an unraveling of the sanctions on Iran\"\n            \" and threaten NATO cohesion in other areas. Another questionable assertion is that this agreement\"\n            \" contains a sunset clause, after which Iran will be free to do as it pleases. Again, this is not the\"\n            \" case. Some of the restrictions on Iran's nuclear activities, such as uranium enrichment, will be eased\"\n            \" or eliminated over time, as long as 15 years. But most importantly, the framework agreement includes\"\n            \" Iran's ratification of the Additional Protocol, which allows IAEA inspectors expanded access to nuclear\"\n            \" sites both declared and nondeclared. This provision will be permanent. It does not sunset. Thus, going\"\n            \" forward, if Iran decides to enrich uranium to weapons-grade levels, monitors will be able to detect such\"\n            \" a move in a matter of days and alert the U.N. Security Council. Many in Congress have said that the\"\n            ' agreement should be a formal treaty requiring the Senate to \"advise and consent.\" But the issue is not'\n            \" suited for a treaty. Treaties impose equivalent obligations on all signatories. For example, the New\"\n            \" START treaty limits Russia and the United States to 1,550 deployed strategic warheads. But any agreement\"\n            \" with Iran will not be so balanced.  The restrictions and obligations in the final framework agreement\"\n            \" will be imposed almost exclusively on Iran. The P5+1 are obligated only to ease and eventually remove\"\n            \" most but not all economic sanctions, which were imposed as leverage to gain this final deal. Finally\"\n            \" some insist that any agreement must address Iranian missile programs, human rights violations or support\"\n            \" for Hamas or Hezbollah.  As important as these issues are, and they must indeed be addressed, they are\"\n            \" unrelated to the most important aim of a nuclear deal: preventing a nuclear Iran.  To include them in\"\n            \" the negotiations would be a poison pill. This agreement should be judged on its merits and on how it\"\n            \" affects the security of our negotiating partners and allies, including Israel. Those judgments should be\"\n            \" fact-based, not based on questionable assertions or dubious assumptions.\"\n        )\n        ARTICLE_SUBWAY = (\n            \"New York (CNN)When Liana Barrientos was 23 years old, she got married in Westchester County, New York. A\"\n            \" year later, she got married again in Westchester County, but to a different man and without divorcing\"\n            \" her first husband.  Only 18 days after that marriage, she got hitched yet again. Then, Barrientos\"\n            ' declared \"I do\" five more times, sometimes only within two weeks of each other. In 2010, she married'\n            \" once more, this time in the Bronx. In an application for a marriage license, she stated it was her\"\n            ' \"first and only\" marriage. Barrientos, now 39, is facing two criminal counts of \"offering a false'\n            ' instrument for filing in the first degree,\" referring to her false statements on the 2010 marriage'\n            \" license application, according to court documents. Prosecutors said the marriages were part of an\"\n            \" immigration scam. On Friday, she pleaded not guilty at State Supreme Court in the Bronx, according to\"\n            \" her attorney, Christopher Wright, who declined to comment further. After leaving court, Barrientos was\"\n            \" arrested and charged with theft of service and criminal trespass for allegedly sneaking into the New\"\n            \" York subway through an emergency exit, said Detective Annette Markowski, a police spokeswoman. In total,\"\n            \" Barrientos has been married 10 times, with nine of her marriages occurring between 1999 and 2002.  All\"\n            \" occurred either in Westchester County, Long Island, New Jersey or the Bronx. She is believed to still be\"\n            \" married to four men, and at one time, she was married to eight men at once, prosecutors say. Prosecutors\"\n            \" said the immigration scam involved some of her husbands, who filed for permanent residence status\"\n            \" shortly after the marriages.  Any divorces happened only after such filings were approved. It was\"\n            \" unclear whether any of the men will be prosecuted. The case was referred to the Bronx District\"\n            \" Attorney's Office by Immigration and Customs Enforcement and the Department of Homeland Security's\"\n            ' Investigation Division. Seven of the men are from so-called \"red-flagged\" countries, including Egypt,'\n            \" Turkey, Georgia, Pakistan and Mali. Her eighth husband, Rashid Rajput, was deported in 2006 to his\"\n            \" native Pakistan after an investigation by the Joint Terrorism Task Force. If convicted, Barrientos faces\"\n            \" up to four years in prison.  Her next court appearance is scheduled for May 18.\"\n        )\n\n        expected_summaries = [\n            \"<pad> \"\n            'prosecutor: \"so far no videos were used in the crash investigation\" two magazines claim to have found a'\n            \" cell phone video of the final seconds . \\\"one can hear cries of 'My God' in several languages,\\\" one\"\n            \" magazine says .\"\n            \"</s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s>\",\n            \"<pad> \"\n            \"the formal accession was marked by a ceremony at The Hague, in the Netherlands . the ICC opened a\"\n            \" preliminary examination into the situation in the occupied Palestinian territory . as members of the\"\n            \" court, Palestinians may be subject to counter-charges as well .\"\n            \"</s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s>\",\n            \"<pad> \"\n            \"the u.s. and its negotiating partners reached a very strong framework agreement with Iran . aaron miller:\"\n            \" the debate that has already begun since the announcement of the new framework will likely result in more\"\n            \" heat than light . the deal would reduce Iran's low-enriched uranium stockpile, cut centrifuges and\"\n            \" implement a rigorous inspection regime .\"\n            \"</s>\",\n            \"<pad> \"\n            \"prosecutors say the marriages were part of an immigration scam . if convicted, barrientos faces two\"\n            ' criminal counts of \"offering a false instrument for filing in the first degree\" she has been married 10'\n            \" times, with nine of her marriages occurring between 1999 and 2002 .\"\n            \"</s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s></s>\",\n        ]\n\n        use_task_specific_params(model, \"summarization\")\n\n        dct = tok(\n            [model.config.prefix + x for x in [FRANCE_ARTICLE, SHORTER_ARTICLE, IRAN_ARTICLE, ARTICLE_SUBWAY]],\n            padding=\"max_length\",\n            truncation=True,\n            max_length=512,\n            return_tensors=\"pt\",\n        ).to(torch_device)\n        self.assertEqual(512, dct[\"input_ids\"].shape[1])\n\n        hypotheses_batch = model.generate(\n            **dct,\n            num_beams=4,\n            length_penalty=2.0,\n            max_length=142,\n            min_length=56,\n            no_repeat_ngram_size=3,\n            do_sample=False,\n            early_stopping=True,\n        )\n\n        decoded = tok.batch_decode(hypotheses_batch)\n        self.assertListEqual(expected_summaries, decoded)\n\n    @slow\n    def test_translation_en_to_de(self):\n        model = self.model\n        tok = self.tokenizer\n        use_task_specific_params(model, \"translation_en_to_de\")\n\n        en_text = '\"Luigi often said to me that he never wanted the brothers to end up in court\", she wrote.'\n        expected_translation = (\n            '<pad> \"Luigi sagte mir oft, dass er nie wollte, dass die Brüder am Gericht sitzen\", schrieb sie.</s>'\n        )\n\n        input_ids = tok.encode(model.config.prefix + en_text, return_tensors=\"pt\")\n        input_ids = input_ids.to(torch_device)\n        output = model.generate(input_ids)\n        translation = tok.decode(output[0])\n        self.assertEqual(translation, expected_translation)\n\n    @slow\n    def test_translation_en_to_fr(self):\n        model = self.model  # google-t5/t5-base\n        tok = self.tokenizer\n        use_task_specific_params(model, \"translation_en_to_fr\")\n\n        en_text = (\n            ' This image section from an infrared recording by the Spitzer telescope shows a \"family portrait\" of'\n            \" countless generations of stars: the oldest stars are seen as blue dots. \"\n        )\n\n        input_ids = tok.encode(model.config.prefix + en_text, return_tensors=\"pt\")\n        input_ids = input_ids.to(torch_device)\n\n        output = model.generate(\n            input_ids=input_ids,\n            num_beams=4,\n            length_penalty=2.0,\n            max_length=100,\n            no_repeat_ngram_size=3,\n            do_sample=False,\n            early_stopping=True,\n        )\n        translation = tok.decode(output[0])\n        new_truncated_translation = (\n            \"<pad> \"\n            \"Cette section d'images provenant de l'enregistrement infrarouge effectué par le télescope Spitzer montre \"\n            \"un \"\n            \"« portrait familial » de générations innombrables d’étoiles : les plus anciennes sont observées \"\n            \"sous forme \"\n            \"de points bleus.\"\n            \"</s>\"\n        )\n\n        self.assertEqual(translation, new_truncated_translation)\n\n    @slow\n    def test_translation_en_to_ro(self):\n        model = self.model\n        tok = self.tokenizer\n        use_task_specific_params(model, \"translation_en_to_ro\")\n        en_text = \"Taco Bell said it plans to add 2,000 locations in the US by 2022.\"\n        expected_translation = (\n            \"<pad> Taco Bell a declarat că intenţionează să adauge 2 000 de locaţii în SUA până în 2022.</s>\"\n        )\n\n        inputs = tok(model.config.prefix + en_text, return_tensors=\"pt\").to(torch_device)\n        output = model.generate(**inputs)\n        translation = tok.decode(output[0])\n        self.assertEqual(translation, expected_translation)\n\n    @slow\n    def test_contrastive_search_t5(self):\n        article = (\n            \" New York (CNN)When Liana Barrientos was 23 years old, she got married in Westchester County, New York. A\"\n            \" year later, she got married again in Westchester County, but to a different man and without divorcing\"\n            \" her first husband.  Only 18 days after that marriage, she got hitched yet again. Then, Barrientos\"\n            ' declared \"I do\" five more times, sometimes only within two weeks of each other. In 2010, she married'\n            \" once more, this time in the Bronx. In an application for a marriage license, she stated it was her\"\n            ' \"first and only\" marriage. Barrientos, now 39, is facing two criminal counts of \"offering a false'\n            ' instrument for filing in the first degree,\" referring to her false statements on the 2010 marriage'\n            \" license application, according to court documents. Prosecutors said the marriages were part of an\"\n            \" immigration scam. On Friday, she pleaded not guilty at State Supreme Court in the Bronx, according to\"\n            \" her attorney, Christopher Wright, who declined to comment further. After leaving court, Barrientos was\"\n            \" arrested and charged with theft of service and criminal trespass for allegedly sneaking into the New\"\n            \" York subway through an emergency exit, said Detective Annette Markowski, a police spokeswoman. In total,\"\n            \" Barrientos has been married 10 times, with nine of her marriages occurring between 1999 and 2002.  All\"\n            \" occurred either in Westchester County, Long Island, New Jersey or the Bronx. She is believed to still be\"\n            \" married to four men, and at one time, she was married to eight men at once, prosecutors say. Prosecutors\"\n            \" said the immigration scam involved some of her husbands, who filed for permanent residence status\"\n            \" shortly after the marriages.  Any divorces happened only after such filings were approved. It was\"\n            \" unclear whether any of the men will be prosecuted. The case was referred to the Bronx District\"\n            \" Attorney's Office by Immigration and Customs Enforcement and the Department of Homeland Security's\"\n            ' Investigation Division. Seven of the men are from so-called \"red-flagged\" countries, including Egypt,'\n            \" Turkey, Georgia, Pakistan and Mali. Her eighth husband, Rashid Rajput, was deported in 2006 to his\"\n            \" native Pakistan after an investigation by the Joint Terrorism Task Force. If convicted, Barrientos faces\"\n            \" up to four years in prison.  Her next court appearance is scheduled for May 18.\"\n        )\n        article = \"summarize: \" + article.strip()\n        t5_tokenizer = AutoTokenizer.from_pretrained(\"flax-community/t5-base-cnn-dm\")\n        t5_model = T5ForConditionalGeneration.from_pretrained(\"flax-community/t5-base-cnn-dm\").to(torch_device)\n        input_ids = t5_tokenizer(\n            article, add_special_tokens=False, truncation=True, max_length=512, return_tensors=\"pt\"\n        ).input_ids.to(torch_device)\n\n        outputs = t5_model.generate(input_ids, penalty_alpha=0.5, top_k=5, max_length=64)\n        generated_text = t5_tokenizer.batch_decode(outputs, skip_special_tokens=True)\n\n        # TODO: @arthur?\n        # PR #31938 caused regression on this test which was fixed by PR #34089\n        self.assertListEqual(\n            generated_text,\n            [\n                \"Liana Barrientos has been married 10 times, nine of them in the Bronx . Her husbands filed for \"\n                \"permanent residence after the marriages, prosecutors say .\"\n            ],\n        )\n\n    @slow\n    @require_torch_accelerator\n    def test_compile_static_cache(self):\n        NUM_TOKENS_TO_GENERATE = 40\n        EXPECTED_TEXT_COMPLETION = [\n            \"theory of relativity states that 1) the speed of light is constant in all inertial reference frames. the laws of physics are the same for all inertial reference frames.\",\n            \"ketchup is my favorite condiment.\",\n        ]\n\n        prompts = [\n            \"summarize: Simply put, the theory of relativity states that 1) the speed of light is constant in all inertial \"\n            \"reference frames, and 2) the laws of physics are the same for all inertial reference frames.\\nThe \"\n            \"theory of relativity is not hard to grasp.\",\n            \"summarize: My favorite all time favorite condiment is ketchup. I love it on everything. I love it on my eggs, \"\n            \"my fries, my chicken, my burgers, my hot dogs, my sandwiches, my salads, my pizza.\",\n        ]\n        model = T5ForConditionalGeneration.from_pretrained(\"google-t5/t5-small\").to(torch_device)\n        tokenizer = T5Tokenizer.from_pretrained(\"google-t5/t5-small\")\n        inputs = tokenizer(prompts, return_tensors=\"pt\", padding=True).to(model.device)\n\n        # Dynamic Cache\n        generated_ids = model.generate(**inputs, max_new_tokens=NUM_TOKENS_TO_GENERATE, do_sample=False)\n        dynamic_text = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)\n        self.assertEqual(EXPECTED_TEXT_COMPLETION, dynamic_text)\n\n        # Static Cache\n        generated_ids = model.generate(\n            **inputs, max_new_tokens=NUM_TOKENS_TO_GENERATE, do_sample=False, cache_implementation=\"static\"\n        )\n        static_text = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)\n        self.assertEqual(EXPECTED_TEXT_COMPLETION, static_text)\n\n        # Static Cache + compile\n        model.forward = torch.compile(model.forward, mode=\"reduce-overhead\", fullgraph=True)\n        generated_ids = model.generate(\n            **inputs, max_new_tokens=NUM_TOKENS_TO_GENERATE, do_sample=False, cache_implementation=\"static\"\n        )\n        static_compiled_text = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)\n        self.assertEqual(EXPECTED_TEXT_COMPLETION, static_compiled_text)\n\n    @slow\n    @require_torch_accelerator\n    def test_compile_static_cache_encoder(self):\n        prompts = [\n            \"summarize: Simply put, the theory of relativity states that 1) the speed of light is constant in all inertial \"\n            \"reference frames, and 2) the laws of physics are the same for all inertial reference frames.\\nThe \"\n            \"theory of relativity is not hard to grasp.\",\n            \"summarize: My favorite all time favorite condiment is ketchup. I love it on everything. I love it on my eggs, \"\n            \"my fries, my chicken, my burgers, my hot dogs, my sandwiches, my salads, my pizza.\",\n        ]\n        model = T5EncoderModel.from_pretrained(\"google-t5/t5-small\").to(torch_device)\n        tokenizer = T5Tokenizer.from_pretrained(\"google-t5/t5-small\")\n        inputs = tokenizer(prompts, return_tensors=\"pt\", padding=True).to(model.device)\n\n        logits = model(**inputs)\n\n        model.forward = torch.compile(model.forward, mode=\"reduce-overhead\", fullgraph=True)\n        logits_compiled = model(**inputs)\n        torch.testing.assert_close(logits[0][:, -3:, -3], logits_compiled[0][:, -3:, -3], rtol=1e-5, atol=1e-5)\n\n    @slow\n    def test_export_encoder(self):\n        \"\"\"Test exporting T5EncoderModel to torch export format.\"\"\"\n        if not is_torch_greater_or_equal_than_2_4:\n            self.skipTest(\"This test requires torch >= 2.4 to run.\")\n\n        from transformers.integrations.executorch import Seq2SeqLMEncoderExportableModule\n\n        model_id = \"google-t5/t5-small\"\n        device = \"cpu\"\n        example_input_ids = torch.ones((1, 10), dtype=torch.long).to(device)\n\n        # Load model\n        model = T5EncoderModel.from_pretrained(model_id).to(device=device).eval()\n\n        # Get original output for comparison\n        with torch.no_grad():\n            original_output = model(input_ids=example_input_ids).last_hidden_state\n\n        encoder_model = Seq2SeqLMEncoderExportableModule(model)\n\n        # Export the encoder_model\n        with torch.no_grad():\n            seq_len_dim = torch.export.Dim(\"sequence_length\", max=4096)\n\n            exported_program = torch.export.export(\n                encoder_model, (example_input_ids,), dynamic_shapes={\"input_ids\": {1: seq_len_dim}}, strict=True\n            )\n\n        # Test the exported model\n        with torch.no_grad():\n            exported_output = exported_program.module()(example_input_ids)\n\n        # Verify outputs are close enough\n        self.assertTrue(torch.allclose(original_output, exported_output, atol=1e-5))\n\n    @slow\n    def test_export_decoder(self):\n        \"\"\"Test exporting T5 decoder with static cache to torch export format.\"\"\"\n        if not is_torch_greater_or_equal_than_2_4:\n            self.skipTest(\"This test requires torch >= 2.4 to run.\")\n\n        from transformers import AutoModelForSeq2SeqLM, T5ForConditionalGeneration\n        from transformers.integrations.executorch import Seq2SeqLMDecoderExportableModuleWithStaticCache\n\n        model_id = \"google-t5/t5-small\"\n\n        # Configuration for static cache\n        batch_size = 1\n        max_cache_len = 123\n        device = \"cpu\"\n\n        full_model = AutoModelForSeq2SeqLM.from_pretrained(model_id).to(device)\n        self.assertIsInstance(full_model, T5ForConditionalGeneration)\n        decoder_model = (\n            Seq2SeqLMDecoderExportableModuleWithStaticCache(full_model, max_cache_len, batch_size).to(device).eval()\n        )\n\n        # Prepare test inputs\n        example_decoder_input_ids = torch.tensor([[0]], dtype=torch.long)  # Start token\n        example_cache_position = torch.tensor([0], dtype=torch.long)\n\n        # For T5-small, hidden size is 512\n        example_encoder_hidden_states = torch.zeros((batch_size, 10, 512), dtype=torch.float32)\n\n        # Export the model\n        with torch.no_grad():\n            encoder_sequence_length_dim = torch.export.Dim(\"encoder_sequence_length\", max=4096)\n\n            exported_program = torch.export.export(\n                decoder_model,\n                (example_decoder_input_ids, example_encoder_hidden_states, example_cache_position),\n                dynamic_shapes={\n                    \"decoder_input_ids\": None,\n                    \"encoder_hidden_states\": {1: encoder_sequence_length_dim},\n                    \"cache_position\": None,\n                },\n                strict=True,\n            )\n\n        # We won't directly verify outputs here as it's complicated with caching,\n        # but we'll check the export was successful\n        self.assertIsNotNone(exported_program)\n\n        # Verify cache buffers existence and shapes\n        cache_buffers = [\n            (name, buffer)\n            for name, buffer in exported_program.named_buffers()\n            if name.startswith(\"key_cache_\") or name.startswith(\"value_cache_\")\n        ]\n\n        # Verify cache buffers\n        self.assertTrue(len(cache_buffers) > 0, \"No cache buffers found in exported model\")\n        for name, buffer in cache_buffers:\n            # Verify cache buffers are 3D\n            self.assertEqual(buffer.shape[2], max_cache_len)\n\n    @slow\n    def test_export_t5_summarization(self):\n        \"\"\"Test composing exported T5 encoder and decoder for summarization.\"\"\"\n        if not is_torch_greater_or_equal_than_2_4:\n            self.skipTest(\"This test requires torch >= 2.4 to run.\")\n\n        from transformers import AutoModelForSeq2SeqLM, AutoTokenizer, T5ForConditionalGeneration\n        from transformers.integrations.executorch import Seq2SeqLMExportableModule\n\n        device = torch_device\n        batch_size = 1\n        max_cache_length = 1234\n        max_hidden_seq_length = 5678\n        model_id = \"google-t5/t5-small\"\n\n        tokenizer = AutoTokenizer.from_pretrained(model_id)\n        full_model = AutoModelForSeq2SeqLM.from_pretrained(model_id).to(device).eval()\n        self.assertIsInstance(full_model, T5ForConditionalGeneration)\n        wrapped_model = Seq2SeqLMExportableModule(\n            full_model,\n            batch_size=batch_size,\n            max_hidden_seq_length=max_hidden_seq_length,\n            max_cache_length=max_cache_length,\n        )\n\n        exported_t5 = wrapped_model.export()\n\n        # Test Summarization with Composed Models\n        prompts = [\n            \"summarize: Simply put, the theory of relativity states that 1) the speed of light is constant in all inertial \"\n            \"reference frames, and 2) the laws of physics are the same for all inertial reference frames.\\nThe \"\n            \"theory of relativity is not hard to grasp.\"\n        ]\n        input_ids = tokenizer(prompts, return_tensors=\"pt\").input_ids\n\n        generated_ids = exported_t5.generate(prompt_token_ids=input_ids, max_new_tokens=max_cache_length)\n        generated_summary = tokenizer.decode(generated_ids, skip_special_tokens=True)\n\n        # Also run original model for comparison\n        original_model = T5ForConditionalGeneration.from_pretrained(model_id).eval()\n        with torch.no_grad():\n            original_outputs = original_model.generate(input_ids, max_length=50, num_beams=1)\n        original_summary = tokenizer.decode(original_outputs[0], skip_special_tokens=True)\n\n        # Basic verification that we got a reasonable summary\n        self.assertEqual(generated_summary, original_summary)\n\n\n@require_torch\nclass TestAsymmetricT5(unittest.TestCase):\n    def build_model_and_check_forward_pass(self, **kwargs):\n        tester = T5ModelTester(self, **kwargs)\n        config, *inputs = tester.prepare_config_and_inputs()\n        (\n            input_ids,\n            decoder_input_ids,\n            attention_mask,\n            decoder_attention_mask,\n            lm_labels,\n        ) = inputs\n        model = T5ForConditionalGeneration(config=config).to(torch_device).eval()\n        outputs = model(\n            input_ids=input_ids,\n            decoder_input_ids=decoder_input_ids,\n            decoder_attention_mask=decoder_attention_mask,\n            labels=lm_labels,\n        )\n        # outputs = model(*inputs)\n        assert len(outputs) == 4\n        assert outputs[\"logits\"].size() == (tester.batch_size, tester.decoder_seq_length, tester.vocab_size)\n        assert outputs[\"loss\"].size() == ()\n        return model\n\n    def test_small_decoder(self):\n        # num_hidden_layers is passed to T5Config as num_layers\n        model = self.build_model_and_check_forward_pass(decoder_layers=1, num_hidden_layers=2)\n        assert len(model.encoder.block) == 2\n        assert len(model.decoder.block) == 1\n\n    def test_defaulting_to_symmetry(self):\n        # num_hidden_layers is passed to T5Config as num_layers\n        model = self.build_model_and_check_forward_pass(num_hidden_layers=2)\n        assert len(model.decoder.block) == len(model.encoder.block) == 2\n",
        "# Copyright 2021, The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Testing suite for the PyTorch BART model.\"\"\"\n\nimport copy\nimport tempfile\nimport unittest\n\nimport timeout_decorator  # noqa\n\nfrom transformers import BartConfig, is_torch_available\nfrom transformers.testing_utils import (\n    require_sentencepiece,\n    require_tokenizers,\n    require_torch,\n    require_torch_fp16,\n    slow,\n    torch_device,\n)\nfrom transformers.utils import cached_property\n\nfrom ...generation.test_utils import GenerationTesterMixin\nfrom ...test_configuration_common import ConfigTester\nfrom ...test_modeling_common import ModelTesterMixin, floats_tensor, ids_tensor\nfrom ...test_pipeline_mixin import PipelineTesterMixin\n\n\nif is_torch_available():\n    import torch\n\n    from transformers import (\n        AutoModelForSequenceClassification,\n        BartForCausalLM,\n        BartForConditionalGeneration,\n        BartForQuestionAnswering,\n        BartForSequenceClassification,\n        BartModel,\n        BartTokenizer,\n        pipeline,\n    )\n    from transformers.models.bart.modeling_bart import BartDecoder, BartEncoder, shift_tokens_right\n\n\ndef prepare_bart_inputs_dict(\n    config,\n    input_ids,\n    decoder_input_ids=None,\n    attention_mask=None,\n    decoder_attention_mask=None,\n):\n    if attention_mask is None:\n        attention_mask = input_ids.ne(config.pad_token_id)\n    if decoder_attention_mask is None:\n        decoder_attention_mask = decoder_input_ids.ne(config.pad_token_id)\n    return {\n        \"input_ids\": input_ids,\n        \"decoder_input_ids\": decoder_input_ids,\n        \"attention_mask\": attention_mask,\n        \"decoder_attention_mask\": attention_mask,\n    }\n\n\nclass BartModelTester:\n    def __init__(\n        self,\n        parent,\n        batch_size=13,\n        seq_length=7,\n        is_training=True,\n        use_labels=False,\n        vocab_size=99,\n        hidden_size=16,\n        num_hidden_layers=2,\n        num_attention_heads=4,\n        intermediate_size=4,\n        hidden_act=\"gelu\",\n        hidden_dropout_prob=0.1,\n        attention_probs_dropout_prob=0.1,\n        max_position_embeddings=50,\n        eos_token_id=2,\n        pad_token_id=1,\n        bos_token_id=0,\n    ):\n        self.parent = parent\n        self.batch_size = batch_size\n        self.seq_length = seq_length\n        self.is_training = is_training\n        self.use_labels = use_labels\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.eos_token_id = eos_token_id\n        self.pad_token_id = pad_token_id\n        self.bos_token_id = bos_token_id\n\n    def prepare_config_and_inputs(self):\n        input_ids = ids_tensor([self.batch_size, self.seq_length], self.vocab_size)\n        input_ids = ids_tensor([self.batch_size, self.seq_length], self.vocab_size).clamp(\n            3,\n        )\n        input_ids[:, -1] = self.eos_token_id  # Eos Token\n\n        decoder_input_ids = ids_tensor([self.batch_size, self.seq_length], self.vocab_size)\n\n        config = self.get_config()\n        inputs_dict = prepare_bart_inputs_dict(config, input_ids, decoder_input_ids)\n        return config, inputs_dict\n\n    def get_config(self):\n        return BartConfig(\n            vocab_size=self.vocab_size,\n            d_model=self.hidden_size,\n            encoder_layers=self.num_hidden_layers,\n            decoder_layers=self.num_hidden_layers,\n            encoder_attention_heads=self.num_attention_heads,\n            decoder_attention_heads=self.num_attention_heads,\n            encoder_ffn_dim=self.intermediate_size,\n            decoder_ffn_dim=self.intermediate_size,\n            dropout=self.hidden_dropout_prob,\n            attention_dropout=self.attention_probs_dropout_prob,\n            max_position_embeddings=self.max_position_embeddings,\n            eos_token_id=self.eos_token_id,\n            bos_token_id=self.bos_token_id,\n            pad_token_id=self.pad_token_id,\n        )\n\n    def get_pipeline_config(self):\n        config = self.get_config()\n        config.max_position_embeddings = 100\n        config.vocab_size = 300\n        return config\n\n    def prepare_config_and_inputs_for_common(self):\n        config, inputs_dict = self.prepare_config_and_inputs()\n        return config, inputs_dict\n\n    def create_and_check_decoder_model_past_large_inputs(self, config, inputs_dict):\n        model = BartModel(config=config).get_decoder().to(torch_device).eval()\n        input_ids = inputs_dict[\"input_ids\"]\n        attention_mask = inputs_dict[\"attention_mask\"]\n\n        # first forward pass\n        outputs = model(input_ids, attention_mask=attention_mask, use_cache=True)\n\n        output, past_key_values = outputs.to_tuple()\n\n        # create hypothetical multiple next token and extent to next_input_ids\n        next_tokens = ids_tensor((self.batch_size, 3), config.vocab_size)\n        next_attn_mask = ids_tensor((self.batch_size, 3), 2)\n\n        # append to next input_ids and\n        next_input_ids = torch.cat([input_ids, next_tokens], dim=-1)\n        next_attention_mask = torch.cat([attention_mask, next_attn_mask], dim=-1)\n\n        output_from_no_past = model(next_input_ids, attention_mask=next_attention_mask)[\"last_hidden_state\"]\n        output_from_past = model(next_tokens, attention_mask=next_attention_mask, past_key_values=past_key_values)[\n            \"last_hidden_state\"\n        ]\n\n        # select random slice\n        random_slice_idx = ids_tensor((1,), output_from_past.shape[-1]).item()\n        output_from_no_past_slice = output_from_no_past[:, -3:, random_slice_idx].detach()\n        output_from_past_slice = output_from_past[:, :, random_slice_idx].detach()\n\n        self.parent.assertTrue(output_from_past_slice.shape[1] == next_tokens.shape[1])\n\n        # test that outputs are equal for slice\n        self.parent.assertTrue(torch.allclose(output_from_past_slice, output_from_no_past_slice, atol=1e-3))\n\n    def check_encoder_decoder_model_standalone(self, config, inputs_dict):\n        model = BartModel(config=config).to(torch_device).eval()\n        outputs = model(**inputs_dict)\n\n        encoder_last_hidden_state = outputs.encoder_last_hidden_state\n        last_hidden_state = outputs.last_hidden_state\n\n        with tempfile.TemporaryDirectory() as tmpdirname:\n            encoder = model.get_encoder()\n            encoder.save_pretrained(tmpdirname)\n            encoder = BartEncoder.from_pretrained(tmpdirname).to(torch_device)\n\n        encoder_last_hidden_state_2 = encoder(inputs_dict[\"input_ids\"], attention_mask=inputs_dict[\"attention_mask\"])[\n            0\n        ]\n\n        self.parent.assertTrue((encoder_last_hidden_state_2 - encoder_last_hidden_state).abs().max().item() < 1e-3)\n\n        with tempfile.TemporaryDirectory() as tmpdirname:\n            decoder = model.get_decoder()\n            decoder.save_pretrained(tmpdirname)\n            decoder = BartDecoder.from_pretrained(tmpdirname).to(torch_device)\n\n        last_hidden_state_2 = decoder(\n            input_ids=inputs_dict[\"decoder_input_ids\"],\n            attention_mask=inputs_dict[\"decoder_attention_mask\"],\n            encoder_hidden_states=encoder_last_hidden_state,\n            encoder_attention_mask=inputs_dict[\"attention_mask\"],\n        )[0]\n\n        self.parent.assertTrue((last_hidden_state_2 - last_hidden_state).abs().max().item() < 1e-3)\n\n\n@require_torch\nclass BartHeadTests(unittest.TestCase):\n    vocab_size = 99\n\n    def _get_config_and_data(self):\n        input_ids = torch.tensor(\n            [\n                [71, 82, 18, 33, 46, 91, 2],\n                [68, 34, 26, 58, 30, 82, 2],\n                [5, 97, 17, 39, 94, 40, 2],\n                [76, 83, 94, 25, 70, 78, 2],\n                [87, 59, 41, 35, 48, 66, 2],\n                [55, 13, 16, 58, 5, 2, 1],  # note padding\n                [64, 27, 31, 51, 12, 75, 2],\n                [52, 64, 86, 17, 83, 39, 2],\n                [48, 61, 9, 24, 71, 82, 2],\n                [26, 1, 60, 48, 22, 13, 2],\n                [21, 5, 62, 28, 14, 76, 2],\n                [45, 98, 37, 86, 59, 48, 2],\n                [70, 70, 50, 9, 28, 0, 2],\n            ],\n            dtype=torch.long,\n            device=torch_device,\n        )\n\n        batch_size = input_ids.shape[0]\n        config = BartConfig(\n            vocab_size=self.vocab_size,\n            d_model=24,\n            encoder_layers=2,\n            decoder_layers=2,\n            encoder_attention_heads=2,\n            decoder_attention_heads=2,\n            encoder_ffn_dim=32,\n            decoder_ffn_dim=32,\n            max_position_embeddings=48,\n            eos_token_id=2,\n            pad_token_id=1,\n            bos_token_id=0,\n        )\n        return config, input_ids, batch_size\n\n    def test_sequence_classification_forward(self):\n        config, input_ids, batch_size = self._get_config_and_data()\n        labels = _long_tensor([2] * batch_size).to(torch_device)\n        model = BartForSequenceClassification(config)\n        model.to(torch_device)\n        outputs = model(input_ids=input_ids, decoder_input_ids=input_ids, labels=labels)\n        expected_shape = torch.Size((batch_size, config.num_labels))\n        self.assertEqual(outputs[\"logits\"].shape, expected_shape)\n        self.assertIsInstance(outputs[\"loss\"].item(), float)\n\n    def test_question_answering_forward(self):\n        config, input_ids, batch_size = self._get_config_and_data()\n        sequence_labels = ids_tensor([batch_size], 2).to(torch_device)\n        model = BartForQuestionAnswering(config)\n        model.to(torch_device)\n        outputs = model(\n            input_ids=input_ids,\n            start_positions=sequence_labels,\n            end_positions=sequence_labels,\n        )\n\n        self.assertEqual(outputs[\"start_logits\"].shape, input_ids.shape)\n        self.assertEqual(outputs[\"end_logits\"].shape, input_ids.shape)\n        self.assertIsInstance(outputs[\"loss\"].item(), float)\n\n    @timeout_decorator.timeout(1)\n    def test_lm_forward(self):\n        config, input_ids, batch_size = self._get_config_and_data()\n        lm_labels = ids_tensor([batch_size, input_ids.shape[1]], self.vocab_size).to(torch_device)\n        lm_model = BartForConditionalGeneration(config)\n        lm_model.to(torch_device)\n        outputs = lm_model(input_ids=input_ids, labels=lm_labels)\n        expected_shape = (batch_size, input_ids.shape[1], config.vocab_size)\n        self.assertEqual(outputs[\"logits\"].shape, expected_shape)\n        self.assertIsInstance(outputs[\"loss\"].item(), float)\n\n    def test_lm_uneven_forward(self):\n        config = BartConfig(\n            vocab_size=self.vocab_size,\n            d_model=14,\n            encoder_layers=2,\n            decoder_layers=2,\n            encoder_attention_heads=2,\n            decoder_attention_heads=2,\n            encoder_ffn_dim=8,\n            decoder_ffn_dim=8,\n            max_position_embeddings=48,\n        )\n        lm_model = BartForConditionalGeneration(config).to(torch_device)\n        context = torch.tensor(\n            [[71, 82, 18, 33, 46, 91, 2], [68, 34, 26, 58, 30, 2, 1]], device=torch_device, dtype=torch.long\n        )\n        summary = torch.tensor([[82, 71, 82, 18, 2], [58, 68, 2, 1, 1]], device=torch_device, dtype=torch.long)\n        outputs = lm_model(input_ids=context, decoder_input_ids=summary, labels=summary)\n        expected_shape = (*summary.shape, config.vocab_size)\n        self.assertEqual(outputs[\"logits\"].shape, expected_shape)\n\n    def test_generate_beam_search(self):\n        input_ids = torch.tensor([[71, 82, 2], [68, 34, 2]], device=torch_device, dtype=torch.long)\n        config = BartConfig(\n            vocab_size=self.vocab_size,\n            d_model=24,\n            encoder_layers=2,\n            decoder_layers=2,\n            encoder_attention_heads=2,\n            decoder_attention_heads=2,\n            encoder_ffn_dim=32,\n            decoder_ffn_dim=32,\n            max_position_embeddings=48,\n            eos_token_id=2,\n            pad_token_id=1,\n            bos_token_id=0,\n        )\n        lm_model = BartForConditionalGeneration(config).to(torch_device)\n        lm_model.eval()\n\n        max_length = 5\n        generated_ids = lm_model.generate(\n            input_ids.clone(),\n            do_sample=True,\n            num_return_sequences=1,\n            num_beams=2,\n            no_repeat_ngram_size=3,\n            max_length=max_length,\n        )\n        self.assertEqual(generated_ids.shape, (input_ids.shape[0], max_length))\n\n    def test_shift_tokens_right(self):\n        input_ids = torch.tensor([[71, 82, 18, 33, 2, 1, 1], [68, 34, 26, 58, 30, 82, 2]], dtype=torch.long)\n        shifted = shift_tokens_right(input_ids, 1, 2)\n        n_pad_before = input_ids.eq(1).float().sum()\n        n_pad_after = shifted.eq(1).float().sum()\n        self.assertEqual(shifted.shape, input_ids.shape)\n        self.assertEqual(n_pad_after, n_pad_before - 1)\n        self.assertTrue(torch.eq(shifted[:, 0], 2).all())\n\n    @slow\n    def test_tokenization(self):\n        tokenizer = BartTokenizer.from_pretrained(\"facebook/bart-large\")\n        examples = [\" Hello world\", \" DomDramg\"]  # need leading spaces for equality\n        fairseq_results = [\n            torch.tensor([0, 20920, 232, 2]),\n            torch.tensor([0, 11349, 495, 4040, 571, 2]),\n        ]\n        for ex, desired_result in zip(examples, fairseq_results):\n            bart_toks = tokenizer.encode(ex, return_tensors=\"pt\").squeeze()\n            assert_tensors_close(desired_result.long(), bart_toks, prefix=ex)\n\n    @require_torch_fp16\n    def test_generate_fp16(self):\n        config, input_ids, batch_size = self._get_config_and_data()\n        attention_mask = input_ids.ne(1).to(torch_device)\n        model = BartForConditionalGeneration(config).eval().to(torch_device)\n        model.half()\n        model.generate(input_ids, attention_mask=attention_mask)\n        model.generate(num_beams=4, do_sample=True, early_stopping=False, num_return_sequences=3)\n\n    def test_dummy_inputs(self):\n        config, *_ = self._get_config_and_data()\n        model = BartForConditionalGeneration(config).eval().to(torch_device)\n        model(**model.dummy_inputs)\n\n    def test_resize_tokens_embeddings_more(self):\n        config, input_ids, _ = self._get_config_and_data()\n\n        def _get_embs(m):\n            return (m.get_input_embeddings().weight.data.clone(), m.get_output_embeddings().weight.data.clone())\n\n        model = BartForConditionalGeneration(config).eval().to(torch_device)\n        input, output = _get_embs(model)\n        self.assertTrue(torch.eq(input, output).all())\n        new_vocab_size = 45\n        model.resize_token_embeddings(new_vocab_size)\n        input_new, output_new = _get_embs(model)\n        self.assertEqual(input_new.shape, (new_vocab_size, config.d_model))\n        self.assertEqual(output_new.shape, (new_vocab_size, config.d_model))\n        self.assertTrue(torch.eq(input_new, output_new).all())\n\n\n@require_torch\nclass BartModelTest(ModelTesterMixin, GenerationTesterMixin, PipelineTesterMixin, unittest.TestCase):\n    all_model_classes = (\n        (BartModel, BartForConditionalGeneration, BartForSequenceClassification, BartForQuestionAnswering)\n        if is_torch_available()\n        else ()\n    )\n    pipeline_model_mapping = (\n        {\n            \"feature-extraction\": BartModel,\n            \"fill-mask\": BartForConditionalGeneration,\n            \"question-answering\": BartForQuestionAnswering,\n            \"summarization\": BartForConditionalGeneration,\n            \"text-classification\": BartForSequenceClassification,\n            \"text-generation\": BartForCausalLM,\n            \"text2text-generation\": BartForConditionalGeneration,\n            \"translation\": BartForConditionalGeneration,\n            \"zero-shot\": BartForSequenceClassification,\n        }\n        if is_torch_available()\n        else {}\n    )\n    is_encoder_decoder = True\n    fx_compatible = False  # Fix me Michael\n    test_pruning = False\n\n    def setUp(self):\n        self.model_tester = BartModelTester(self)\n        self.config_tester = ConfigTester(self, config_class=BartConfig)\n\n    def test_config(self):\n        self.config_tester.run_common_tests()\n\n    def test_save_load_strict(self):\n        config, inputs_dict = self.model_tester.prepare_config_and_inputs()\n        for model_class in self.all_model_classes:\n            model = model_class(config)\n\n            with tempfile.TemporaryDirectory() as tmpdirname:\n                model.save_pretrained(tmpdirname)\n                model2, info = model_class.from_pretrained(tmpdirname, output_loading_info=True)\n            self.assertEqual(info[\"missing_keys\"], [])\n\n    def test_decoder_model_past_with_large_inputs(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_decoder_model_past_large_inputs(*config_and_inputs)\n\n    def test_encoder_decoder_model_standalone(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs_for_common()\n        self.model_tester.check_encoder_decoder_model_standalone(*config_and_inputs)\n\n    # BartForSequenceClassification does not support inputs_embeds\n    def test_inputs_embeds(self):\n        config, inputs_dict = self.model_tester.prepare_config_and_inputs_for_common()\n\n        for model_class in (BartModel, BartForConditionalGeneration, BartForQuestionAnswering):\n            model = model_class(config)\n            model.to(torch_device)\n            model.eval()\n\n            inputs = copy.deepcopy(self._prepare_for_class(inputs_dict, model_class))\n\n            if not self.is_encoder_decoder:\n                input_ids = inputs[\"input_ids\"]\n                del inputs[\"input_ids\"]\n            else:\n                encoder_input_ids = inputs[\"input_ids\"]\n                decoder_input_ids = inputs.get(\"decoder_input_ids\", encoder_input_ids)\n                del inputs[\"input_ids\"]\n                inputs.pop(\"decoder_input_ids\", None)\n\n            wte = model.get_input_embeddings()\n            if not self.is_encoder_decoder:\n                inputs[\"inputs_embeds\"] = wte(input_ids)\n            else:\n                inputs[\"inputs_embeds\"] = wte(encoder_input_ids)\n                inputs[\"decoder_inputs_embeds\"] = wte(decoder_input_ids)\n\n            with torch.no_grad():\n                model(**inputs)[0]\n\n    @require_torch_fp16\n    def test_generate_fp16(self):\n        config, input_dict = self.model_tester.prepare_config_and_inputs()\n        input_ids = input_dict[\"input_ids\"]\n        attention_mask = input_ids.ne(1).to(torch_device)\n        model = BartForConditionalGeneration(config).eval().to(torch_device)\n        model.half()\n        model.generate(input_ids, attention_mask=attention_mask)\n        model.generate(num_beams=4, do_sample=True, early_stopping=False, num_return_sequences=3)\n\n    @unittest.skip(\n        reason=\"This architecture has tied weights by default and there is no way to remove it, check: https://github.com/huggingface/transformers/pull/31771#issuecomment-2210915245\"\n    )\n    def test_load_save_without_tied_weights(self):\n        pass\n\n    def test_resize_embeddings_persists_embeddings_type(self):\n        config, inputs_dict = self.model_tester.prepare_config_and_inputs()\n\n        config.scale_embedding = True\n        model = BartForConditionalGeneration(config)\n        old_type = type(model.model.decoder.embed_tokens)\n\n        model.resize_token_embeddings(new_num_tokens=config.vocab_size)\n\n        new_type = type(model.model.decoder.embed_tokens)\n        self.assertIs(old_type, new_type)\n\n\ndef assert_tensors_close(a, b, atol=1e-12, prefix=\"\"):\n    \"\"\"If tensors have different shapes, different values or a and b are not both tensors, raise a nice Assertion error.\"\"\"\n    if a is None and b is None:\n        return True\n    try:\n        if torch.allclose(a, b, atol=atol):\n            return True\n        raise\n    except Exception:\n        pct_different = (torch.gt((a - b).abs(), atol)).float().mean().item()\n        if a.numel() > 100:\n            msg = f\"tensor values are {pct_different:.1%} percent different.\"\n        else:\n            msg = f\"{a} != {b}\"\n        if prefix:\n            msg = prefix + \": \" + msg\n        raise AssertionError(msg)\n\n\ndef _long_tensor(tok_lst):\n    return torch.tensor(tok_lst, dtype=torch.long, device=torch_device)\n\n\n@require_torch\n@slow\nclass FastIntegrationTests(unittest.TestCase):\n    \"\"\"These tests are useful for debugging since they operate on a model with 1 encoder layer and 1 decoder layer.\"\"\"\n\n    @cached_property\n    def tok(self):\n        return BartTokenizer.from_pretrained(\"facebook/bart-large\")\n\n    @cached_property\n    def xsum_1_1_model(self):\n        return BartForConditionalGeneration.from_pretrained(\"sshleifer/distilbart-xsum-1-1\")\n\n    def test_xsum_1_1_generation(self):\n        hf = self.xsum_1_1_model\n        tok = self.tok\n        ARTICLE = (\n            \"The Palestinian Authority officially became the 123rd member of the International Criminal Court on\"\n            \" Wednesday, a step that gives the court jurisdiction over alleged crimes in Palestinian territories. The\"\n            \" formal accession was marked with a ceremony at The Hague, in the Netherlands, where the court is based.\"\n            \" The Palestinians signed the ICC's founding Rome Statute in January, when they also accepted its\"\n            ' jurisdiction over alleged crimes committed \"in the occupied Palestinian territory, including East'\n            ' Jerusalem, since June 13, 2014.\" Later that month, the ICC opened a preliminary examination into the'\n            \" situation in Palestinian territories, paving the way for possible war crimes investigations against\"\n            \" Israelis. As members of the court, Palestinians may be subject to counter-charges as well. Israel and\"\n            \" the United States, neither of which is an ICC member, opposed the Palestinians' efforts to join the\"\n            \" body. But Palestinian Foreign Minister Riad al-Malki, speaking at Wednesday's ceremony, said it was a\"\n            ' move toward greater justice. \"As Palestine formally becomes a State Party to the Rome Statute today, the'\n            ' world is also a step closer to ending a long era of impunity and injustice,\" he said, according to an'\n            ' ICC news release. \"Indeed, today brings us closer to our shared goals of justice and peace.\" Judge'\n            \" Kuniko Ozaki, a vice president of the ICC, said acceding to the treaty was just the first step for the\"\n            ' Palestinians. \"As the Rome Statute today enters into force for the State of Palestine, Palestine'\n            \" acquires all the rights as well as responsibilities that come with being a State Party to the Statute.\"\n            ' These are substantive commitments, which cannot be taken lightly,\" she said. Rights group Human Rights'\n            ' Watch welcomed the development. \"Governments seeking to penalize Palestine for joining the ICC should'\n            \" immediately end their pressure, and countries that support universal acceptance of the court's treaty\"\n            ' should speak out to welcome its membership,\" said Balkees Jarrah, international justice counsel for the'\n            \" group. \\\"What's objectionable is the attempts to undermine international justice, not Palestine's\"\n            ' decision to join a treaty to which over 100 countries around the world are members.\" In January, when'\n            \" the preliminary ICC examination was opened, Israeli Prime Minister Benjamin Netanyahu described it as an\"\n            ' outrage, saying the court was overstepping its boundaries. The United States also said it \"strongly\"'\n            \" disagreed with the court's decision. \\\"As we have said repeatedly, we do not believe that Palestine is a\"\n            ' state and therefore we do not believe that it is eligible to join the ICC,\" the State Department said in'\n            ' a statement. It urged the warring sides to resolve their differences through direct negotiations. \"We'\n            ' will continue to oppose actions against Israel at the ICC as counterproductive to the cause of peace,\"'\n            \" it said. But the ICC begs to differ with the definition of a state for its purposes and refers to the\"\n            ' territories as \"Palestine.\" While a preliminary examination is not a formal investigation, it allows the'\n            \" court to review evidence and determine whether to investigate suspects on both sides. Prosecutor Fatou\"\n            ' Bensouda said her office would \"conduct its analysis in full independence and impartiality.\" The war'\n            \" between Israel and Hamas militants in Gaza last summer left more than 2,000 people dead. The inquiry\"\n            \" will include alleged war crimes committed since June. The International Criminal Court was set up in\"\n            \" 2002 to prosecute genocide, crimes against humanity and war crimes.\"\n        )\n        EXPECTED = (\n            \"</s>\"\n            \" The International Criminal Court (ICC) has announced that it has been announced by the International\"\n            \" Criminal court.\"\n            \"</s>\"\n        )\n\n        dct = tok(ARTICLE, return_tensors=\"pt\")\n        generated_ids = hf.generate(**dct, num_beams=4)\n        result = tok.batch_decode(generated_ids)[0]\n        assert EXPECTED == result\n\n    def test_xsum_1_1_batch_generation(self):\n        # test batch\n\n        batch = self.tok(\n            [\n                \"The Palestinian Authority officially became the 123rd member of the International Criminal Court on\"\n                \" Wednesday, a step that gives the court jurisdiction over alleged crimes in Palestinian territories.\"\n                \" The formal accession was marked with a ceremony at The Hague, in the Netherlands, where the court is\"\n                \" based. The Palestinians signed the ICC's founding Rome Statute in January, when they also accepted\"\n                ' its jurisdiction over alleged crimes committed \"in the occupied Palestinian territory, including'\n                ' East Jerusalem, since June 13, 2014.\" Later that month, the ICC opened a preliminary examination'\n                \" into the situation in Palestinian territories, paving the way for possible war crimes investigations\"\n                \" against Israelis. As members of the court, Palestinians may be subject to counter-charges as well.\"\n                \" Israel and the United States, neither of which is an ICC member, opposed the Palestinians' efforts\"\n                \" to join the body. But Palestinian Foreign Minister Riad al-Malki, speaking at Wednesday's ceremony,\"\n                ' said it was a move toward greater justice. \"As Palestine formally becomes a State Party to the Rome'\n                ' Statute today, the world is also a step closer to ending a long era of impunity and injustice,\" he'\n                ' said, according to an ICC news release. \"Indeed, today brings us closer to our shared goals of'\n                ' justice and peace.\" Judge Kuniko Ozaki, a vice president of the ICC, said acceding to the treaty was'\n                ' just the first step for the Palestinians. \"As the Rome Statute today enters into force for the State'\n                \" of Palestine, Palestine acquires all the rights as well as responsibilities that come with being a\"\n                ' State Party to the Statute. These are substantive commitments, which cannot be taken lightly,\" she'\n                ' said. Rights group Human Rights Watch welcomed the development. \"Governments seeking to penalize'\n                \" Palestine for joining the ICC should immediately end their pressure, and countries that support\"\n                \" universal acceptance of the court's treaty should speak out to welcome its membership,\\\" said\"\n                \" Balkees Jarrah, international justice counsel for the group. \\\"What's objectionable is the attempts\"\n                \" to undermine international justice, not Palestine's decision to join a treaty to which over 100\"\n                ' countries around the world are members.\" In January, when the preliminary ICC examination was'\n                \" opened, Israeli Prime Minister Benjamin Netanyahu described it as an outrage, saying the court was\"\n                ' overstepping its boundaries. The United States also said it \"strongly\" disagreed with the court\\'s'\n                ' decision. \"As we have said repeatedly, we do not believe that Palestine is a state and therefore we'\n                ' do not believe that it is eligible to join the ICC,\" the State Department said in a statement. It'\n                ' urged the warring sides to resolve their differences through direct negotiations. \"We will continue'\n                ' to oppose actions against Israel at the ICC as counterproductive to the cause of peace,\" it said.'\n                \" But the ICC begs to differ with the definition of a state for its purposes and refers to the\"\n                ' territories as \"Palestine.\" While a preliminary examination is not a formal investigation, it allows'\n                \" the court to review evidence and determine whether to investigate suspects on both sides. Prosecutor\"\n                ' Fatou Bensouda said her office would \"conduct its analysis in full independence and impartiality.\"'\n                \" The war between Israel and Hamas militants in Gaza last summer left more than 2,000 people dead. The\"\n                \" inquiry will include alleged war crimes committed since June. The International Criminal Court was\"\n                \" set up in 2002 to prosecute genocide, crimes against humanity and war crimes.\",\n                \"The French prosecutor leading an investigation into the crash of Germanwings Flight 9525 insisted\"\n                \" Wednesday that he was not aware of any video footage from on board the plane. Marseille prosecutor\"\n                ' Brice Robin told CNN that \"so far no videos were used in the crash investigation.\" He added, \"A'\n                \" person who has such a video needs to immediately give it to the investigators.\\\" Robin's comments\"\n                \" follow claims by two magazines, German daily Bild and French Paris Match, of a cell phone video\"\n                \" showing the harrowing final seconds from on board Germanwings Flight 9525 as it crashed into the\"\n                \" French Alps. All 150 on board were killed. Paris Match and Bild reported that the video was\"\n                \" recovered from a phone at the wreckage site. The two publications described the supposed video, but\"\n                \" did not post it on their websites. The publications said that they watched the video, which was\"\n                \" found by a source close to the investigation. \\\"One can hear cries of 'My God' in several\"\n                ' languages,\" Paris Match reported. \"Metallic banging can also be heard more than three times, perhaps'\n                \" of the pilot trying to open the cockpit door with a heavy object.  Towards the end, after a heavy\"\n                ' shake, stronger than the others, the screaming intensifies. Then nothing.\" \"It is a very disturbing'\n                \" scene,\\\" said Julian Reichelt, editor-in-chief of Bild online. An official with France's accident\"\n                \" investigation agency, the BEA, said the agency is not aware of any such video. Lt. Col. Jean-Marc\"\n                \" Menichini, a French Gendarmerie spokesman in charge of communications on rescue efforts around the\"\n                ' Germanwings crash site, told CNN that the reports were \"completely wrong\" and \"unwarranted.\" Cell'\n                ' phones have been collected at the site, he said, but that they \"hadn\\'t been exploited yet.\"'\n                \" Menichini said he believed the cell phones would need to be sent to the Criminal Research Institute\"\n                \" in Rosny sous-Bois, near Paris, in order to be analyzed by specialized technicians working\"\n                \" hand-in-hand with investigators. But none of the cell phones found so far have been sent to the\"\n                \" institute, Menichini said. Asked whether staff involved in the search could have leaked a memory\"\n                ' card to the media, Menichini answered with a categorical \"no.\" Reichelt told \"Erin Burnett:'\n                ' Outfront\" that he had watched the video and stood by the report, saying Bild and Paris Match are'\n                ' \"very confident\" that the clip is real. He noted that investigators only revealed they\\'d recovered'\n                ' cell phones from the crash site after Bild and Paris Match published their reports. \"That is'\n                \" something we did not know before. ... Overall we can say many things of the investigation weren't\"\n                ' revealed by the investigation at the beginning,\" he said. What was mental state of Germanwings'\n                \" co-pilot? German airline Lufthansa confirmed Tuesday that co-pilot Andreas Lubitz had battled\"\n                \" depression years before he took the controls of Germanwings Flight 9525, which he's accused of\"\n                \" deliberately crashing last week in the French Alps. Lubitz told his Lufthansa flight training school\"\n                ' in 2009 that he had a \"previous episode of severe depression,\" the airline said Tuesday. Email'\n                \" correspondence between Lubitz and the school discovered in an internal investigation, Lufthansa\"\n                \" said, included medical documents he submitted in connection with resuming his flight training. The\"\n                \" announcement indicates that Lufthansa, the parent company of Germanwings, knew of Lubitz's battle\"\n                \" with depression, allowed him to continue training and ultimately put him in the cockpit. Lufthansa,\"\n                \" whose CEO Carsten Spohr previously said Lubitz was 100% fit to fly, described its statement Tuesday\"\n                ' as a \"swift and seamless clarification\" and said it was sharing the information and documents --'\n                \" including training and medical records -- with public prosecutors. Spohr traveled to the crash site\"\n                \" Wednesday, where recovery teams have been working for the past week to recover human remains and\"\n                \" plane debris scattered across a steep mountainside. He saw the crisis center set up in\"\n                \" Seyne-les-Alpes, laid a wreath in the village of Le Vernet, closer to the crash site, where grieving\"\n                \" families have left flowers at a simple stone memorial. Menichini told CNN late Tuesday that no\"\n                \" visible human remains were left at the site but recovery teams would keep searching. French\"\n                \" President Francois Hollande, speaking Tuesday, said that it should be possible to identify all the\"\n                \" victims using DNA analysis by the end of the week, sooner than authorities had previously suggested.\"\n                \" In the meantime, the recovery of the victims' personal belongings will start Wednesday, Menichini\"\n                \" said. Among those personal belongings could be more cell phones belonging to the 144 passengers and\"\n                \" six crew on board. Check out the latest from our correspondents . The details about Lubitz's\"\n                \" correspondence with the flight school during his training were among several developments as\"\n                \" investigators continued to delve into what caused the crash and Lubitz's possible motive for\"\n                \" downing the jet. A Lufthansa spokesperson told CNN on Tuesday that Lubitz had a valid medical\"\n                ' certificate, had passed all his examinations and \"held all the licenses required.\" Earlier, a'\n                \" spokesman for the prosecutor's office in Dusseldorf, Christoph Kumpa, said medical records reveal\"\n                \" Lubitz suffered from suicidal tendencies at some point before his aviation career and underwent\"\n                \" psychotherapy before he got his pilot's license. Kumpa emphasized there's no evidence suggesting\"\n                \" Lubitz was suicidal or acting aggressively before the crash. Investigators are looking into whether\"\n                \" Lubitz feared his medical condition would cause him to lose his pilot's license, a European\"\n                ' government official briefed on the investigation told CNN on Tuesday. While flying was \"a big part'\n                \" of his life,\\\" the source said, it's only one theory being considered. Another source, a law\"\n                \" enforcement official briefed on the investigation, also told CNN that authorities believe the\"\n                \" primary motive for Lubitz to bring down the plane was that he feared he would not be allowed to fly\"\n                \" because of his medical problems. Lubitz's girlfriend told investigators he had seen an eye doctor\"\n                \" and a neuropsychologist, both of whom deemed him unfit to work recently and concluded he had\"\n                \" psychological issues, the European government official said. But no matter what details emerge about\"\n                \" his previous mental health struggles, there's more to the story, said Brian Russell, a forensic\"\n                ' psychologist. \"Psychology can explain why somebody would turn rage inward on themselves about the'\n                \" fact that maybe they weren't going to keep doing their job and they're upset about that and so\"\n                ' they\\'re suicidal,\" he said. \"But there is no mental illness that explains why somebody then feels'\n                \" entitled to also take that rage and turn it outward on 149 other people who had nothing to do with\"\n                \" the person's problems.\\\" Germanwings crash compensation: What we know . Who was the captain of\"\n                \" Germanwings Flight 9525? CNN's Margot Haddad reported from Marseille and Pamela Brown from\"\n                \" Dusseldorf, while Laura Smith-Spark wrote from London. CNN's Frederik Pleitgen, Pamela Boykoff,\"\n                \" Antonia Mortensen, Sandrine Amiel and Anna-Maja Rappard contributed to this report.\",\n            ],\n            return_tensors=\"pt\",\n            padding=\"longest\",\n            truncation=True,\n        )\n        generated_ids = self.xsum_1_1_model.generate(**batch, num_beams=4)\n        result = self.tok.batch_decode(generated_ids)\n        assert result[0] == (\n            \"</s>\"\n            \" The International Criminal Court (ICC) has announced that it has been announced by the International\"\n            \" Criminal court.\"\n            \"</s><pad><pad><pad><pad><pad>\"\n        )\n        assert result[1] == (\n            \"</s>\"\n            \" An investigation into the crash that killed at least 10 people in the French capital has been\"\n            \" released by the French police investigating the crash.\"\n            \"</s>\"\n        )\n\n    def test_encoder_equiv(self):\n        # test batch\n\n        batch = self.tok(\n            [\n                \"The Palestinian Authority officially became the 123rd member of the International Criminal Court on\"\n                \" Wednesday, a step that gives the court jurisdiction over alleged crimes in Palestinian territories.\"\n                \" The formal accession was marked with a ceremony at The Hague, in the Netherlands, where the court is\"\n                \" based. The Palestinians signed the ICC's founding Rome Statute in January, when they also accepted\"\n                ' its jurisdiction over alleged crimes committed \"in the occupied Palestinian territory, including'\n                ' East Jerusalem, since June 13, 2014.\" Later that month, the ICC opened a preliminary examination'\n                \" into the situation in Palestinian territories, paving the way for possible war crimes investigations\"\n                \" against Israelis. As members of the court, Palestinians may be subject to counter-charges as well.\"\n                \" Israel and the United States, neither of which is an ICC member, opposed the Palestinians' efforts\"\n                \" to join the body. But Palestinian Foreign Minister Riad al-Malki, speaking at Wednesday's ceremony,\"\n                ' said it was a move toward greater justice. \"As Palestine formally becomes a State Party to the Rome'\n                ' Statute today, the world is also a step closer to ending a long era of impunity and injustice,\" he'\n                ' said, according to an ICC news release. \"Indeed, today brings us closer to our shared goals of'\n                ' justice and peace.\" Judge Kuniko Ozaki, a vice president of the ICC, said acceding to the treaty was'\n                ' just the first step for the Palestinians. \"As the Rome Statute today enters into force for the State'\n                \" of Palestine, Palestine acquires all the rights as well as responsibilities that come with being a\"\n                ' State Party to the Statute. These are substantive commitments, which cannot be taken lightly,\" she'\n                ' said. Rights group Human Rights Watch welcomed the development. \"Governments seeking to penalize'\n                \" Palestine for joining the ICC should immediately end their pressure, and countries that support\"\n                \" universal acceptance of the court's treaty should speak out to welcome its membership,\\\" said\"\n                \" Balkees Jarrah, international justice counsel for the group. \\\"What's objectionable is the attempts\"\n                \" to undermine international justice, not Palestine's decision to join a treaty to which over 100\"\n                ' countries around the world are members.\" In January, when the preliminary ICC examination was'\n                \" opened, Israeli Prime Minister Benjamin Netanyahu described it as an outrage, saying the court was\"\n                ' overstepping its boundaries. The United States also said it \"strongly\" disagreed with the court\\'s'\n                ' decision. \"As we have said repeatedly, we do not believe that Palestine is a state and therefore we'\n                ' do not believe that it is eligible to join the ICC,\" the State Department said in a statement. It'\n                ' urged the warring sides to resolve their differences through direct negotiations. \"We will continue'\n                ' to oppose actions against Israel at the ICC as counterproductive to the cause of peace,\" it said.'\n                \" But the ICC begs to differ with the definition of a state for its purposes and refers to the\"\n                ' territories as \"Palestine.\" While a preliminary examination is not a formal investigation, it allows'\n                \" the court to review evidence and determine whether to investigate suspects on both sides. Prosecutor\"\n                ' Fatou Bensouda said her office would \"conduct its analysis in full independence and impartiality.\"'\n                \" The war between Israel and Hamas militants in Gaza last summer left more than 2,000 people dead. The\"\n                \" inquiry will include alleged war crimes committed since June. The International Criminal Court was\"\n                \" set up in 2002 to prosecute genocide, crimes against humanity and war crimes.\",\n                \"The French prosecutor leading an investigation into the crash of Germanwings Flight 9525 insisted\"\n                \" Wednesday that he was not aware of any video footage from on board the plane. Marseille prosecutor\"\n                ' Brice Robin told CNN that \"so far no videos were used in the crash investigation.\" He added, \"A'\n                \" person who has such a video needs to immediately give it to the investigators.\\\" Robin's comments\"\n                \" follow claims by two magazines, German daily Bild and French Paris Match, of a cell phone video\"\n                \" showing the harrowing final seconds from on board Germanwings Flight 9525 as it crashed into the\"\n                \" French Alps. All 150 on board were killed. Paris Match and Bild reported that the video was\"\n                \" recovered from a phone at the wreckage site. The two publications described the supposed video, but\"\n                \" did not post it on their websites. The publications said that they watched the video, which was\"\n                \" found by a source close to the investigation. \\\"One can hear cries of 'My God' in several\"\n                ' languages,\" Paris Match reported. \"Metallic banging can also be heard more than three times, perhaps'\n                \" of the pilot trying to open the cockpit door with a heavy object.  Towards the end, after a heavy\"\n                ' shake, stronger than the others, the screaming intensifies. Then nothing.\" \"It is a very disturbing'\n                \" scene,\\\" said Julian Reichelt, editor-in-chief of Bild online. An official with France's accident\"\n                \" investigation agency, the BEA, said the agency is not aware of any such video. Lt. Col. Jean-Marc\"\n                \" Menichini, a French Gendarmerie spokesman in charge of communications on rescue efforts around the\"\n                ' Germanwings crash site, told CNN that the reports were \"completely wrong\" and \"unwarranted.\" Cell'\n                ' phones have been collected at the site, he said, but that they \"hadn\\'t been exploited yet.\"'\n                \" Menichini said he believed the cell phones would need to be sent to the Criminal Research Institute\"\n                \" in Rosny sous-Bois, near Paris, in order to be analyzed by specialized technicians working\"\n                \" hand-in-hand with investigators. But none of the cell phones found so far have been sent to the\"\n                \" institute, Menichini said. Asked whether staff involved in the search could have leaked a memory\"\n                ' card to the media, Menichini answered with a categorical \"no.\" Reichelt told \"Erin Burnett:'\n                ' Outfront\" that he had watched the video and stood by the report, saying Bild and Paris Match are'\n                ' \"very confident\" that the clip is real. He noted that investigators only revealed they\\'d recovered'\n                ' cell phones from the crash site after Bild and Paris Match published their reports. \"That is'\n                \" something we did not know before. ... Overall we can say many things of the investigation weren't\"\n                ' revealed by the investigation at the beginning,\" he said. What was mental state of Germanwings'\n                \" co-pilot? German airline Lufthansa confirmed Tuesday that co-pilot Andreas Lubitz had battled\"\n                \" depression years before he took the controls of Germanwings Flight 9525, which he's accused of\"\n                \" deliberately crashing last week in the French Alps. Lubitz told his Lufthansa flight training school\"\n                ' in 2009 that he had a \"previous episode of severe depression,\" the airline said Tuesday. Email'\n                \" correspondence between Lubitz and the school discovered in an internal investigation, Lufthansa\"\n                \" said, included medical documents he submitted in connection with resuming his flight training. The\"\n                \" announcement indicates that Lufthansa, the parent company of Germanwings, knew of Lubitz's battle\"\n                \" with depression, allowed him to continue training and ultimately put him in the cockpit. Lufthansa,\"\n                \" whose CEO Carsten Spohr previously said Lubitz was 100% fit to fly, described its statement Tuesday\"\n                ' as a \"swift and seamless clarification\" and said it was sharing the information and documents --'\n                \" including training and medical records -- with public prosecutors. Spohr traveled to the crash site\"\n                \" Wednesday, where recovery teams have been working for the past week to recover human remains and\"\n                \" plane debris scattered across a steep mountainside. He saw the crisis center set up in\"\n                \" Seyne-les-Alpes, laid a wreath in the village of Le Vernet, closer to the crash site, where grieving\"\n                \" families have left flowers at a simple stone memorial. Menichini told CNN late Tuesday that no\"\n                \" visible human remains were left at the site but recovery teams would keep searching. French\"\n                \" President Francois Hollande, speaking Tuesday, said that it should be possible to identify all the\"\n                \" victims using DNA analysis by the end of the week, sooner than authorities had previously suggested.\"\n                \" In the meantime, the recovery of the victims' personal belongings will start Wednesday, Menichini\"\n                \" said. Among those personal belongings could be more cell phones belonging to the 144 passengers and\"\n                \" six crew on board. Check out the latest from our correspondents . The details about Lubitz's\"\n                \" correspondence with the flight school during his training were among several developments as\"\n                \" investigators continued to delve into what caused the crash and Lubitz's possible motive for\"\n                \" downing the jet. A Lufthansa spokesperson told CNN on Tuesday that Lubitz had a valid medical\"\n                ' certificate, had passed all his examinations and \"held all the licenses required.\" Earlier, a'\n                \" spokesman for the prosecutor's office in Dusseldorf, Christoph Kumpa, said medical records reveal\"\n                \" Lubitz suffered from suicidal tendencies at some point before his aviation career and underwent\"\n                \" psychotherapy before he got his pilot's license. Kumpa emphasized there's no evidence suggesting\"\n                \" Lubitz was suicidal or acting aggressively before the crash. Investigators are looking into whether\"\n                \" Lubitz feared his medical condition would cause him to lose his pilot's license, a European\"\n                ' government official briefed on the investigation told CNN on Tuesday. While flying was \"a big part'\n                \" of his life,\\\" the source said, it's only one theory being considered. Another source, a law\"\n                \" enforcement official briefed on the investigation, also told CNN that authorities believe the\"\n                \" primary motive for Lubitz to bring down the plane was that he feared he would not be allowed to fly\"\n                \" because of his medical problems. Lubitz's girlfriend told investigators he had seen an eye doctor\"\n                \" and a neuropsychologist, both of whom deemed him unfit to work recently and concluded he had\"\n                \" psychological issues, the European government official said. But no matter what details emerge about\"\n                \" his previous mental health struggles, there's more to the story, said Brian Russell, a forensic\"\n                ' psychologist. \"Psychology can explain why somebody would turn rage inward on themselves about the'\n                \" fact that maybe they weren't going to keep doing their job and they're upset about that and so\"\n                ' they\\'re suicidal,\" he said. \"But there is no mental illness that explains why somebody then feels'\n                \" entitled to also take that rage and turn it outward on 149 other people who had nothing to do with\"\n                \" the person's problems.\\\" Germanwings crash compensation: What we know . Who was the captain of\"\n                \" Germanwings Flight 9525? CNN's Margot Haddad reported from Marseille and Pamela Brown from\"\n                \" Dusseldorf, while Laura Smith-Spark wrote from London. CNN's Frederik Pleitgen, Pamela Boykoff,\"\n                \" Antonia Mortensen, Sandrine Amiel and Anna-Maja Rappard contributed to this report.\",\n            ],\n            return_tensors=\"pt\",\n            padding=\"longest\",\n            truncation=True,\n        )\n        features = self.xsum_1_1_model.get_encoder()(**batch).last_hidden_state\n        expected = [[-0.0828, -0.0251, -0.0674], [0.1277, 0.3311, -0.0255], [0.2613, -0.0840, -0.2763]]\n        assert_tensors_close(features[0, :3, :3], torch.tensor(expected), atol=1e-3)\n\n\n@require_torch\n@require_sentencepiece\n@require_tokenizers\nclass BartModelIntegrationTests(unittest.TestCase):\n    @cached_property\n    def default_tokenizer(self):\n        return BartTokenizer.from_pretrained(\"facebook/bart-large\")\n\n    @slow\n    def test_inference_no_head(self):\n        model = BartModel.from_pretrained(\"facebook/bart-large\").to(torch_device)\n        input_ids = _long_tensor([[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]])\n        attention_mask = input_ids.ne(model.config.pad_token_id)\n        with torch.no_grad():\n            output = model(input_ids=input_ids, attention_mask=attention_mask).last_hidden_state\n        expected_shape = torch.Size((1, 11, 1024))\n        self.assertEqual(output.shape, expected_shape)\n        expected_slice = torch.tensor(\n            [[[0.7144, 0.8143, -1.2813], [0.7144, 0.8143, -1.2813], [-0.0467, 2.5911, -2.1845]]], device=torch_device\n        )\n        torch.testing.assert_close(output[:, :3, :3], expected_slice, rtol=1e-3, atol=1e-3)\n\n    @slow\n    def test_base_mask_filling(self):\n        pbase = pipeline(task=\"fill-mask\", model=\"facebook/bart-base\")\n        src_text = [\" I went to the <mask>.\"]\n        results = [x[\"token_str\"] for x in pbase(src_text)]\n        assert \" bathroom\" in results\n\n    @slow\n    def test_large_mask_filling(self):\n        plarge = pipeline(task=\"fill-mask\", model=\"facebook/bart-large\")\n        src_text = [\" I went to the <mask>.\"]\n        results = [x[\"token_str\"] for x in plarge(src_text)]\n        expected_results = [\" bathroom\", \" gym\", \" wrong\", \" movies\", \" hospital\"]\n        self.assertListEqual(results, expected_results)\n\n    @slow\n    def test_mnli_inference(self):\n        example_b = [0, 31414, 232, 328, 740, 1140, 69, 46078, 1588, 2, 1]\n        input_ids = _long_tensor([[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2], example_b])\n\n        model = AutoModelForSequenceClassification.from_pretrained(\"facebook/bart-large-mnli\").to(\n            torch_device\n        )  # eval called in from_pre\n        attention_mask = input_ids.ne(model.config.pad_token_id)\n        # Test that model hasn't changed\n        with torch.no_grad():\n            outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n\n        batched_logits = outputs.logits\n        expected_shape = torch.Size((2, 3))\n        self.assertEqual(batched_logits.shape, expected_shape)\n        expected_slice = torch.tensor([[0.1907, 1.4342, -1.0289]], device=torch_device)\n        logits_arr = batched_logits[0].detach()\n\n        # Test that padding does not change results\n        input_ids_no_pad = _long_tensor([example_b[:-1]])\n        attention_mask_no_pad = input_ids_no_pad.ne(model.config.pad_token_id)\n\n        with torch.no_grad():\n            logits2 = model(input_ids=input_ids_no_pad, attention_mask=attention_mask_no_pad).logits.squeeze()\n        assert_tensors_close(batched_logits[1], logits2, atol=1e-3)\n        assert_tensors_close(expected_slice, logits_arr, atol=1e-3)\n\n    @slow\n    def test_xsum_summarization_same_as_fairseq(self):\n        model = BartForConditionalGeneration.from_pretrained(\"facebook/bart-large-xsum\").to(torch_device)\n        tok = self.default_tokenizer\n\n        PGE_ARTICLE = \"\"\" PG&E stated it scheduled the blackouts in response to forecasts for high winds amid dry conditions. The aim is to reduce the risk of wildfires. Nearly 800 thousand customers were scheduled to be affected by the shutoffs which were expected to last through at least midday tomorrow.\"\"\"\n\n        EXPECTED_SUMMARY = (\n            \"</s>\"\n            \"California's largest power company has begun shutting off electricity to thousands of customers in the\"\n            \" state.\"\n            \"</s>\"\n        )\n        dct = tok.batch_encode_plus(\n            [PGE_ARTICLE],\n            max_length=1024,\n            padding=\"max_length\",\n            truncation=True,\n            return_tensors=\"pt\",\n        ).to(torch_device)\n\n        hypotheses_batch = model.generate(\n            input_ids=dct[\"input_ids\"],\n            attention_mask=dct[\"attention_mask\"],\n            num_beams=2,\n            max_length=62,\n            min_length=11,\n            length_penalty=1.0,\n            no_repeat_ngram_size=3,\n            early_stopping=True,\n            decoder_start_token_id=model.config.eos_token_id,\n        )\n\n        decoded = tok.batch_decode(hypotheses_batch)\n        self.assertEqual(EXPECTED_SUMMARY, decoded[0])\n\n    def test_xsum_config_generation_params(self):\n        config = BartConfig.from_pretrained(\"facebook/bart-large-xsum\")\n        expected_params = {\"num_beams\": 6, \"do_sample\": False, \"early_stopping\": True, \"length_penalty\": 1.0}\n        config_params = {k: getattr(config, k, \"MISSING\") for k, v in expected_params.items()}\n        self.assertDictEqual(expected_params, config_params)\n\n    @slow\n    def test_cnn_summarization_same_as_fairseq(self):\n        hf = BartForConditionalGeneration.from_pretrained(\"facebook/bart-large-cnn\").to(torch_device)\n        tok = BartTokenizer.from_pretrained(\"facebook/bart-large\")\n\n        FRANCE_ARTICLE = (  # @noq\n            \" Marseille, France (CNN)The French prosecutor leading an investigation into the crash of Germanwings\"\n            \" Flight 9525 insisted Wednesday that he was not aware of any video footage from on board the plane.\"\n            ' Marseille prosecutor Brice Robin told CNN that \"so far no videos were used in the crash investigation.\"'\n            ' He added, \"A person who has such a video needs to immediately give it to the investigators.\" Robin\\'s'\n            \" comments follow claims by two magazines, German daily Bild and French Paris Match, of a cell phone video\"\n            \" showing the harrowing final seconds from on board Germanwings Flight 9525 as it crashed into the French\"\n            \" Alps. All 150 on board were killed. Paris Match and Bild reported that the video was recovered from a\"\n            \" phone at the wreckage site. The two publications described the supposed video, but did not post it on\"\n            \" their websites. The publications said that they watched the video, which was found by a source close to\"\n            \" the investigation. \\\"One can hear cries of 'My God' in several languages,\\\" Paris Match reported.\"\n            ' \"Metallic banging can also be heard more than three times, perhaps of the pilot trying to open the'\n            \" cockpit door with a heavy object.  Towards the end, after a heavy shake, stronger than the others, the\"\n            ' screaming intensifies. Then nothing.\" \"It is a very disturbing scene,\" said Julian Reichelt,'\n            \" editor-in-chief of Bild online. An official with France's accident investigation agency, the BEA, said\"\n            \" the agency is not aware of any such video. Lt. Col. Jean-Marc Menichini, a French Gendarmerie spokesman\"\n            \" in charge of communications on rescue efforts around the Germanwings crash site, told CNN that the\"\n            ' reports were \"completely wrong\" and \"unwarranted.\" Cell phones have been collected at the site, he said,'\n            ' but that they \"hadn\\'t been exploited yet.\" Menichini said he believed the cell phones would need to be'\n            \" sent to the Criminal Research Institute in Rosny sous-Bois, near Paris, in order to be analyzed by\"\n            \" specialized technicians working hand-in-hand with investigators. But none of the cell phones found so\"\n            \" far have been sent to the institute, Menichini said. Asked whether staff involved in the search could\"\n            ' have leaked a memory card to the media, Menichini answered with a categorical \"no.\" Reichelt told \"Erin'\n            ' Burnett: Outfront\" that he had watched the video and stood by the report, saying Bild and Paris Match'\n            ' are \"very confident\" that the clip is real. He noted that investigators only revealed they\\'d recovered'\n            ' cell phones from the crash site after Bild and Paris Match published their reports. \"That is something'\n            \" we did not know before. ... Overall we can say many things of the investigation weren't revealed by the\"\n            ' investigation at the beginning,\" he said. What was mental state of Germanwings co-pilot? German airline'\n            \" Lufthansa confirmed Tuesday that co-pilot Andreas Lubitz had battled depression years before he took the\"\n            \" controls of Germanwings Flight 9525, which he's accused of deliberately crashing last week in the\"\n            ' French Alps. Lubitz told his Lufthansa flight training school in 2009 that he had a \"previous episode of'\n            ' severe depression,\" the airline said Tuesday. Email correspondence between Lubitz and the school'\n            \" discovered in an internal investigation, Lufthansa said, included medical documents he submitted in\"\n            \" connection with resuming his flight training. The announcement indicates that Lufthansa, the parent\"\n            \" company of Germanwings, knew of Lubitz's battle with depression, allowed him to continue training and\"\n            \" ultimately put him in the cockpit. Lufthansa, whose CEO Carsten Spohr previously said Lubitz was 100%\"\n            ' fit to fly, described its statement Tuesday as a \"swift and seamless clarification\" and said it was'\n            \" sharing the information and documents -- including training and medical records -- with public\"\n            \" prosecutors. Spohr traveled to the crash site Wednesday, where recovery teams have been working for the\"\n            \" past week to recover human remains and plane debris scattered across a steep mountainside. He saw the\"\n            \" crisis center set up in Seyne-les-Alpes, laid a wreath in the village of Le Vernet, closer to the crash\"\n            \" site, where grieving families have left flowers at a simple stone memorial. Menichini told CNN late\"\n            \" Tuesday that no visible human remains were left at the site but recovery teams would keep searching.\"\n            \" French President Francois Hollande, speaking Tuesday, said that it should be possible to identify all\"\n            \" the victims using DNA analysis by the end of the week, sooner than authorities had previously suggested.\"\n            \" In the meantime, the recovery of the victims' personal belongings will start Wednesday, Menichini said.\"\n            \" Among those personal belongings could be more cell phones belonging to the 144 passengers and six crew\"\n            \" on board. Check out the latest from our correspondents . The details about Lubitz's correspondence with\"\n            \" the flight school during his training were among several developments as investigators continued to\"\n            \" delve into what caused the crash and Lubitz's possible motive for downing the jet. A Lufthansa\"\n            \" spokesperson told CNN on Tuesday that Lubitz had a valid medical certificate, had passed all his\"\n            ' examinations and \"held all the licenses required.\" Earlier, a spokesman for the prosecutor\\'s office in'\n            \" Dusseldorf, Christoph Kumpa, said medical records reveal Lubitz suffered from suicidal tendencies at\"\n            \" some point before his aviation career and underwent psychotherapy before he got his pilot's license.\"\n            \" Kumpa emphasized there's no evidence suggesting Lubitz was suicidal or acting aggressively before the\"\n            \" crash. Investigators are looking into whether Lubitz feared his medical condition would cause him to\"\n            \" lose his pilot's license, a European government official briefed on the investigation told CNN on\"\n            ' Tuesday. While flying was \"a big part of his life,\" the source said, it\\'s only one theory being'\n            \" considered. Another source, a law enforcement official briefed on the investigation, also told CNN that\"\n            \" authorities believe the primary motive for Lubitz to bring down the plane was that he feared he would\"\n            \" not be allowed to fly because of his medical problems. Lubitz's girlfriend told investigators he had\"\n            \" seen an eye doctor and a neuropsychologist, both of whom deemed him unfit to work recently and concluded\"\n            \" he had psychological issues, the European government official said. But no matter what details emerge\"\n            \" about his previous mental health struggles, there's more to the story, said Brian Russell, a forensic\"\n            ' psychologist. \"Psychology can explain why somebody would turn rage inward on themselves about the fact'\n            \" that maybe they weren't going to keep doing their job and they're upset about that and so they're\"\n            ' suicidal,\" he said. \"But there is no mental illness that explains why somebody then feels entitled to'\n            \" also take that rage and turn it outward on 149 other people who had nothing to do with the person's\"\n            ' problems.\" Germanwings crash compensation: What we know . Who was the captain of Germanwings Flight'\n            \" 9525? CNN's Margot Haddad reported from Marseille and Pamela Brown from Dusseldorf, while Laura\"\n            \" Smith-Spark wrote from London. CNN's Frederik Pleitgen, Pamela Boykoff, Antonia Mortensen, Sandrine\"\n            \" Amiel and Anna-Maja Rappard contributed to this report.\"\n        )\n\n        SHORTER_ARTICLE = (\n            \" (CNN)The Palestinian Authority officially became the 123rd member of the International Criminal Court on\"\n            \" Wednesday, a step that gives the court jurisdiction over alleged crimes in Palestinian territories. The\"\n            \" formal accession was marked with a ceremony at The Hague, in the Netherlands, where the court is based.\"\n            \" The Palestinians signed the ICC's founding Rome Statute in January, when they also accepted its\"\n            ' jurisdiction over alleged crimes committed \"in the occupied Palestinian territory, including East'\n            ' Jerusalem, since June 13, 2014.\" Later that month, the ICC opened a preliminary examination into the'\n            \" situation in Palestinian territories, paving the way for possible war crimes investigations against\"\n            \" Israelis. As members of the court, Palestinians may be subject to counter-charges as well. Israel and\"\n            \" the United States, neither of which is an ICC member, opposed the Palestinians' efforts to join the\"\n            \" body. But Palestinian Foreign Minister Riad al-Malki, speaking at Wednesday's ceremony, said it was a\"\n            ' move toward greater justice. \"As Palestine formally becomes a State Party to the Rome Statute today, the'\n            ' world is also a step closer to ending a long era of impunity and injustice,\" he said, according to an'\n            ' ICC news release. \"Indeed, today brings us closer to our shared goals of justice and peace.\" Judge'\n            \" Kuniko Ozaki, a vice president of the ICC, said acceding to the treaty was just the first step for the\"\n            ' Palestinians. \"As the Rome Statute today enters into force for the State of Palestine, Palestine'\n            \" acquires all the rights as well as responsibilities that come with being a State Party to the Statute.\"\n            ' These are substantive commitments, which cannot be taken lightly,\" she said. Rights group Human Rights'\n            ' Watch welcomed the development. \"Governments seeking to penalize Palestine for joining the ICC should'\n            \" immediately end their pressure, and countries that support universal acceptance of the court's treaty\"\n            ' should speak out to welcome its membership,\" said Balkees Jarrah, international justice counsel for the'\n            \" group. \\\"What's objectionable is the attempts to undermine international justice, not Palestine's\"\n            ' decision to join a treaty to which over 100 countries around the world are members.\" In January, when'\n            \" the preliminary ICC examination was opened, Israeli Prime Minister Benjamin Netanyahu described it as an\"\n            ' outrage, saying the court was overstepping its boundaries. The United States also said it \"strongly\"'\n            \" disagreed with the court's decision. \\\"As we have said repeatedly, we do not believe that Palestine is a\"\n            ' state and therefore we do not believe that it is eligible to join the ICC,\" the State Department said in'\n            ' a statement. It urged the warring sides to resolve their differences through direct negotiations. \"We'\n            ' will continue to oppose actions against Israel at the ICC as counterproductive to the cause of peace,\"'\n            \" it said. But the ICC begs to differ with the definition of a state for its purposes and refers to the\"\n            ' territories as \"Palestine.\" While a preliminary examination is not a formal investigation, it allows the'\n            \" court to review evidence and determine whether to investigate suspects on both sides. Prosecutor Fatou\"\n            ' Bensouda said her office would \"conduct its analysis in full independence and impartiality.\" The war'\n            \" between Israel and Hamas militants in Gaza last summer left more than 2,000 people dead. The inquiry\"\n            \" will include alleged war crimes committed since June. The International Criminal Court was set up in\"\n            \" 2002 to prosecute genocide, crimes against humanity and war crimes. CNN's Vasco Cotovio, Kareem Khadder\"\n            \" and Faith Karimi contributed to this report.\"\n        )\n\n        # The below article tests that we don't add any hypotheses outside of the top n_beams\n        IRAN_ARTICLE = (\n            \" (CNN)The United States and its negotiating partners reached a very strong framework agreement with Iran\"\n            \" in Lausanne, Switzerland, on Thursday that limits Iran's nuclear program in such a way as to effectively\"\n            \" block it from building a nuclear weapon. Expect pushback anyway, if the recent past is any harbinger.\"\n            \" Just last month, in an attempt to head off such an agreement, House Speaker John Boehner invited Israeli\"\n            \" Prime Minister Benjamin Netanyahu to preemptively blast it before Congress, and 47 senators sent a\"\n            \" letter to the Iranian leadership warning them away from a deal. The debate that has already begun since\"\n            \" the announcement of the new framework will likely result in more heat than light. It will not be helped\"\n            \" by the gathering swirl of dubious assumptions and doubtful assertions. Let us address some of these: .\"\n            \" The most misleading assertion, despite universal rejection by experts, is that the negotiations'\"\n            \" objective at the outset was the total elimination of any nuclear program in Iran. That is the position\"\n            \" of Netanyahu and his acolytes in the U.S. Congress. But that is not and never was the objective. If it\"\n            \" had been, there would have been no Iranian team at the negotiating table. Rather, the objective has\"\n            \" always been to structure an agreement or series of agreements so that Iran could not covertly develop a\"\n            \" nuclear arsenal before the United States and its allies could respond. The new framework has exceeded\"\n            \" expectations in achieving that goal. It would reduce Iran's low-enriched uranium stockpile, cut by\"\n            \" two-thirds its number of installed centrifuges and implement a rigorous inspection regime. Another\"\n            \" dubious assumption of opponents is that the Iranian nuclear program is a covert weapons program. Despite\"\n            \" sharp accusations by some in the United States and its allies, Iran denies having such a program, and\"\n            \" U.S. intelligence contends that Iran has not yet made the decision to build a nuclear weapon. Iran's\"\n            \" continued cooperation with International Atomic Energy Agency inspections is further evidence on this\"\n            \" point, and we'll know even more about Iran's program in the coming months and years because of the deal.\"\n            \" In fact, the inspections provisions that are part of this agreement are designed to protect against any\"\n            \" covert action by the Iranians. What's more, the rhetoric of some members of Congress has implied that\"\n            \" the negotiations have been between only the United States and Iran (i.e., the 47 senators' letter\"\n            \" warning that a deal might be killed by Congress or a future president). This of course is not the case.\"\n            \" The talks were between Iran and the five permanent members of the U.N. Security Council (United States,\"\n            \" United Kingdom, France, China and Russia) plus Germany, dubbed the P5+1. While the United States has\"\n            \" played a leading role in the effort, it negotiated the terms alongside its partners. If the agreement\"\n            \" reached by the P5+1 is rejected by Congress, it could result in an unraveling of the sanctions on Iran\"\n            \" and threaten NATO cohesion in other areas. Another questionable assertion is that this agreement\"\n            \" contains a sunset clause, after which Iran will be free to do as it pleases. Again, this is not the\"\n            \" case. Some of the restrictions on Iran's nuclear activities, such as uranium enrichment, will be eased\"\n            \" or eliminated over time, as long as 15 years. But most importantly, the framework agreement includes\"\n            \" Iran's ratification of the Additional Protocol, which allows IAEA inspectors expanded access to nuclear\"\n            \" sites both declared and nondeclared. This provision will be permanent. It does not sunset. Thus, going\"\n            \" forward, if Iran decides to enrich uranium to weapons-grade levels, monitors will be able to detect such\"\n            \" a move in a matter of days and alert the U.N. Security Council. Many in Congress have said that the\"\n            ' agreement should be a formal treaty requiring the Senate to \"advise and consent.\" But the issue is not'\n            \" suited for a treaty. Treaties impose equivalent obligations on all signatories. For example, the New\"\n            \" START treaty limits Russia and the United States to 1,550 deployed strategic warheads. But any agreement\"\n            \" with Iran will not be so balanced.  The restrictions and obligations in the final framework agreement\"\n            \" will be imposed almost exclusively on Iran. The P5+1 are obligated only to ease and eventually remove\"\n            \" most but not all economic sanctions, which were imposed as leverage to gain this final deal. Finally\"\n            \" some insist that any agreement must address Iranian missile programs, human rights violations or support\"\n            \" for Hamas or Hezbollah.  As important as these issues are, and they must indeed be addressed, they are\"\n            \" unrelated to the most important aim of a nuclear deal: preventing a nuclear Iran.  To include them in\"\n            \" the negotiations would be a poison pill. This agreement should be judged on its merits and on how it\"\n            \" affects the security of our negotiating partners and allies, including Israel. Those judgments should be\"\n            \" fact-based, not based on questionable assertions or dubious assumptions.\"\n        )\n\n        ARTICLE_SUBWAY = (\n            \" New York (CNN)When Liana Barrientos was 23 years old, she got married in Westchester County, New York. A\"\n            \" year later, she got married again in Westchester County, but to a different man and without divorcing\"\n            \" her first husband.  Only 18 days after that marriage, she got hitched yet again. Then, Barrientos\"\n            ' declared \"I do\" five more times, sometimes only within two weeks of each other. In 2010, she married'\n            \" once more, this time in the Bronx. In an application for a marriage license, she stated it was her\"\n            ' \"first and only\" marriage. Barrientos, now 39, is facing two criminal counts of \"offering a false'\n            ' instrument for filing in the first degree,\" referring to her false statements on the 2010 marriage'\n            \" license application, according to court documents. Prosecutors said the marriages were part of an\"\n            \" immigration scam. On Friday, she pleaded not guilty at State Supreme Court in the Bronx, according to\"\n            \" her attorney, Christopher Wright, who declined to comment further. After leaving court, Barrientos was\"\n            \" arrested and charged with theft of service and criminal trespass for allegedly sneaking into the New\"\n            \" York subway through an emergency exit, said Detective Annette Markowski, a police spokeswoman. In total,\"\n            \" Barrientos has been married 10 times, with nine of her marriages occurring between 1999 and 2002.  All\"\n            \" occurred either in Westchester County, Long Island, New Jersey or the Bronx. She is believed to still be\"\n            \" married to four men, and at one time, she was married to eight men at once, prosecutors say. Prosecutors\"\n            \" said the immigration scam involved some of her husbands, who filed for permanent residence status\"\n            \" shortly after the marriages.  Any divorces happened only after such filings were approved. It was\"\n            \" unclear whether any of the men will be prosecuted. The case was referred to the Bronx District\"\n            \" Attorney's Office by Immigration and Customs Enforcement and the Department of Homeland Security's\"\n            ' Investigation Division. Seven of the men are from so-called \"red-flagged\" countries, including Egypt,'\n            \" Turkey, Georgia, Pakistan and Mali. Her eighth husband, Rashid Rajput, was deported in 2006 to his\"\n            \" native Pakistan after an investigation by the Joint Terrorism Task Force. If convicted, Barrientos faces\"\n            \" up to four years in prison.  Her next court appearance is scheduled for May 18.\"\n        )\n\n        dct = tok.batch_encode_plus(\n            [FRANCE_ARTICLE, SHORTER_ARTICLE, IRAN_ARTICLE, ARTICLE_SUBWAY],\n            max_length=1024,\n            padding=\"max_length\",\n            truncation=\"only_first\",\n            return_tensors=\"pt\",\n        )\n\n        self.assertEqual(1024, dct[\"input_ids\"].shape[1])\n        hypotheses_batch = hf.generate(\n            input_ids=dct[\"input_ids\"].to(torch_device),\n            attention_mask=dct[\"attention_mask\"].to(torch_device),\n            num_beams=2,\n        )\n        assert hypotheses_batch[:, 1].eq(0).all().item()\n\n        EXPECTED = [\n            \"</s><s>\"\n            \"A French prosecutor says he is not aware of any video footage from on board the plane. Two German \"\n            \"magazines claim to have found a cell phone video showing the crash. The publications say they watched \"\n            \"the video, which was found by a source close to the investigation. All 150 on board Germanwings Flight \"\n            \"9525 were killed.\"\n            \"</s>\",\n            \"</s><s>\"\n            \"Palestinian Authority becomes 123rd member of the International Criminal Court. The move gives the court \"\n            \"jurisdiction over alleged crimes in Palestinian territories. Israel and the United States opposed the \"\n            \"Palestinians' efforts to join the body. But Palestinian Foreign Minister Riad al-Malki said it was a \"\n            \"move toward greater justice.\"\n            \"</s><pad><pad><pad><pad>\",\n            \"</s><s>\"\n            \"U.S. and its negotiating partners reached a strong framework agreement with Iran. Peter Bergen: The \"\n            \"debate that has already begun will likely result in more heat than light. He says critics have made \"\n            \"dubious assumptions and doubtful assertions. Bergen says the goal was to block Iran from building a \"\n            \"nuclear weapon.\"\n            \"</s><pad><pad><pad>\",\n            \"</s><s>\"\n            \"Liana Barrientos, 39, has been married 10 times, sometimes within two weeks of each other. Prosecutors \"\n            \"say the marriages were part of an immigration scam. She pleaded not guilty at State Supreme Court in the \"\n            \"Bronx on Friday. If convicted, she faces up to four years in prison.\"\n            \"</s><pad><pad><pad><pad><pad>\",\n        ]\n\n        generated_summaries = tok.batch_decode(hypotheses_batch.tolist())\n        assert generated_summaries == EXPECTED\n\n    @slow\n    def test_contrastive_search_bart(self):\n        article = (\n            \" New York (CNN)When Liana Barrientos was 23 years old, she got married in Westchester County, New York. A\"\n            \" year later, she got married again in Westchester County, but to a different man and without divorcing\"\n            \" her first husband.  Only 18 days after that marriage, she got hitched yet again. Then, Barrientos\"\n            ' declared \"I do\" five more times, sometimes only within two weeks of each other. In 2010, she married'\n            \" once more, this time in the Bronx. In an application for a marriage license, she stated it was her\"\n            ' \"first and only\" marriage. Barrientos, now 39, is facing two criminal counts of \"offering a false'\n            ' instrument for filing in the first degree,\" referring to her false statements on the 2010 marriage'\n            \" license application, according to court documents. Prosecutors said the marriages were part of an\"\n            \" immigration scam. On Friday, she pleaded not guilty at State Supreme Court in the Bronx, according to\"\n            \" her attorney, Christopher Wright, who declined to comment further. After leaving court, Barrientos was\"\n            \" arrested and charged with theft of service and criminal trespass for allegedly sneaking into the New\"\n            \" York subway through an emergency exit, said Detective Annette Markowski, a police spokeswoman. In total,\"\n            \" Barrientos has been married 10 times, with nine of her marriages occurring between 1999 and 2002.  All\"\n            \" occurred either in Westchester County, Long Island, New Jersey or the Bronx. She is believed to still be\"\n            \" married to four men, and at one time, she was married to eight men at once, prosecutors say. Prosecutors\"\n            \" said the immigration scam involved some of her husbands, who filed for permanent residence status\"\n            \" shortly after the marriages.  Any divorces happened only after such filings were approved. It was\"\n            \" unclear whether any of the men will be prosecuted. The case was referred to the Bronx District\"\n            \" Attorney's Office by Immigration and Customs Enforcement and the Department of Homeland Security's\"\n            ' Investigation Division. Seven of the men are from so-called \"red-flagged\" countries, including Egypt,'\n            \" Turkey, Georgia, Pakistan and Mali. Her eighth husband, Rashid Rajput, was deported in 2006 to his\"\n            \" native Pakistan after an investigation by the Joint Terrorism Task Force. If convicted, Barrientos faces\"\n            \" up to four years in prison.  Her next court appearance is scheduled for May 18.\"\n        )\n        bart_tokenizer = BartTokenizer.from_pretrained(\"facebook/bart-large-cnn\")\n        bart_model = BartForConditionalGeneration.from_pretrained(\"facebook/bart-large-cnn\").to(torch_device)\n        input_ids = bart_tokenizer(\n            article, add_special_tokens=False, truncation=True, max_length=512, return_tensors=\"pt\"\n        ).input_ids.to(torch_device)\n\n        outputs = bart_model.generate(input_ids, penalty_alpha=0.5, top_k=5, max_length=64, num_beams=1)\n        generated_text = bart_tokenizer.batch_decode(outputs, skip_special_tokens=True)\n\n        self.assertListEqual(\n            generated_text,\n            [\n                \"Liana Barrientos, 39, pleaded not guilty to charges related to false marriage statements. \"\n                \"Prosecutors say she married at least 10 times, sometimes within two weeks of each other. She is \"\n                \"accused of being part of an immigration scam to get permanent residency. If convicted, she faces up \"\n                \"to four years in\"\n            ],\n        )\n\n    @slow\n    def test_decoder_attention_mask(self):\n        model = BartForConditionalGeneration.from_pretrained(\"facebook/bart-large\", forced_bos_token_id=0).to(\n            torch_device\n        )\n        tokenizer = self.default_tokenizer\n        sentence = \"UN Chief Says There Is No <mask> in Syria\"\n        input_ids = tokenizer(sentence, return_tensors=\"pt\").input_ids.to(torch_device)\n        padding_size = 3\n        decoder_input_ids = torch.tensor(\n            [\n                [model.config.decoder_start_token_id]\n                + padding_size * [model.config.pad_token_id]\n                + [model.config.bos_token_id]\n            ],\n            dtype=torch.long,\n            device=torch_device,\n        )\n        decoder_attention_mask = torch.where(decoder_input_ids == model.config.pad_token_id, 0, 1).to(torch_device)\n        generated_ids = model.generate(\n            input_ids=input_ids,\n            use_cache=False,\n            max_new_tokens=20,\n            decoder_input_ids=decoder_input_ids,\n            decoder_attention_mask=decoder_attention_mask,\n        )\n        generated_sentence = tokenizer.batch_decode(generated_ids)[0]\n        expected_sentence = \"</s><pad><pad><pad><s>UN Chief Says There Is No Plan B for Peace in Syria</s>\"\n        self.assertEqual(generated_sentence, expected_sentence)\n\n\nclass BartStandaloneDecoderModelTester:\n    def __init__(\n        self,\n        parent,\n        vocab_size=99,\n        batch_size=13,\n        d_model=16,\n        decoder_seq_length=7,\n        is_training=True,\n        is_decoder=True,\n        use_attention_mask=True,\n        use_cache=False,\n        use_labels=True,\n        decoder_start_token_id=2,\n        decoder_ffn_dim=32,\n        decoder_layers=2,\n        encoder_attention_heads=4,\n        decoder_attention_heads=4,\n        max_position_embeddings=50,\n        is_encoder_decoder=False,\n        pad_token_id=0,\n        bos_token_id=1,\n        eos_token_id=2,\n        scope=None,\n    ):\n        self.parent = parent\n        self.batch_size = batch_size\n        self.decoder_seq_length = decoder_seq_length\n        # For common tests\n        self.seq_length = self.decoder_seq_length\n        self.is_training = is_training\n        self.use_attention_mask = use_attention_mask\n        self.use_labels = use_labels\n\n        self.vocab_size = vocab_size\n        self.d_model = d_model\n        self.hidden_size = d_model\n        self.num_hidden_layers = decoder_layers\n        self.decoder_layers = decoder_layers\n        self.decoder_ffn_dim = decoder_ffn_dim\n        self.encoder_attention_heads = encoder_attention_heads\n        self.decoder_attention_heads = decoder_attention_heads\n        self.num_attention_heads = decoder_attention_heads\n        self.eos_token_id = eos_token_id\n        self.bos_token_id = bos_token_id\n        self.pad_token_id = pad_token_id\n        self.decoder_start_token_id = decoder_start_token_id\n        self.use_cache = use_cache\n        self.max_position_embeddings = max_position_embeddings\n        self.is_encoder_decoder = is_encoder_decoder\n\n        self.scope = None\n        self.decoder_key_length = decoder_seq_length\n        self.base_model_out_len = 2\n        self.decoder_attention_idx = 1\n\n    def prepare_config_and_inputs(self):\n        input_ids = ids_tensor([self.batch_size, self.decoder_seq_length], self.vocab_size)\n\n        attention_mask = None\n        if self.use_attention_mask:\n            attention_mask = ids_tensor([self.batch_size, self.decoder_seq_length], vocab_size=2)\n\n        lm_labels = None\n        if self.use_labels:\n            lm_labels = ids_tensor([self.batch_size, self.decoder_seq_length], self.vocab_size)\n\n        config = BartConfig(\n            vocab_size=self.vocab_size,\n            d_model=self.d_model,\n            encoder_layers=self.decoder_layers,\n            decoder_layers=self.decoder_layers,\n            decoder_ffn_dim=self.decoder_ffn_dim,\n            encoder_attention_heads=self.encoder_attention_heads,\n            decoder_attention_heads=self.decoder_attention_heads,\n            eos_token_id=self.eos_token_id,\n            bos_token_id=self.bos_token_id,\n            use_cache=self.use_cache,\n            pad_token_id=self.pad_token_id,\n            decoder_start_token_id=self.decoder_start_token_id,\n            max_position_embeddings=self.max_position_embeddings,\n            is_encoder_decoder=self.is_encoder_decoder,\n            forced_eos_token_id=None,\n        )\n\n        return (\n            config,\n            input_ids,\n            attention_mask,\n            lm_labels,\n        )\n\n    def prepare_config_and_inputs_for_decoder(self):\n        (\n            config,\n            input_ids,\n            attention_mask,\n            lm_labels,\n        ) = self.prepare_config_and_inputs()\n\n        encoder_hidden_states = floats_tensor([self.batch_size, self.decoder_seq_length, self.hidden_size])\n        encoder_attention_mask = ids_tensor([self.batch_size, self.decoder_seq_length], vocab_size=2)\n\n        return (\n            config,\n            input_ids,\n            attention_mask,\n            encoder_hidden_states,\n            encoder_attention_mask,\n            lm_labels,\n        )\n\n    def create_and_check_decoder_model_past(\n        self,\n        config,\n        input_ids,\n        attention_mask,\n        lm_labels,\n    ):\n        config.use_cache = True\n        model = BartDecoder(config=config).to(torch_device).eval()\n        # first forward pass\n        outputs = model(input_ids, use_cache=True)\n        outputs_use_cache_conf = model(input_ids)\n        outputs_no_past = model(input_ids, use_cache=False)\n\n        self.parent.assertTrue(len(outputs) == len(outputs_use_cache_conf))\n        self.parent.assertTrue(len(outputs) == len(outputs_no_past) + 1)\n\n        past_key_values = outputs[\"past_key_values\"]\n\n        # create hypothetical next token and extent to next_input_ids\n        next_tokens = ids_tensor((self.batch_size, 1), config.vocab_size)\n\n        # append to next input_ids and\n        next_input_ids = torch.cat([input_ids, next_tokens], dim=-1)\n\n        output_from_no_past = model(next_input_ids)[\"last_hidden_state\"]\n        output_from_past = model(next_tokens, past_key_values=past_key_values)[\"last_hidden_state\"]\n\n        # select random slice\n        random_slice_idx = ids_tensor((1,), output_from_past.shape[-1]).item()\n        output_from_no_past_slice = output_from_no_past[:, next_input_ids.shape[-1] - 1, random_slice_idx].detach()\n        output_from_past_slice = output_from_past[:, 0, random_slice_idx].detach()\n\n        # test that outputs are equal for slice\n        assert torch.allclose(output_from_past_slice, output_from_no_past_slice, atol=1e-3)\n\n    def create_and_check_decoder_model_attention_mask_past(\n        self,\n        config,\n        input_ids,\n        attention_mask,\n        lm_labels,\n    ):\n        model = BartDecoder(config=config).to(torch_device).eval()\n\n        # create attention mask\n        attn_mask = torch.ones(input_ids.shape, dtype=torch.long, device=torch_device)\n\n        half_seq_length = input_ids.shape[-1] // 2\n        attn_mask[:, half_seq_length:] = 0\n\n        # first forward pass\n        past_key_values = model(input_ids, attention_mask=attn_mask, use_cache=True)[\"past_key_values\"]\n\n        # create hypothetical next token and extent to next_input_ids\n        next_tokens = ids_tensor((self.batch_size, 1), config.vocab_size)\n\n        # change a random masked slice from input_ids\n        random_seq_idx_to_change = ids_tensor((1,), half_seq_length).item() + 1\n        random_other_next_tokens = ids_tensor((self.batch_size, 1), config.vocab_size).squeeze(-1)\n        input_ids[:, -random_seq_idx_to_change] = random_other_next_tokens\n\n        # append to next input_ids and attn_mask\n        next_input_ids = torch.cat([input_ids, next_tokens], dim=-1)\n        attn_mask = torch.cat(\n            [attn_mask, torch.ones((attn_mask.shape[0], 1), dtype=torch.long, device=torch_device)],\n            dim=1,\n        )\n\n        # get two different outputs\n        output_from_no_past = model(next_input_ids, attention_mask=attn_mask)[\"last_hidden_state\"]\n        output_from_past = model(\n            next_tokens, attention_mask=attn_mask, past_key_values=past_key_values, use_cache=True\n        )[\"last_hidden_state\"]\n\n        # select random slice\n        random_slice_idx = ids_tensor((1,), output_from_past.shape[-1]).item()\n        output_from_no_past_slice = output_from_no_past[:, next_input_ids.shape[-1] - 1, random_slice_idx].detach()\n        output_from_past_slice = output_from_past[:, 0, random_slice_idx].detach()\n\n        # test that outputs are equal for slice\n        assert torch.allclose(output_from_past_slice, output_from_no_past_slice, atol=1e-3)\n\n    def prepare_config_and_inputs_for_common(self):\n        config_and_inputs = self.prepare_config_and_inputs()\n        (\n            config,\n            input_ids,\n            attention_mask,\n            lm_labels,\n        ) = config_and_inputs\n\n        inputs_dict = {\n            \"input_ids\": input_ids,\n            \"attention_mask\": attention_mask,\n        }\n        return config, inputs_dict\n\n\n@require_torch\nclass BartStandaloneDecoderModelTest(ModelTesterMixin, GenerationTesterMixin, unittest.TestCase):\n    all_model_classes = (BartDecoder, BartForCausalLM) if is_torch_available() else ()\n    fx_comptatible = True\n    test_pruning = False\n    is_encoder_decoder = False\n    test_missing_keys = False\n\n    def setUp(\n        self,\n    ):\n        self.model_tester = BartStandaloneDecoderModelTester(self, is_training=False)\n        self.config_tester = ConfigTester(self, config_class=BartConfig)\n\n    def test_config(self):\n        self.config_tester.run_common_tests()\n\n    def test_decoder_model_past(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_decoder_model_past(*config_and_inputs)\n\n    def test_decoder_model_attn_mask_past(self):\n        config_and_inputs = self.model_tester.prepare_config_and_inputs()\n        self.model_tester.create_and_check_decoder_model_attention_mask_past(*config_and_inputs)\n\n    @unittest.skip(reason=\"Decoder cannot keep gradients\")\n    def test_retain_grad_hidden_states_attentions(self):\n        return\n\n    @unittest.skip(reason=\"Decoder cannot keep gradients\")\n    def test_flex_attention_with_grads():\n        return\n"
      ],
      "alert_channels": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/gpt2/test_tokenization_gpt2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/fsmt/test_modeling_fsmt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/llama/test_tokenization_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/check_self_hosted_runner.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/notification_service_doc_tests.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/notification_service.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/process_bad_commit_report.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/de/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/detr.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi300-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/push-important-models.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi250-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-ci-docker-images.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/check_failed_tests.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/ssh-runner.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-docker-images.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi3-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-past-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi325-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/slack-report.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-nightly-caller.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/new_model_pr_merged_notification.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/doctests.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/templates/adding_a_new_model/ADD_NEW_MODEL_PROPOSAL_TEMPLATE.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/templates/adding_a_new_model/open_model_proposals/ADD_BIG_BIRD.md"
      ]
    },
    "rubric": {
      "5": "clear prod alert rules + alert channels configured",
      "4": "rules present with some channels",
      "3": "basic rules only",
      "2": "stubs only",
      "1": "no monitoring config"
    }
  },
  "validation_readiness": {
    "metric_id": "validation_artifacts_readiness_band",
    "evidence": {
      "explainability": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/serialization.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/pipeline_tutorial.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/perf_hardware.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/add_new_pipeline.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ar/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/fr/tasks_explained.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/fr/tutoriel_pipeline.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/serialization.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/tasks_explained.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/glossary.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/torchscript.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/task_summary.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/pipeline_tutorial.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/tasks/image_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/megatron-bert.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/megatron_gpt2.md"
      ],
      "bias": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/deepspeed/test_deepspeed.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/utils/test_modeling_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/utils/test_add_new_model_like.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/sew_d/test_modeling_sew_d.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/table_transformer/test_modeling_table_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/bark/test_modeling_bark.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/bigbird_pegasus/test_modeling_bigbird_pegasus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/flava/test_modeling_flava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/vits/test_modeling_vits.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/speech_to_text/test_modeling_speech_to_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/swin/test_modeling_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/wavlm/test_modeling_wavlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/bit/test_modeling_bit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/deberta/test_modeling_deberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/pix2struct/test_modeling_pix2struct.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/conditional_detr/test_modeling_conditional_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/donut/test_modeling_donut_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/sam/test_modeling_sam.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/maskformer/test_modeling_maskformer_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/cpmant/test_modeling_cpmant.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/eomt/test_modeling_eomt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/big_bird/test_modeling_big_bird.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/rt_detr/test_modeling_rt_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/dab_detr/test_modeling_dab_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/zamba2/test_modeling_zamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/hubert/test_modeling_hubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/sam_hq/test_modeling_sam_hq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/sew/test_modeling_sew.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/oneformer/test_modeling_oneformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/falcon_mamba/test_modeling_falcon_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/focalnet/test_modeling_focalnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/resnet/test_modeling_resnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/mask2former/test_modeling_mask2former.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/grounding_dino/test_modeling_grounding_dino.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/data2vec/test_modeling_data2vec_audio.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/dinat/test_modeling_dinat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/zamba/test_modeling_zamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/mamba/test_modeling_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/seamless_m4t/test_modeling_seamless_m4t.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/unispeech_sat/test_modeling_unispeech_sat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/wav2vec2/test_modeling_wav2vec2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/fastspeech2_conformer/test_modeling_fastspeech2_conformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/moonshine/test_modeling_moonshine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/mamba2/test_modeling_mamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/deformable_detr/test_modeling_deformable_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/d_fine/test_modeling_d_fine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/encoder_decoder/test_modeling_encoder_decoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/mistral3/test_processing_mistral3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/wav2vec2_conformer/test_modeling_wav2vec2_conformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/owlvit/test_modeling_owlvit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/idefics3/test_modeling_idefics3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/vivit/test_modeling_vivit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/smolvlm/test_modeling_smolvlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/unispeech/test_modeling_unispeech.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/idefics2/test_modeling_idefics2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/glm4v_moe/test_modeling_glm4v_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/deberta_v2/test_modeling_deberta_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/speecht5/test_modeling_speecht5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/mm_grounding_dino/test_modeling_mm_grounding_dino.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/swinv2/test_modeling_swinv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/regnet/test_modeling_regnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/wav2vec2_bert/test_modeling_wav2vec2_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/seamless_m4t_v2/test_modeling_seamless_m4t_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/xlnet/test_modeling_xlnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/detr/test_modeling_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/hgnet_v2/test_modeling_hgnet_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/ibert/test_modeling_ibert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/glm4v/test_modeling_glm4v.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/textnet/test_modeling_textnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/gpt_bigcode/test_modeling_gpt_bigcode.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/funnel/test_modeling_funnel.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/rt_detr_v2/test_modeling_rt_detr_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/gpt_neox_japanese/test_modeling_gpt_neox_japanese.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/owlv2/test_modeling_owlv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/whisper/test_modeling_whisper.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/swin2sr/test_modeling_swin2sr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/quantization/bitnet_integration/test_bitnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/quantization/hqq/test_hqq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/quantization/bnb/test_mixed_int8.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/quantization/bnb/test_4bit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/repo_utils/test_check_copies.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/trainer/test_trainer_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/trainer/test_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/generation/test_configuration_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/generation/test_logits_process.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/check_config_attributes.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/tf_ops/onnx.json",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ms/index.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/index.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/big_models.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/perf_train_gpu_one.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/peft.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/tasks/video_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/model_doc/beit.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/internal/generation_utils.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/model_sharing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/migration.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/big_models.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/debugging.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/pt/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/big_models.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/debugging.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/peft.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/internal/generation_utils.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ar/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ar/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ar/how_to_hack_models.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ar/peft.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/de/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/de/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/de/peft.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/how_to_hack_models.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/model_memory_anatomy.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/debugging.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/perf_infer_gpu_multi.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/peft.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/tasks/video_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/model_doc/swinv2.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/internal/generation_utils.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/fr/index.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/debugging.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_sharing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/community.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/training.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/how_to_hack_models.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/hpo_train.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/modular_transformers.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/add_new_model.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_memory_anatomy.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/debugging.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/perf_infer_gpu_multi.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/generation_features.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/tasks/video_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/myt5.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/pvt_v2.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/layoutlmv2.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/mms.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/olmo.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/convnext.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/seamless_m4t.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/wavlm.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/mega.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/hiera.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/umt5.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/eomt.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/beit.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/seamless_m4t_v2.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/olmo2.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/swinv2.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/wav2vec2-bert.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/ijepa.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/gpt_neox_japanese.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/bitnet.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/stablelm.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/levit.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/mobilevit.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/longt5.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/internal/generation_utils.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/quantization/contribute.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/quantization/compressed_tensors.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/legacy/run_openai_gpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/legacy/run_swag.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/legacy/question-answering/run_squad.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/legacy/seq2seq/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/legacy/seq2seq/seq2seq_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/legacy/pytorch-lightning/lightning_base.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/quantization/custom_quantization_int8_example.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/question-answering/run_qa.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/summarization/run_summarization_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/text-classification/run_flax_glue.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/language-modeling/run_mlm_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/language-modeling/run_clm_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/language-modeling/run_t5_mlm_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/language-modeling/run_bart_dlm_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/token-classification/run_flax_ner.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/speech-recognition/run_flax_speech_recognition_seq2seq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/image-captioning/run_image_captioning_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_dummy_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/configuration_my_new_model2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_super.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/configuration_new_model.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_test_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modular_new_model.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_multimodal2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_my_new_model2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_global_indexing.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/configuration_duplicated_method.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/configuration_my_new_model.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_new_task_model.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modeling_switch_function.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/modular-transformers/modular_my_new_model.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling/run_clm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling/run_mlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/3d_parallel_checks.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_qa_beam_search_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_qa_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/translation/run_translation_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/semantic-segmentation/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/summarization/run_summarization_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-pretraining/run_mim_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/text-classification/run_glue_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-classification/run_image_classification_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_fim_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_mlm_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_clm_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/token-classification/run_ner_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/object-detection/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/speech-pretraining/run_wav2vec2_pretraining_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/instance-segmentation/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/multiple-choice/run_swag_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/templates/adding_a_new_example_script/{{cookiecutter.directory_name}}/run_{{cookiecutter.example_shortcut}}.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/templates/adding_a_new_model/ADD_NEW_MODEL_PROPOSAL_TEMPLATE.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/templates/adding_a_new_model/open_model_proposals/ADD_BIG_BIRD.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/optimization_tf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/pytorch_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_flax_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_flax_pytorch_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/__init__.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/training_args.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_gguf_pytorch_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_attn_mask_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_tf_pytorch_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/tf_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_layers.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/modeling_tf_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/kernels/falcon_mamba/selective_scan_with_ln_interface.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_fbgemm_fp8.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_bnb_4bit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_quark.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_quanto.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_mxfp4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_eetq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_fp_quant.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_finegrained_fp8.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_hqq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/quantizers/quantizer_higgs.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/utils/dummy_pt_objects.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/utils/quantization_config.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dots1/configuration_dots1.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dots1/modeling_dots1.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nllb_moe/convert_nllb_moe_sharded_original_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nllb_moe/configuration_nllb_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nllb_moe/modeling_nllb_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew_d/modeling_sew_d.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew_d/convert_sew_d_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew_d/configuration_sew_d.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/table_transformer/modeling_table_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/table_transformer/convert_table_transformer_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/table_transformer/convert_table_transformer_to_hf_no_timm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bark/configuration_bark.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bark/convert_suno_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bark/modeling_bark.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convnextv2/modeling_tf_convnextv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convnextv2/modeling_convnextv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convnextv2/convert_convnextv2_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama4/configuration_llama4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama4/modeling_llama4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama4/convert_llama4_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitpose/convert_vitpose_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitpose/modeling_vitpose.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitpose/image_processing_vitpose.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mlcd/modeling_mlcd.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mlcd/modular_mlcd.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mlcd/convert_mlcd_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pixtral/convert_pixtral_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pixtral/modeling_pixtral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glpn/convert_glpn_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glpn/modeling_glpn.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bigbird_pegasus/configuration_bigbird_pegasus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bigbird_pegasus/convert_bigbird_pegasus_tf_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bigbird_pegasus/modeling_bigbird_pegasus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/biogpt/modeling_biogpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/biogpt/modular_biogpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/visual_bert/convert_visual_bert_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/visual_bert/modeling_visual_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/video_llava/modeling_video_llava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/video_llava/configuration_video_llava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere/modular_cohere.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere/modeling_cohere.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere/configuration_cohere.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/udop/configuration_udop.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/udop/modeling_udop.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/udop/convert_udop_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip_2/convert_blip_2_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip_2/configuration_blip_2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip_2/modeling_blip_2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/flava/modeling_flava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/flava/convert_dalle_to_flava_codebook.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/flava/configuration_flava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/albert/modeling_albert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/albert/modeling_flax_albert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/albert/modeling_tf_albert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere2_vision/modular_cohere2_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere2_vision/modeling_cohere2_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/videomae/convert_videomae_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/videomae/modeling_videomae.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/videomae/configuration_videomae.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/starcoder2/configuration_starcoder2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/starcoder2/modeling_starcoder2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/starcoder2/modular_starcoder2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_oss/modeling_gpt_oss.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_oss/configuration_gpt_oss.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_oss/modular_gpt_oss.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_oss/convert_gpt_oss_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vits/configuration_vits.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vits/convert_original_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vits/modeling_vits.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmoe/modeling_olmoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmoe/configuration_olmoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speech_to_text/modeling_speech_to_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speech_to_text/modeling_tf_speech_to_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speech_to_text/convert_s2t_fairseq_to_tfms.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma/modular_gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma/configuration_gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma/modeling_flax_gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma/modeling_gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aimv2/modular_aimv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aimv2/configuration_aimv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aimv2/modeling_aimv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/time_series_transformer/modeling_time_series_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mllama/convert_mllama_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mllama/modeling_mllama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/omdet_turbo/convert_omdet_turbo_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/omdet_turbo/modeling_omdet_turbo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clvp/modeling_clvp.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clvp/convert_clvp_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clvp/configuration_clvp.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/m2m_100/modeling_m2m_100.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/m2m_100/convert_m2m100_original_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmo2/modeling_olmo2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmo2/configuration_olmo2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmo2/modular_olmo2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/superglue/convert_superglue_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/superglue/modeling_superglue.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/emu3/configuration_emu3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/emu3/modular_emu3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/emu3/modeling_emu3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/got_ocr2/modeling_got_ocr2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/got_ocr2/modular_got_ocr2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/got_ocr2/configuration_got_ocr2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/diffllama/modeling_diffllama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/diffllama/configuration_diffllama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/diffllama/modular_diffllama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/squeezebert/modeling_squeezebert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin/modeling_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin/convert_swin_simmim_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin/configuration_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin/modeling_tf_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin/convert_swin_timm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilenet_v1/modeling_mobilenet_v1.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convnext/modeling_tf_convnext.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convnext/modeling_convnext.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/arcee/modeling_arcee.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/arcee/modular_arcee.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/arcee/configuration_arcee.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_neox/configuration_gpt_neox.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_neox/modeling_gpt_neox.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_neox/modular_gpt_neox.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/poolformer/modeling_poolformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/poolformer/convert_poolformer_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mimi/configuration_mimi.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mimi/modeling_mimi.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wavlm/convert_wavlm_original_s3prl_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wavlm/modular_wavlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wavlm/configuration_wavlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wavlm/convert_wavlm_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wavlm/modeling_wavlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/modeling_marian.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/convert_marian_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/modeling_flax_marian.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/modeling_tf_marian.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vilt/configuration_vilt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vilt/convert_vilt_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vilt/modeling_vilt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/electra/modeling_flax_electra.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/electra/modeling_tf_electra.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/electra/modeling_electra.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/exaone4/modeling_exaone4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/exaone4/modular_exaone4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/evolla/modular_evolla.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/evolla/configuration_evolla.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/evolla/modeling_evolla.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/perception_lm/convert_perception_lm_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/perception_lm/modular_perception_lm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/perception_lm/modeling_perception_lm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bit/modeling_bit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/luke/convert_luke_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/luke/modeling_luke.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deberta/modeling_deberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deberta/configuration_deberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deberta/modeling_tf_deberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granite/modeling_granite.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granite/configuration_granite.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma2/modeling_gemma2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma2/configuration_gemma2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma2/modular_gemma2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mixtral/modeling_mixtral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mixtral/modular_mixtral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pix2struct/convert_pix2struct_original_pytorch_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pix2struct/modeling_pix2struct.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/conditional_detr/modeling_conditional_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/conditional_detr/convert_conditional_detr_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vision_text_dual_encoder/modeling_tf_vision_text_dual_encoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vision_text_dual_encoder/modeling_flax_vision_text_dual_encoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vision_text_dual_encoder/modeling_vision_text_dual_encoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mvp/modeling_mvp.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/timesfm/convert_timesfm_orignal_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pvt_v2/convert_pvt_v2_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pvt_v2/configuration_pvt_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pvt_v2/modeling_pvt_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/donut/convert_donut_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/donut/configuration_donut_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/donut/modeling_donut_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sam/modeling_sam.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sam/modeling_tf_sam.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sam/configuration_sam.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mpt/modeling_mpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mpt/configuration_mpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/shieldgemma2/convert_shieldgemma2_weights_orbax_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/maskformer/modeling_maskformer_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/maskformer/convert_maskformer_resnet_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/maskformer/convert_maskformer_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/maskformer/configuration_maskformer_swin.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/maskformer/modeling_maskformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/maskformer/convert_maskformer_swin_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_vl_hybrid/modeling_deepseek_vl_hybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_vl_hybrid/convert_deepseek_vl_hybrid_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_vl_hybrid/modular_deepseek_vl_hybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/markuplm/modeling_markuplm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cpmant/configuration_cpmant.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cpmant/modeling_cpmant.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/led/modeling_tf_led.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/led/modeling_led.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vjepa2/convert_vjepa2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vjepa2/modeling_vjepa2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vjepa2/configuration_vjepa2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmo/configuration_olmo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmo/modeling_olmo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmo/modular_olmo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/chameleon/modeling_chameleon.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/chameleon/convert_chameleon_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/chameleon/configuration_chameleon.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/longt5/convert_longt5x_checkpoint_to_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/longt5/modeling_longt5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/longt5/modeling_flax_longt5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi3/modular_phi3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi3/modeling_phi3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3/modeling_gemma3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3/configuration_gemma3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3/convert_gemma3_weights_orbax_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3/modular_gemma3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/colqwen2/modeling_colqwen2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/eomt/modular_eomt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/eomt/modeling_eomt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/esm/modeling_tf_esm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/esm/convert_esm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/esm/modeling_esm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/esm/modeling_esmfold.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/univnet/configuration_univnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/univnet/convert_univnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/univnet/modeling_univnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4/configuration_glm4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4/convert_glm4_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4/modeling_glm4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/big_bird/configuration_big_bird.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/big_bird/modeling_flax_big_bird.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/big_bird/modeling_big_bird.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert_generation/modeling_bert_generation.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_msn/convert_msn_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_msn/configuration_vit_msn.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_msn/modeling_vit_msn.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr/modeling_rt_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr/modeling_rt_detr_resnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr/convert_rt_detr_original_pytorch_checkpoint_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr/configuration_rt_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dab_detr/convert_dab_detr_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dab_detr/configuration_dab_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dab_detr/modeling_dab_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zamba2/configuration_zamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zamba2/modeling_zamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zamba2/modular_zamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/jetmoe/modeling_jetmoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lxmert/modeling_lxmert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lxmert/modeling_tf_lxmert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clip/modeling_tf_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clip/modeling_flax_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clip/convert_clip_original_pytorch_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clip/modeling_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2/modular_qwen2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2/modeling_qwen2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ctrl/modeling_ctrl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ctrl/modeling_tf_ctrl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/convert_distilhubert_original_s3prl_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/modeling_tf_hubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/modular_hubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/convert_hubert_original_s3prl_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/configuration_hubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/convert_hubert_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hubert/modeling_hubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sam_hq/convert_samhq_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sam_hq/modeling_sam_hq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sam_hq/configuration_sam_hq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/groupvit/modeling_groupvit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/groupvit/modeling_tf_groupvit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/groupvit/convert_groupvit_nvlab_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoe/modeling_granitemoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoe/configuration_granitemoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pvt/configuration_pvt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pvt/convert_pvt_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pvt/modeling_pvt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/helium/modular_helium.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/helium/configuration_helium.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/helium/modeling_helium.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mluke/convert_mluke_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/superpoint/modeling_superpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/superpoint/convert_superpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/reformer/modeling_reformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/reformer/convert_reformer_trax_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5gemma/configuration_t5gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5gemma/modular_t5gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5gemma/modeling_t5gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew/configuration_sew.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew/modular_sew.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew/convert_sew_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/sew/modeling_sew.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/oneformer/convert_to_hf_oneformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/oneformer/modeling_oneformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_next_video/configuration_llava_next_video.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_next_video/modular_llava_next_video.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_next_video/modeling_llava_next_video.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_mamba/modular_falcon_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_mamba/configuration_falcon_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_mamba/modeling_falcon_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/focalnet/convert_focalnet_to_hf_format.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/focalnet/modeling_focalnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/resnet/modeling_tf_resnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/resnet/modeling_flax_resnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/resnet/modeling_resnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mask2former/modeling_mask2former.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mask2former/convert_mask2former_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/grounding_dino/modeling_grounding_dino.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/grounding_dino/convert_grounding_dino_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lfm2/configuration_lfm2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lfm2/modular_lfm2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lfm2/modeling_lfm2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/tapas/modeling_tapas.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/tapas/modeling_tf_tapas.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen3/configuration_qwen3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen3/modeling_qwen3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/convert_data2vec_audio_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/modeling_data2vec_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/modeling_tf_data2vec_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/convert_data2vec_vision_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/modular_data2vec_audio.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/configuration_data2vec_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/modeling_data2vec_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/configuration_data2vec_audio.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/modeling_data2vec_audio.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/data2vec/convert_data2vec_text_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinat/modeling_dinat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinat/configuration_dinat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zamba/configuration_zamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zamba/modeling_zamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mamba/modeling_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mamba/configuration_mamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/stablelm/configuration_stablelm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/stablelm/modeling_stablelm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speech_encoder_decoder/convert_speech_to_text_wav2vec2_seq2seq_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speech_encoder_decoder/convert_mbart_wav2vec2_seq2seq_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zoedepth/convert_zoedepth_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zoedepth/configuration_zoedepth.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/zoedepth/modeling_zoedepth.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seamless_m4t/modeling_seamless_m4t.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seamless_m4t/convert_fairseq2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/umt5/convert_umt5_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/umt5/modeling_umt5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere2/modeling_cohere2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere2/modular_cohere2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cohere2/configuration_cohere2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pegasus_x/modeling_pegasus_x.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlmv2/modeling_layoutlmv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlmv2/configuration_layoutlmv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoehybrid/configuration_granitemoehybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoehybrid/modular_granitemoehybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoehybrid/modeling_granitemoehybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech_sat/configuration_unispeech_sat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech_sat/modular_unispeech_sat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech_sat/modeling_unispeech_sat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech_sat/convert_unispeech_sat_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech_sat/convert_unispeech_original_s3prl_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5/modeling_flax_t5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5/convert_t5x_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5/modeling_t5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5/convert_t5x_checkpoint_to_flax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5/modeling_tf_t5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granite_speech/modeling_granite_speech.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpr/modeling_dpr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/recurrent_gemma/configuration_recurrent_gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/recurrent_gemma/modeling_recurrent_gemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/recurrent_gemma/convert_recurrent_gemma_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/minimax/modular_minimax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/minimax/modeling_minimax.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rwkv/modeling_rwkv.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/jamba/configuration_jamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/jamba/modeling_jamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlmv3/modeling_tf_layoutlmv3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlmv3/modeling_layoutlmv3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlmv3/configuration_layoutlmv3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bloom/modeling_flax_bloom.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bloom/configuration_bloom.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bloom/convert_bloom_original_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bloom/modeling_bloom.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phimoe/modeling_phimoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phimoe/configuration_phimoe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm_roberta/modeling_xlm_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm_roberta/modeling_tf_xlm_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm_roberta/modeling_flax_xlm_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clipseg/convert_clipseg_original_pytorch_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clipseg/modeling_clipseg.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/code_llama/tokenization_code_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/code_llama/tokenization_code_llama_fast.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/efficientnet/modeling_efficientnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/efficientnet/convert_efficientnet_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mgp_str/configuration_mgp_str.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mgp_str/modeling_mgp_str.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilebert/modeling_tf_mobilebert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilebert/modeling_mobilebert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/informer/modeling_informer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/informer/modular_informer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/kosmos2/modeling_kosmos2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip/modeling_tf_blip_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip/modeling_tf_blip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip/modeling_blip_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blip/modeling_blip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilevitv2/modeling_mobilevitv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/modernbert/configuration_modernbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/modernbert/modeling_modernbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/modernbert/modular_modernbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/codegen/modeling_codegen.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deit/convert_deit_timm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deit/modeling_deit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deit/configuration_deit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/configuration_dpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/convert_dpt_beit_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/convert_dpt_hybrid_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/convert_dpt_swinv2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/convert_dinov2_depth_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/modeling_dpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dpt/convert_dpt_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2/modeling_tf_wav2vec2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2/convert_wav2vec2_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2/convert_wav2vec2_original_s3prl_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2/modeling_wav2vec2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2/modeling_flax_wav2vec2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2/configuration_wav2vec2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/voxtral/convert_voxtral_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/voxtral/modeling_voxtral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/voxtral/modular_voxtral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fastspeech2_conformer/convert_fastspeech2_conformer_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fastspeech2_conformer/convert_hifigan.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/siglip/modeling_siglip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/siglip/convert_siglip_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/moonshine/convert_usefulsensors_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/moonshine/modeling_moonshine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/moonshine/configuration_moonshine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/moonshine/modular_moonshine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/colpali/modeling_colpali.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pegasus/modeling_flax_pegasus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pegasus/convert_pegasus_tf_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pegasus/modeling_tf_pegasus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pegasus/modeling_pegasus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_5_vl/modeling_qwen2_5_vl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_5_vl/modular_qwen2_5_vl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bart/modeling_bart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bart/modeling_tf_bart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bart/modeling_flax_bart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bart/convert_bart_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/doge/modular_doge.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/doge/modeling_doge.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/doge/configuration_doge.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/doge/convert_doge_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_vl/convert_deepseek_vl_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_vl/modeling_deepseek_vl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_vl/modular_deepseek_vl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/yoso/modeling_yoso.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/yoso/convert_yoso_pytorch_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/timm_wrapper/modeling_timm_wrapper.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_v2/modeling_deepseek_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_v2/modular_deepseek_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_v2/configuration_deepseek_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/janus/modeling_janus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/janus/configuration_janus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/janus/modular_janus.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mamba2/configuration_mamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mamba2/modeling_mamba2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/switch_transformers/configuration_switch_transformers.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/switch_transformers/modeling_switch_transformers.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/switch_transformers/convert_switch_transformers_original_flax_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/autoformer/modeling_autoformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/camembert/modeling_tf_camembert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/camembert/modeling_camembert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3n/modular_gemma3n.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3n/configuration_gemma3n.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3n/modeling_gemma3n.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gemma3n/convert_gemma3n_weights.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roformer/modeling_roformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roformer/modeling_flax_roformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roformer/modeling_tf_roformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/timesformer/modeling_timesformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/timesformer/convert_timesformer_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/timesformer/configuration_timesformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deformable_detr/modeling_deformable_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deformable_detr/convert_deformable_detr_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/depth_pro/convert_depth_pro_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/depth_pro/configuration_depth_pro.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/depth_pro/modeling_depth_pro.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/align/convert_align_tf_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/align/modeling_align.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/modernbert_decoder/configuration_modernbert_decoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/modernbert_decoder/modeling_modernbert_decoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/modernbert_decoder/modular_modernbert_decoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/d_fine/modular_d_fine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/d_fine/configuration_d_fine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/d_fine/modeling_d_fine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/d_fine/convert_d_fine_original_pytorch_checkpoint_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit/modeling_vit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit/convert_vit_timm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit/convert_dino_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit/modeling_flax_vit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit/modeling_tf_vit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit/configuration_vit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/segformer/modeling_segformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/segformer/modeling_tf_segformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/segformer/convert_segformer_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_neo/modeling_gpt_neo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_neo/modeling_flax_gpt_neo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitmatte/convert_vitmatte_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitmatte/modeling_vitmatte.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/paligemma/convert_paligemma2_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/paligemma/modeling_paligemma.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/paligemma/convert_paligemma_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dbrx/modeling_dbrx.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/encoder_decoder/modeling_encoder_decoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm/modeling_tf_xlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm/modeling_xlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert/modeling_tf_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert/modeling_flax_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert/convert_bert_original_tf2_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert/convert_bert_pytorch_checkpoint_to_original_tf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert/modeling_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bert/convert_bert_token_dropping_original_tf2_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlstm/configuration_xlstm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlstm/modeling_xlstm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral3/modular_mistral3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral3/modeling_mistral3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral3/convert_mistral3_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral3/configuration_mistral3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/musicgen/modeling_musicgen.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/plbart/modeling_plbart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/plbart/modular_plbart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/plbart/convert_plbart_original_checkpoint_to_torch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_v3/modeling_deepseek_v3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_v3/modular_deepseek_v3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deepseek_v3/configuration_deepseek_v3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_conformer/modular_wav2vec2_conformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_conformer/modeling_wav2vec2_conformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_conformer/convert_wav2vec2_conformer_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_conformer/configuration_wav2vec2_conformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aria/modular_aria.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aria/modeling_aria.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aria/configuration_aria.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aria/convert_aria_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/owlvit/convert_owlvit_original_flax_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/owlvit/modeling_owlvit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vipllava/modeling_vipllava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vipllava/modular_vipllava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie4_5_moe/modeling_ernie4_5_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie4_5_moe/configuration_ernie4_5_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie4_5_moe/modular_ernie4_5_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ijepa/modeling_ijepa.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ijepa/configuration_ijepa.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ijepa/modular_ijepa.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ijepa/convert_ijepa_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics3/modeling_idefics3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/patchtst/configuration_patchtst.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/patchtst/modeling_patchtst.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot/modeling_blenderbot.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot/modeling_tf_blenderbot.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot/convert_blenderbot_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot/modeling_flax_blenderbot.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/musicgen_melody/modeling_musicgen_melody.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clap/modeling_clap.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/clap/configuration_clap.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilevit/modeling_mobilevit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilevit/modeling_tf_mobilevit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilevit/configuration_mobilevit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilevit/convert_mlcvnets_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics/vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics/modeling_idefics.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics/perceiver.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics/vision_tf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics/perceiver_tf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics/modeling_tf_idefics.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convbert/modeling_tf_convbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/convbert/modeling_convbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/moshi/modeling_moshi.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hiera/convert_hiera_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hiera/configuration_hiera.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hiera/modeling_hiera.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vision_encoder_decoder/modeling_vision_encoder_decoder.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/chinese_clip/modeling_chinese_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/chinese_clip/convert_chinese_clip_original_pytorch_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vivit/configuration_vivit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vivit/modeling_vivit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vivit/convert_vivit_flax_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/csm/modular_csm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/csm/configuration_csm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/csm/modeling_csm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/megatron_gpt2/checkpoint_reshaping_and_interoperability.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/megatron_gpt2/convert_megatron_gpt2_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/upernet/convert_swin_upernet_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/upernet/convert_convnext_upernet_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/upernet/modeling_upernet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/trocr/convert_trocr_unilm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/trocr/modeling_trocr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/efficientloftr/modeling_efficientloftr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/efficientloftr/configuration_efficientloftr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/smolvlm/modeling_smolvlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/smolvlm/modular_smolvlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech/convert_unispeech_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech/configuration_unispeech.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech/modular_unispeech.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/unispeech/modeling_unispeech.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/idefics2/modeling_idefics2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm_roberta_xl/convert_xlm_roberta_xl_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlm_roberta_xl/modeling_xlm_roberta_xl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_next/modeling_llava_next.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_next/configuration_llava_next.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/altclip/modeling_altclip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/imagegpt/modeling_imagegpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dia/modular_dia.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dia/modeling_dia.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/splinter/modeling_splinter.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/longformer/modeling_longformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/longformer/modeling_tf_longformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dit/convert_dit_unilm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/yolos/modeling_yolos.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/yolos/convert_yolos_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/yolos/configuration_yolos.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/opt/configuration_opt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/opt/modeling_tf_opt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/opt/modeling_flax_opt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/opt/convert_opt_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/opt/modeling_opt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nystromformer/convert_nystromformer_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nystromformer/modeling_nystromformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/decision_transformer/modeling_decision_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/beit/modeling_beit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/beit/convert_beit_unilm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/beit/modeling_flax_beit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/beit/configuration_beit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bamba/modular_bamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bamba/configuration_bamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bamba/modeling_bamba.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bamba/convert_mamba_ssm_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/x_clip/modeling_x_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/x_clip/convert_x_clip_original_pytorch_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cvt/modeling_tf_cvt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cvt/configuration_cvt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cvt/modeling_cvt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/cvt/convert_cvt_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/depth_anything/modeling_depth_anything.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/depth_anything/convert_distill_any_depth_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/depth_anything/convert_depth_anything_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/siglip2/modular_siglip2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/siglip2/convert_siglip2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/siglip2/modeling_siglip2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta/modeling_tf_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta/modeling_flax_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta/modeling_roberta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta/convert_roberta_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitdet/configuration_vitdet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitdet/modeling_vitdet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/prompt_depth_anything/modular_prompt_depth_anything.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/prompt_depth_anything/modeling_prompt_depth_anything.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/prompt_depth_anything/convert_prompt_depth_anything_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/tvp/modeling_tvp.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aya_vision/modular_aya_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/aya_vision/modeling_aya_vision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/audio_spectrogram_transformer/convert_audio_spectrogram_transformer_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/audio_spectrogram_transformer/configuration_audio_spectrogram_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/audio_spectrogram_transformer/modeling_audio_spectrogram_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fuyu/modeling_fuyu.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fuyu/convert_fuyu_model_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gptj/modeling_gptj.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gptj/modeling_tf_gptj.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gptj/modeling_flax_gptj.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/distilbert/modeling_tf_distilbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/distilbert/modeling_distilbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/distilbert/modeling_flax_distilbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dac/modeling_dac.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dac/convert_dac_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/encodec/modeling_encodec.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/encodec/convert_encodec_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v_moe/configuration_glm4v_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v_moe/modular_glm4v_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v_moe/modeling_glm4v_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lightglue/convert_lightglue_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lightglue/modular_lightglue.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lightglue/configuration_lightglue.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lightglue/modeling_lightglue.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bridgetower/modeling_bridgetower.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mt5/modeling_mt5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deberta_v2/configuration_deberta_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deberta_v2/modeling_deberta_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deberta_v2/modeling_tf_deberta_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speecht5/convert_speecht5_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speecht5/modeling_speecht5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speecht5/convert_hifigan.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/speecht5/configuration_speecht5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4_moe/modular_glm4_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4_moe/modeling_glm4_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4_moe/configuration_glm4_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_vl/modeling_qwen2_vl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mm_grounding_dino/modular_mm_grounding_dino.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mm_grounding_dino/modeling_mm_grounding_dino.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mm_grounding_dino/convert_mm_grounding_dino_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_sw3/convert_megatron_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swiftformer/modeling_swiftformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nougat/convert_nougat_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swinv2/configuration_swinv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swinv2/modeling_swinv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swinv2/convert_swinv2_timm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/regnet/modeling_regnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/regnet/convert_regnet_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/regnet/modeling_tf_regnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/regnet/convert_regnet_seer_10b_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/regnet/modeling_flax_regnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pop2piano/modeling_pop2piano.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/pop2piano/convert_pop2piano_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_5_omni/modular_qwen2_5_omni.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_5_omni/modeling_qwen2_5_omni.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta_prelayernorm/modeling_tf_roberta_prelayernorm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta_prelayernorm/modeling_roberta_prelayernorm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta_prelayernorm/modeling_flax_roberta_prelayernorm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roberta_prelayernorm/convert_roberta_prelayernorm_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_bert/convert_wav2vec2_seamless_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_bert/modular_wav2vec2_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/wav2vec2_bert/modeling_wav2vec2_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/levit/modeling_levit.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/patchtsmixer/modeling_patchtsmixer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seamless_m4t_v2/convert_fairseq2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seamless_m4t_v2/modeling_seamless_m4t_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2_with_registers/modular_dinov2_with_registers.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2_with_registers/configuration_dinov2_with_registers.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2_with_registers/modeling_dinov2_with_registers.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2_with_registers/convert_dinov2_with_registers_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlnet/modeling_xlnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlnet/modeling_tf_xlnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xlnet/configuration_xlnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mpnet/modeling_tf_mpnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mpnet/modeling_mpnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie/modeling_ernie.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_h1/modular_falcon_h1.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_h1/configuration_falcon_h1.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_h1/modeling_falcon_h1.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon_h1/convert_mamba_ssm_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/instructblip/modeling_instructblip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/instructblip/convert_instructblip_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/instructblip/configuration_instructblip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bros/modeling_bros.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/detr/convert_detr_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/detr/modeling_detr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/detr/convert_detr_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hgnet_v2/modular_hgnet_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hgnet_v2/modeling_hgnet_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/hgnet_v2/configuration_hgnet_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mra/convert_mra_pytorch_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mra/modeling_mra.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/internvl/modeling_internvl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/internvl/configuration_internvl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/internvl/convert_internvl_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava/modeling_llava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava/configuration_llava.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/perceiver/modeling_perceiver.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/perceiver/convert_perceiver_haiku_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/instructblipvideo/convert_instructblipvideo_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/instructblipvideo/modeling_instructblipvideo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/instructblipvideo/configuration_instructblipvideo.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt2/modeling_gpt2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt2/modeling_flax_gpt2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt2/modeling_tf_gpt2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ibert/modeling_ibert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ibert/quant_modules.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm/convert_glm_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm/modular_glm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm/configuration_glm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm/modeling_glm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoeshared/modeling_granitemoeshared.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoeshared/modular_granitemoeshared.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/granitemoeshared/configuration_granitemoeshared.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/flaubert/modeling_tf_flaubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/flaubert/modeling_flaubert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_mae/convert_vit_mae_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_mae/configuration_vit_mae.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_mae/modeling_tf_vit_mae.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vit_mae/modeling_vit_mae.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/roc_bert/modeling_roc_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/prophetnet/convert_prophetnet_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/prophetnet/modeling_prophetnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v/configuration_glm4v.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v/modular_glm4v.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v/convert_glm4v_mgt_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/glm4v/modeling_glm4v.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/textnet/modeling_textnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon/modeling_falcon.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/falcon/configuration_falcon.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot_small/modeling_blenderbot_small.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot_small/modeling_flax_blenderbot_small.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/blenderbot_small/modeling_tf_blenderbot_small.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi4_multimodal/modeling_phi4_multimodal.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi4_multimodal/convert_phi4_multimodal_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi4_multimodal/configuration_phi4_multimodal.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi4_multimodal/modular_phi4_multimodal.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/megatron_bert/modeling_megatron_bert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/megatron_bert/convert_megatron_bert_checkpoint.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_bigcode/modeling_gpt_bigcode.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/funnel/modeling_tf_funnel.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/funnel/modeling_funnel.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/smollm3/modeling_smollm3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/smollm3/configuration_smollm3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/smollm3/modular_smollm3.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi/convert_phi_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi/modeling_phi.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/phi/modular_phi.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fsmt/modeling_fsmt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xmod/modeling_xmod.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xmod/convert_xmod_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitpose_backbone/configuration_vitpose_backbone.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/vitpose_backbone/modeling_vitpose_backbone.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/persimmon/modeling_persimmon.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr_v2/modeling_rt_detr_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr_v2/convert_rt_detr_v2_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr_v2/configuration_rt_detr_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rt_detr_v2/modular_rt_detr_v2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/gpt_neox_japanese/modeling_gpt_neox_japanese.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlm/modeling_tf_layoutlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/layoutlm/modeling_layoutlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/owlv2/modeling_owlv2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/owlv2/convert_owlv2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie4_5/configuration_ernie4_5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie4_5/modular_ernie4_5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/ernie4_5/modeling_ernie4_5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/kyutai_speech_to_text/modeling_kyutai_speech_to_text.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/git/modeling_git.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/git/convert_git_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral/modeling_tf_mistral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral/modular_mistral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral/modeling_flax_mistral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mistral/modeling_mistral.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_moe/configuration_qwen2_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_moe/modeling_qwen2_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nemotron/configuration_nemotron.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nemotron/convert_nemotron_nemo_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/nemotron/modeling_nemotron.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fnet/convert_fnet_original_flax_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/fnet/modeling_fnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bitnet/configuration_bitnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bitnet/modeling_bitnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/canine/modeling_canine.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/openai/modeling_tf_openai.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/openai/modeling_openai.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2/convert_dinov2_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2/modeling_dinov2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2/configuration_dinov2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/dinov2/modeling_flax_dinov2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/lilt/modeling_lilt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama/tokenization_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama/configuration_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama/modeling_flax_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama/tokenization_llama_fast.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llama/modeling_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/whisper/modeling_whisper.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/whisper/modeling_tf_whisper.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/whisper/generation_whisper.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/whisper/convert_openai_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/whisper/modeling_flax_whisper.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_onevision/configuration_llava_onevision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/llava_onevision/modeling_llava_onevision.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen2_audio/modeling_qwen2_audio.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rembert/modeling_rembert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/rembert/modeling_tf_rembert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen3_moe/modeling_qwen3_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen3_moe/modular_qwen3_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/qwen3_moe/configuration_qwen3_moe.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seggpt/convert_seggpt_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seggpt/configuration_seggpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/seggpt/modeling_seggpt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin2sr/configuration_swin2sr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin2sr/convert_swin2sr_original_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/swin2sr/modeling_swin2sr.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mbart/modeling_flax_mbart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mbart/modeling_mbart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mbart/modeling_tf_mbart.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/mbart/convert_mbart_original_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/graphormer/collating_graphormer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/graphormer/configuration_graphormer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/graphormer/modeling_graphormer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/trajectory_transformer/modeling_trajectory_transformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/xlm_prophetnet/modeling_xlm_prophetnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/qdqbert/modeling_qdqbert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/nat/configuration_nat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/nat/modeling_nat.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/open_llama/modeling_open_llama.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/transfo_xl/modeling_transfo_xl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/transfo_xl/modeling_tf_transfo_xl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/transfo_xl/configuration_transfo_xl.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/transfo_xl/modeling_tf_transfo_xl_utilities.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/transfo_xl/modeling_transfo_xl_utilities.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/ernie_m/modeling_ernie_m.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/van/modeling_van.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/tvlt/configuration_tvlt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/tvlt/modeling_tvlt.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/mctct/modeling_mctct.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/bort/convert_bort_original_gluonnlp_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/nezha/modeling_nezha.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/mega/configuration_mega.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/mega/convert_mega_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/mega/modeling_mega.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/jukebox/convert_jukebox.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/jukebox/modeling_jukebox.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/vit_hybrid/configuration_vit_hybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/vit_hybrid/modeling_vit_hybrid.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/vit_hybrid/convert_vit_hybrid_timm_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/deta/modeling_deta.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/deta/convert_deta_resnet_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/deta/convert_deta_swin_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/retribert/modeling_retribert.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/speech_to_text_2/modeling_speech_to_text_2.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/efficientformer/convert_efficientformer_original_pytorch_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/efficientformer/modeling_efficientformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/efficientformer/modeling_tf_efficientformer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/realm/modeling_realm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/gptsan_japanese/modeling_gptsan_japanese.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/gptsan_japanese/convert_gptsan_tf_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/gptsan_japanese/configuration_gptsan_japanese.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xglm/modeling_flax_xglm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xglm/modeling_tf_xglm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xglm/convert_xglm_original_ckpt_to_trfms.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/xglm/modeling_xglm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/bitnet.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/finegrained_fp8.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/higgs.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/aqlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/vptq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/tensor_parallel.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/fbgemm_fp8.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/eetq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/awq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/bitsandbytes.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/mxfp4.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/integration_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/integrations/quanto.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/commands/serving.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/data/datasets/language_modeling.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/configuration_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/logits_process.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/watermarking.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/__init__.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/utils.py"
      ],
      "validation_schemas": [],
      "model_cards": [],
      "data_validation_libs": []
    },
    "rubric": {
      "5": "bias + explainability + validation schema + model card",
      "4": "three of the above",
      "3": "two of the above",
      "2": "one present",
      "1": "none present"
    }
  },
  "lineage_readiness": {
    "metric_id": "lineage_practices_readiness_band",
    "evidence": {
      "git_sha_logging": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/convert_marian_to_pytorch.py"
      ],
      "data_refs": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docker/transformers-pytorch-tpu/Dockerfile",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/test_training_args.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/utils/test_image_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/tapas/test_tokenization_tapas.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/models/t5/test_tokenization_t5.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/utils/update_metadata.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/tasks/video_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/tasks/video_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/pr_checks.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/testing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/tasks/video_classification.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/seggpt.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/imagegpt.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/model_doc/detr.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/internal/import_utils.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/metrics-monitoring/grafana-dashboard.yaml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling-tpu/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling-tpu/prepare_tfrecord_shards.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling-tpu/run_mlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/templates/adding_a_new_model/open_model_proposals/ADD_BIG_BIRD.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/optimization.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/trainer_pt_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/pipelines/table_question_answering.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/olmoe/convert_olmoe_weights_to_hf.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/convert_marian_tatoeba_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/marian/convert_marian_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/tapas/tokenization_tapas.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/umt5/convert_umt5_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/t5/convert_t5x_checkpoint_to_pytorch.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/bloom/modeling_bloom.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/models/deprecated/tapex/tokenization_tapex.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/continuous_batching.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/watermarking.py"
      ],
      "env_locks": [
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/setup.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/CONTRIBUTING.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docker/transformers-pytorch-tpu/Dockerfile",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docker/transformers-pytorch-deepspeed-nightly-gpu/Dockerfile",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/tests/sagemaker/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ja/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/it/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/pt/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/zh/contributing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ar/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/de/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/de/contributing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/ko/contributing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/fr/run_scripts_fr.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/es/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/perf_train_cpu_many.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/generation_strategies.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/run_scripts.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/docs/source/en/contributing.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/run_on_remote.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/README.md",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/token-classification/run_flax_ner.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/flax/speech-recognition/run_flax_speech_recognition_seq2seq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/translation/run_translation.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/summarization/run_summarization.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/image-classification/run_image_classification.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling/run_clm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/language-modeling/run_mlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/token-classification/run_ner.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/tensorflow/contrastive-image-text/run_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_qa.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_qa_beam_search.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_qa_beam_search_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_qa_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/question-answering/run_seq2seq_qa.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/audio-classification/run_audio_classification.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/translation/run_translation_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/translation/run_translation.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/semantic-segmentation/run_semantic_segmentation_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/semantic-segmentation/run_semantic_segmentation.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/summarization/run_summarization_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/summarization/run_summarization.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-pretraining/run_mae.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-pretraining/run_mim_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-pretraining/run_mim.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/text-classification/run_glue.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/text-classification/run_glue_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/text-classification/run_xnli.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/text-classification/run_classification.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-classification/run_image_classification_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/image-classification/run_image_classification.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_clm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_fim_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_plm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_fim.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_mlm_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_clm_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/language-modeling/run_mlm.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/token-classification/run_ner.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/token-classification/run_ner_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/object-detection/run_object_detection_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/object-detection/run_object_detection.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/speech-recognition/run_speech_recognition_ctc.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/speech-recognition/run_speech_recognition_seq2seq.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/speech-recognition/run_speech_recognition_ctc_adapter.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/contrastive-image-text/run_clip.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/instance-segmentation/run_instance_segmentation_no_trainer.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/examples/pytorch/instance-segmentation/run_instance_segmentation.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/benchmark.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi.yml",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.circleci/create_circleci_config.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/dynamic_module_utils.py",
        "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/src/transformers/generation/utils.py"
      ]
    },
    "rubric": {
      "5": "git_sha + data_ref + env lock all logged",
      "4": "two present",
      "3": "one present",
      "2": "weak hints",
      "1": "none"
    }
  },
  "dora_readiness": {
    "metric_id": "dora_readiness_band",
    "evidence": {
      "environments": [
        "build",
        "transformers_is_ci"
      ],
      "concurrency": [
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency",
        "concurrency"
      ],
      "rollback": [],
      "health_checks": [],
      "schedules": [
        "on:\n  schedule",
        "cron: \"17 2,14 * * *\"",
        "cron: \"6 0 * * *\"",
        "on:\n  schedule",
        "cron: \"0 8 * * *\"",
        "cron: \"17 2 * * *\"",
        "cron: \"17 0 * * *\"",
        "cron: \"17 2 * * *\"",
        "on:\n  schedule",
        "cron: \"17 2 * * *\"",
        "cron: \"0 2 * * *\"",
        "cron: \"17 2 * * *\"",
        "cron: \"17 2 * * *\""
      ]
    },
    "rubric": {
      "5": "env promotion + concurrency + rollback + health checks + schedules",
      "4": "envs + two of (concurrency, rollback, health checks)",
      "3": "envs + one",
      "2": "weak hints only",
      "1": "none"
    }
  },
  "cost_attribution_readiness": {
    "metric_id": "cost_attribution_readiness_band",
    "evidence": {
      "tag_keys_detected": [
        "addresses",
        "backend",
        "background",
        "block_retention",
        "cache",
        "caches",
        "cluster",
        "compaction",
        "compactor",
        "defaults",
        "distributor",
        "duration_slo",
        "endpoint",
        "external_labels",
        "filter_server_spans",
        "flush_to_storage",
        "generate_native_histograms",
        "grpc",
        "http",
        "http_listen_port",
        "ingester",
        "jaeger",
        "local",
        "local_blocks",
        "log_level",
        "max_block_duration",
        "max_duration",
        "memcached",
        "metadata_slo",
        "metrics",
        "metrics_generator",
        "opencensus",
        "otlp",
        "overrides",
        "path",
        "processor",
        "processors",
        "protocols",
        "query_backend_after",
        "query_frontend",
        "receivers",
        "registry",
        "remote_write",
        "search",
        "send_exemplars",
        "server",
        "source",
        "storage",
        "stream_over_http_enabled",
        "thrift_binary",
        "thrift_compact",
        "thrift_http",
        "throughput_bytes_slo",
        "trace",
        "trace_by_id",
        "traces_storage",
        "wal",
        "writeback_goroutines",
        "zipkin"
      ],
      "missing_required": [
        "service",
        "env",
        "owner",
        "model",
        "endpoint_id"
      ],
      "sample_lines": []
    },
    "rubric": {
      "5": "all required keys present and consistent",
      "4": "most keys present",
      "3": "some present",
      "2": "few present",
      "1": "none"
    }
  },
  "slo_declared": {
    "metric_id": "slo_declared_band",
    "evidence": {
      "slo_docs": [],
      "slo_env_vars": [],
      "samples": []
    },
    "rubric": {
      "5": "SLO docs + thresholds in env/alerts",
      "4": "SLO docs only",
      "3": "scattered thresholds",
      "2": "mentions only",
      "1": "none"
    }
  }
}