{
  "metric_id": "cicd.policy_gates_band",
  "required_checks": [
    "pytest",
    "integration-tests",
    "bandit",
    "trivy",
    "bias_check",
    "data_validation"
  ],
  "workflow_files": [
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd-mi300-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd-mi250-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/pr-style-bot.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/model_jobs_intel_gaudi.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi300-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/trufflehog.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-nightly-past-ci-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/push-important-models.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi250-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-nightly-ci-docker-images.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/pr_build_doc_with_comment.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/update_metdata.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/release-conda.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-ci-docker-images.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/stale.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/get-pr-number.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/add-model-like.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/check_failed_tests.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/doctest_job.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-past-ci-docker-images.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/benchmark.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/ssh-runner.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/upload_pr_documentation.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build-docker-images.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build_documentation.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-amd-mi210-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/build_pr_documentation.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-comment-ci.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/assign-reviewers.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi3-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-past-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-amd-mi325-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/slack-report.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-push-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/get-pr-info.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/pr_run_slow_ci.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/check_tiny_models.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/model_jobs.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-nightly-caller.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/self-scheduled-intel-gaudi.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/new_model_pr_merged_notification.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.github/workflows/doctests.yml",
    "/Users/anilkumar/Desktop/ClaimbAI/useful_repos/Github_repos/transformers/.circleci/config.yml"
  ],
  "workflow_yaml": [
    "name: Self-hosted runner AMD GPU (push)\n\non:\n  workflow_call:\n    inputs:\n      gpu_flavor:\n        required: true\n        type: string\n\nenv:\n  HF_HOME: /mnt/cache\n  TRANSFORMERS_IS_CI: yes\n  OMP_NUM_THREADS: 8\n  MKL_NUM_THREADS: 8\n  PYTEST_TIMEOUT: 60\n  TF_FORCE_GPU_ALLOW_GROWTH: true\n  HF_HUB_READ_TOKEN: ${{ secrets.HF_HUB_READ_TOKEN }}\n\njobs:\n  check_runner_status:\n    name: Check Runner Status\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout transformers\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Check Runner Status\n        run: python utils/check_self_hosted_runner.py --target_runners amd-mi210-single-gpu-ci-runner-docker --token ${{ secrets.ACCESS_REPO_INFO_TOKEN }}\n\n  check_runners:\n    name: Check Runners\n    needs: check_runner_status\n    strategy:\n      matrix:\n        machine_type: [single-gpu, multi-gpu]\n    runs-on: [self-hosted, amd-gpu, '${{ matrix.machine_type }}', '${{ inputs.gpu_flavor }}']\n    container:\n      image: huggingface/transformers-pytorch-amd-gpu-push-ci  # <--- We test only for PyTorch for now\n      options: --device /dev/kfd --device /dev/dri --env ROCR_VISIBLE_DEVICES --shm-size \"16gb\" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/\n    steps:\n      - name: ROCM-SMI\n        run: |\n          rocm-smi\n      - name: ROCM-INFO\n        run: |\n          rocminfo  | grep \"Agent\" -A 14\n      - name: Show ROCR environment\n        run: |\n          echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n\n  setup_gpu:\n    name: Setup\n    needs: check_runners\n    strategy:\n      matrix:\n        machine_type: [single-gpu, multi-gpu]\n    runs-on: [self-hosted, amd-gpu, '${{ matrix.machine_type }}', '${{ inputs.gpu_flavor }}']\n    container:\n      image: huggingface/transformers-pytorch-amd-gpu-push-ci  # <--- We test only for PyTorch for now\n      options: --device /dev/kfd --device /dev/dri --env ROCR_VISIBLE_DEVICES --shm-size \"16gb\" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.matrix }}\n      test_map: ${{ steps.set-matrix.outputs.test_map }}\n    env:\n      # `CI_BRANCH_PUSH`: The branch name from the push event\n      # `CI_BRANCH_WORKFLOW_RUN`: The name of the branch on which this workflow is triggered by `workflow_run` event\n      # `CI_SHA_PUSH`: The commit SHA from the push event\n      # `CI_SHA_WORKFLOW_RUN`: The commit SHA that triggers this workflow by `workflow_run` event\n      CI_BRANCH_PUSH: ${{ github.event.ref }}\n      CI_BRANCH_WORKFLOW_RUN: ${{ github.event.workflow_run.head_branch }}\n      CI_SHA_PUSH: ${{ github.event.head_commit.id }}\n      CI_SHA_WORKFLOW_RUN: ${{ github.event.workflow_run.head_sha }}\n    steps:\n      # Necessary to get the correct branch name and commit SHA for `workflow_run` event\n      # We also take into account the `push` event (we might want to test some changes in a branch)\n      - name: Prepare custom environment variables\n        shell: bash\n        # `CI_BRANCH`: The non-empty branch name from the above two (one and only one of them is empty)\n        # `CI_SHA`: The non-empty commit SHA from the above two (one and only one of them is empty)\n        run: |\n          CI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\n          echo $CI_BRANCH_PUSH\n          echo $CI_BRANCH_WORKFLOW_RUN\n          echo $CI_SHA_PUSH\n          echo $CI_SHA_WORKFLOW_RUN\n          [[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n          [[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n\n      - name: print environment variables\n        run: |\n          echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\n          echo \"env.CI_SHA = ${{ env.CI_SHA }}\"\n\n      - name: Update clone using environment variables\n        working-directory: /transformers\n        run: |\n          echo \"original branch = $(git branch --show-current)\"\n          git fetch && git checkout ${{ env.CI_BRANCH }}\n          echo \"updated branch = $(git branch --show-current)\"\n          git checkout ${{ env.CI_SHA }}\n          echo \"log = $(git log -n 1)\"\n\n      - name: Cleanup\n        working-directory: /transformers\n        run: |\n          rm -rf tests/__pycache__\n          rm -rf tests/models/__pycache__\n          rm -rf reports\n\n      - name: Show installed libraries and their versions\n        working-directory: /transformers\n        run: pip freeze\n\n      - name: Fetch the tests to run\n        working-directory: /transformers\n        # TODO: add `git-python` in the docker images\n        run: |\n          pip install --upgrade git-python\n          python3 utils/tests_fetcher.py --diff_with_last_commit | tee test_preparation.txt\n\n      - name: Report fetched tests\n        uses: actions/upload-artifact@v4\n        with:\n          name: test_fetched\n          path: /transformers/test_preparation.txt\n\n      - id: set-matrix\n        name: Organize tests into models\n        working-directory: /transformers\n        # The `keys` is used as GitHub actions matrix for jobs, i.e. `models/bert`, `tokenization`, `pipeline`, etc.\n        # The `test_map` is used to get the actual identified test files under each key.\n        # If no test to run (so no `test_map.json` file), create a dummy map (empty matrix will fail)\n        run: |\n          if [ -f test_map.json ]; then\n              keys=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); d = list(test_map.keys()); print(d)')\n              test_map=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); print(test_map)')\n          else\n              keys=$(python3 -c 'keys = [\"dummy\"]; print(keys)')\n              test_map=$(python3 -c 'test_map = {\"dummy\": []}; print(test_map)')\n          fi\n          echo $keys\n          echo $test_map\n          echo \"matrix=$keys\" >> $GITHUB_OUTPUT\n          echo \"test_map=$test_map\" >> $GITHUB_OUTPUT\n\n  run_models_gpu:\n    name: Model tests\n    needs: setup_gpu\n    # `dummy` means there is no test to run\n    if: contains(fromJson(needs.setup_gpu.outputs.matrix), 'dummy') != true\n    strategy:\n      fail-fast: false\n      matrix:\n        folders: ${{ fromJson(needs.setup_gpu.outputs.matrix) }}\n        machine_type: [single-gpu, multi-gpu]\n    runs-on: [self-hosted, amd-gpu, '${{ matrix.machine_type }}', '${{ inputs.gpu_flavor }}']\n    container:\n      image: huggingface/transformers-pytorch-amd-gpu-push-ci  # <--- We test only for PyTorch for now\n      options: --device /dev/kfd --device /dev/dri --env ROCR_VISIBLE_DEVICES --shm-size \"16gb\" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/\n    env:\n      # For the meaning of these environment variables, see the job `Setup`\n      CI_BRANCH_PUSH: ${{ github.event.ref }}\n      CI_BRANCH_WORKFLOW_RUN: ${{ github.event.workflow_run.head_branch }}\n      CI_SHA_PUSH: ${{ github.event.head_commit.id }}\n      CI_SHA_WORKFLOW_RUN: ${{ github.event.workflow_run.head_sha }}\n    steps:\n      # Necessary to get the correct branch name and commit SHA for `workflow_run` event\n      # We also take into account the `push` event (we might want to test some changes in a branch)\n      - name: Prepare custom environment variables\n        shell: bash\n        # For the meaning of these environment variables, see the job `Setup`\n        run: |\n          CI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\n          echo $CI_BRANCH_PUSH\n          echo $CI_BRANCH_WORKFLOW_RUN\n          echo $CI_SHA_PUSH\n          echo $CI_SHA_WORKFLOW_RUN\n          [[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n          [[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n\n      - name: print environment variables\n        run: |\n          echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\n          echo \"env.CI_SHA = ${{ env.CI_SHA }}\"\n\n      - name: Update clone using environment variables\n        working-directory: /transformers\n        run: |\n          echo \"original branch = $(git branch --show-current)\"\n          git fetch && git checkout ${{ env.CI_BRANCH }}\n          echo \"updated branch = $(git branch --show-current)\"\n          git checkout ${{ env.CI_SHA }}\n          echo \"log = $(git log -n 1)\"\n\n      - name: Reinstall transformers in edit mode (remove the one installed during docker image build)\n        working-directory: /transformers\n        run: python3 -m pip uninstall -y transformers && python3 -m pip install -e .\n\n      - name: Echo folder ${{ matrix.folders }}\n        shell: bash\n        # For folders like `models/bert`, set an env. var. (`matrix_folders`) to `models_bert`, which will be used to\n        # set the artifact folder names (because the character `/` is not allowed).\n        run: |\n          echo \"${{ matrix.folders }}\"\n          echo \"${{ fromJson(needs.setup_gpu.outputs.test_map)[matrix.folders] }}\"\n          matrix_folders=${{ matrix.folders }}\n          matrix_folders=${matrix_folders/'models/'/'models_'}\n          echo \"$matrix_folders\"\n          echo \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n\n      - name: ROCM-SMI\n        run: |\n          rocm-smi\n      - name: ROCM-INFO\n        run: |\n          rocminfo  | grep \"Agent\" -A 14\n      - name: Show ROCR environment\n        run: |\n          echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n\n      - name: Environment\n        working-directory: /transformers\n        run: |\n          python3 utils/print_env.py\n\n      - name: Show installed libraries and their versions\n        working-directory: /transformers\n        run: pip freeze\n\n      - name: Run all non-slow selected tests on GPU\n        working-directory: /transformers\n        run: |\n          python3 -m pytest -n 2 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports ${{ fromJson(needs.setup_gpu.outputs.test_map)[matrix.folders] }} -m \"not not_device_test\"\n\n      - name: Failure short reports\n        if: ${{ failure() }}\n        continue-on-error: true\n        run: cat /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt\n\n      - name: \"Test suite reports artifacts: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports\"\n        if: ${{ always() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports\n          path: /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports\n\n  send_results:\n    name: Send results to webhook\n    runs-on: ubuntu-22.04\n    if: always()\n    needs: [\n        check_runner_status,\n        check_runners,\n        setup_gpu,\n        run_models_gpu,\n#        run_tests_torch_cuda_extensions_single_gpu,\n#        run_tests_torch_cuda_extensions_multi_gpu\n    ]\n    env:\n      # For the meaning of these environment variables, see the job `Setup`\n      CI_BRANCH_PUSH: ${{ github.event.ref }}\n      CI_BRANCH_WORKFLOW_RUN: ${{ github.event.workflow_run.head_branch }}\n      CI_SHA_PUSH: ${{ github.event.head_commit.id }}\n      CI_SHA_WORKFLOW_RUN: ${{ github.event.workflow_run.head_sha }}\n    steps:\n      - name: Preliminary job status\n        shell: bash\n        # For the meaning of these environment variables, see the job `Setup`\n        run: |\n          echo \"Runner availability: ${{ needs.check_runner_status.result }}\"\n          echo \"Setup status: ${{ needs.setup_gpu.result }}\"\n          echo \"Runner status: ${{ needs.check_runners.result }}\"\n\n      # Necessary to get the correct branch name and commit SHA for `workflow_run` event\n      # We also take into account the `push` event (we might want to test some changes in a branch)\n      - name: Prepare custom environment variables\n        shell: bash\n        # For the meaning of these environment variables, see the job `Setup`\n        run: |\n          CI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\n          echo $CI_BRANCH_PUSH\n          echo $CI_BRANCH_WORKFLOW_RUN\n          echo $CI_SHA_PUSH\n          echo $CI_SHA_WORKFLOW_RUN\n          [[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n          [[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n\n      - name: print environment variables\n        run: |\n          echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\n          echo \"env.CI_SHA = ${{ env.CI_SHA }}\"\n\n      - uses: actions/checkout@v4\n        # To avoid failure when multiple commits are merged into `main` in a short period of time.\n        # Checking out to an old commit beyond the fetch depth will get an error `fatal: reference is not a tree: ...\n        # (Only required for `workflow_run` event, where we get the latest HEAD on `main` instead of the event commit)\n        with:\n          fetch-depth: 20\n\n      - name: Update clone using environment variables\n        run: |\n          echo \"original branch = $(git branch --show-current)\"\n          git fetch && git checkout ${{ env.CI_BRANCH }}\n          echo \"updated branch = $(git branch --show-current)\"\n          git checkout ${{ env.CI_SHA }}\n          echo \"log = $(git log -n 1)\"\n\n      - uses: actions/download-artifact@v4\n      - name: Send message to Slack\n        env:\n          CI_SLACK_BOT_TOKEN: ${{ secrets.CI_SLACK_BOT_TOKEN }}\n          CI_SLACK_CHANNEL_ID: ${{ secrets.CI_SLACK_CHANNEL_ID }}\n          CI_SLACK_CHANNEL_ID_DAILY: ${{ secrets.CI_SLACK_CHANNEL_ID_DAILY }}\n          CI_SLACK_CHANNEL_ID_AMD: ${{ secrets.CI_SLACK_CHANNEL_ID_AMD }}\n          CI_SLACK_CHANNEL_DUMMY_TESTS: ${{ secrets.CI_SLACK_CHANNEL_DUMMY_TESTS }}\n          CI_SLACK_REPORT_CHANNEL_ID: ${{ secrets.CI_SLACK_CHANNEL_ID_AMD }}\n          ACCESS_REPO_INFO_TOKEN: ${{ secrets.ACCESS_REPO_INFO_TOKEN }}\n          CI_EVENT: Push CI (AMD) - ${{ inputs.gpu_flavor }}\n          CI_TITLE_PUSH: ${{ github.event.head_commit.message }}\n          CI_TITLE_WORKFLOW_RUN: ${{ github.event.workflow_run.head_commit.message }}\n          CI_SHA: ${{ env.CI_SHA }}\n          RUNNER_STATUS: ${{ needs.check_runner_status.result }}\n          RUNNER_ENV_STATUS: ${{ needs.check_runners.result }}\n          SETUP_STATUS: ${{ needs.setup_gpu.result }}\n\n        # We pass `needs.setup_gpu.outputs.matrix` as the argument. A processing in `notification_service.py` to change\n        # `models/bert` to `models_bert` is required, as the artifact names use `_` instead of `/`.\n        run: |\n          pip install huggingface_hub\n          pip install slack_sdk\n          pip show slack_sdk\n          python utils/notification_service.py \"${{ needs.setup_gpu.outputs.matrix }}\"\n",
    "name: Self-hosted runner (AMD mi300 CI caller)\n\non:\n  #workflow_run:\n  #  workflows: [\"Self-hosted runner (push-caller)\"]\n  #  branches: [\"main\"]\n  #  types: [completed]\n  push:\n    branches:\n      - run_amd_push_ci_caller*\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n      - \"templates/**\"\n      - \"utils/**\"\n\njobs:\n  run_amd_ci:\n    name: AMD mi300\n    if: (cancelled() != true) && ((github.event_name == 'workflow_run') || ((github.event_name == 'push') && (startsWith(github.ref_name, 'run_amd_push_ci_caller') || startsWith(github.ref_name, 'mi300-ci'))))\n    uses: ./.github/workflows/self-push-amd.yml\n    with:\n      gpu_flavor: mi300\n    secrets: inherit\n",
    "name: Self-hosted runner (AMD mi250 CI caller)\n\non:\n  #workflow_run:\n  #  workflows: [\"Self-hosted runner (push-caller)\"]\n  #  branches: [\"main\"]\n  #  types: [completed]\n  push:\n    branches:\n      - run_amd_push_ci_caller*\n    paths:\n      - \"src/**\"\n      - \"tests/**\"\n      - \".github/**\"\n      - \"templates/**\"\n      - \"utils/**\"\n\njobs:\n  run_amd_ci:\n    name: AMD mi250\n    if: (cancelled() != true) && ((github.event_name == 'workflow_run') || ((github.event_name == 'push') && startsWith(github.ref_name, 'run_amd_push_ci_caller')))\n    uses: ./.github/workflows/self-push-amd.yml\n    with:\n      gpu_flavor: mi250\n    secrets: inherit\n",
    "# To run this bot, comment \"@bot /style\" on a PR\nname: Style Bot\n\non:\n  issue_comment:\n    types: [created]\n\npermissions:\n  pull-requests: write\n\njobs:\n  style:\n    uses: huggingface/huggingface_hub/.github/workflows/style-bot-action.yml@main\n    with:\n      python_quality_dependencies: \"[quality]\"\n      style_command_type: \"default\"\n    secrets:\n      bot_token: ${{ secrets.HF_STYLE_BOT_ACTION }}\n"
  ],
  "evidence": {
    "present_flags": {
      "pytest": true,
      "integration": false,
      "bandit": false,
      "trivy": false,
      "bias": false,
      "data_validation": false
    },
    "schedules": [
      "on:\n  schedule",
      "cron: \"17 2,14 * * *\"",
      "cron: \"6 0 * * *\"",
      "on:\n  schedule",
      "cron: \"0 8 * * *\"",
      "cron: \"17 2 * * *\"",
      "cron: \"17 0 * * *\"",
      "cron: \"17 2 * * *\"",
      "on:\n  schedule",
      "cron: \"17 2 * * *\"",
      "cron: \"0 2 * * *\"",
      "cron: \"17 2 * * *\"",
      "cron: \"17 2 * * *\""
    ],
    "deploy_jobs": [
      "Release",
      "release",
      "release"
    ],
    "environments": [
      "build",
      "transformers_is_ci"
    ]
  },
  "rubric": "5 if all required checks exist and run before deploy; 4 if most present; 3 if partial; 2 minimal; 1 if missing."
}